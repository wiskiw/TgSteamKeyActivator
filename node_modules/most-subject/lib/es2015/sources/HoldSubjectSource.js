var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { defaultScheduler } from 'most';
import { MulticastSource } from '@most/multicast';
import { append, drop } from '@most/prelude';
var HoldSubjectSource = (function (_super) {
    __extends(HoldSubjectSource, _super);
    function HoldSubjectSource(source, bufferSize) {
        var _this = _super.call(this, source) || this;
        _this.has = false;
        _this.buffer = [];
        _this.bufferSize = bufferSize;
        return _this;
    }
    HoldSubjectSource.prototype.add = function (sink) {
        if (this.has) {
            pushEvents(this.buffer, sink);
        }
        return _super.prototype.add.call(this, sink);
    };
    HoldSubjectSource.prototype.event = function (time, value) {
        this.has = true;
        this.buffer = dropAndAppend(value, this.buffer, this.bufferSize);
        return _super.prototype.event.call(this, time, value);
    };
    return HoldSubjectSource;
}(MulticastSource));
export { HoldSubjectSource };
function pushEvents(buffer, sink) {
    var length = buffer.length;
    for (var i = 0; i < length; ++i) {
        sink.event(defaultScheduler.now(), buffer[i]);
    }
}
export function dropAndAppend(value, buffer, bufferSize) {
    if (buffer.length === bufferSize) {
        return append(value, drop(1, buffer));
    }
    return append(value, buffer);
}
//# sourceMappingURL=HoldSubjectSource.js.map