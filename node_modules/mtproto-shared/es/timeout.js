import Bluebird from 'bluebird';

const cancelToken = Symbol('cancel token');

const timeoutRefs = new WeakSet();

export const pause = delay => new Bluebird(r => setTimeout(r, delay));

export const smartTimeout = (fn, delay = 0, ...args) => {
  const newToken = Symbol('cancel id');
  const checkRun = () => {
    if (timeoutRefs.has(newToken)) {
      timeoutRefs.delete(newToken);
      return fn(...args);
    } else return false;
  };
  const promise = pause(delay).then(checkRun);
  //$FlowIssue
  promise[cancelToken] = newToken;
  return promise;
};

const cancel = promise => {
  if (!promise || !promise[cancelToken]) return false;
  const token = promise[cancelToken];
  return timeoutRefs.has(token) ? timeoutRefs.delete(token) : false;
};

export const immediate = (fn, ...args) => Bluebird.resolve().then(() => fn(...args));

export function immediateWrap(fn) {
  return arg => Bluebird.resolve().then(() => fn(arg));
}

smartTimeout.immediate = immediate;
smartTimeout.cancel = cancel;

export default smartTimeout;
//# sourceMappingURL=timeout.js.map