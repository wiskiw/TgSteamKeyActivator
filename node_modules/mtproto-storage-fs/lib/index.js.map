{"version":3,"sources":["../src/index.js"],"names":["JsonStorage","constructor","file","data","normalizePath","get","key","resolve","set","val","has","remove","keys","clear","filepath","parsed","ext","Storage"],"mappings":";;;;;;;AACA;;;;AACA;;AACA;;;;AAMA;;AAEA;AACA;;AAIO,MAAMA,WAAN,CAAkB;AAEvBC,cAAYC,IAAZ,EAA0BC,IAA1B,EAAuC;AACrC,SAAKD,IAAL,GAAYE,cAAcF,IAAd,CAAZ;AACA,QAAI,CAAC,6BAAe,KAAKA,IAApB,CAAD,IAA8B,CAAC,CAACC,IAApC,EACE,6BAAe,KAAKD,IAApB,EAA0BC,QAAQ,EAAlC;AACH;AACDE,MAAIC,GAAJ,EAA+B;AAC7B,WAAO,mBAASC,OAAT,CAAiB,2BAAa,KAAKL,IAAlB,EAAwBI,GAAxB,CAAjB,CAAP;AACD;;AAEDE,MAAIF,GAAJ,EAAiBG,GAAjB,EAA0C;AACxC,UAAMN,OAAO,2BAAa,KAAKD,IAAlB,CAAb;AACAC,SAAKG,GAAL,IAAYG,GAAZ;AACA,iCAAe,KAAKP,IAApB,EAA0BC,IAA1B;AACA,WAAO,mBAASI,OAAT,EAAP;AACD;;AAEDG,MAAIJ,GAAJ,EAAmC;AACjC,WAAO,mBAASC,OAAT,CAAiB,CAAC,CAAC,2BAAa,KAAKL,IAAlB,EAAwBI,GAAxB,CAAnB,CAAP;AACD;;AAEDK,SAAO,GAAGC,IAAV,EAAyC;AACvC,UAAMT,OAAO,2BAAa,KAAKD,IAAlB,CAAb;AACA,SAAK,MAAMI,GAAX,IAAkBM,IAAlB,EAAwB;AACtB,aAAOT,KAAKG,GAAL,CAAP;AACD;AACD,iCAAe,KAAKJ,IAApB,EAA0BC,IAA1B;AACA,WAAO,mBAASI,OAAT,EAAP;AACD;AACDM,UAAuB;AACrB,iCAAe,KAAKX,IAApB,EAA0B,EAA1B;AACA,WAAO,mBAASK,OAAT,EAAP;AACD;AAjCsB;;QAAZP,W,GAAAA,W;AAoCb,SAASI,aAAT,CAAuBU,QAAvB,EAAyC;AACvC,QAAMC,SAAS,iBAAMD,QAAN,CAAf;AACA,MAAIC,OAAOC,GAAP,KAAe,OAAnB,EACE,OAAO,oCAAYD,MAAZ,IAAoBC,KAAK,OAAzB,IAAP;AACF,SAAOF,QAAP;AACD;;QAEuBG,O,GAAfjB,W;kBAEMA,W","file":"index.js","sourcesContent":["//@flow\nimport Bluebird from 'bluebird'\nimport { parse, format } from 'path'\nimport {\n  readJsonSync,\n  outputJsonSync,\n  pathExistsSync,\n} from 'fs-extra'\n\n// import { type AsyncStorage } from 'mtproto-shared'\n\n// import Logger from 'mtproto-logger'\n// const log = Logger`json-storage`\n\ntype Data = { [key: string]: any }\n\nexport class JsonStorage {\n  file: string\n  constructor(file: string, data?: Data) {\n    this.file = normalizePath(file)\n    if (!pathExistsSync(this.file) || !!data)\n      outputJsonSync(this.file, data || {})\n  }\n  get(key: string): Promise<any> {\n    return Bluebird.resolve(readJsonSync(this.file)[key])\n  }\n\n  set(key: string, val: any): Promise<void> {\n    const data = readJsonSync(this.file)\n    data[key] = val\n    outputJsonSync(this.file, data)\n    return Bluebird.resolve()\n  }\n\n  has(key: string): Promise<boolean> {\n    return Bluebird.resolve(!!readJsonSync(this.file)[key])\n  }\n\n  remove(...keys: string[]): Promise<void> {\n    const data = readJsonSync(this.file)\n    for (const key of keys) {\n      delete data[key]\n    }\n    outputJsonSync(this.file, data)\n    return Bluebird.resolve()\n  }\n  clear(): Promise<void> {\n    outputJsonSync(this.file, {})\n    return Bluebird.resolve()\n  }\n}\n\nfunction normalizePath(filepath: string) {\n  const parsed = parse(filepath)\n  if (parsed.ext !== '.json')\n    return format({ ...parsed, ext: '.json' })\n  return filepath\n}\n\nexport { JsonStorage as Storage }\n\nexport default JsonStorage\n"]}