'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Storage = exports.JsonStorage = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _fsExtra = require('fs-extra');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import { type AsyncStorage } from 'mtproto-shared'

// import Logger from 'mtproto-logger'
// const log = Logger`json-storage`

class JsonStorage {
  constructor(file, data) {
    this.file = normalizePath(file);
    if (!(0, _fsExtra.pathExistsSync)(this.file) || !!data) (0, _fsExtra.outputJsonSync)(this.file, data || {});
  }
  get(key) {
    return _bluebird2.default.resolve((0, _fsExtra.readJsonSync)(this.file)[key]);
  }

  set(key, val) {
    const data = (0, _fsExtra.readJsonSync)(this.file);
    data[key] = val;
    (0, _fsExtra.outputJsonSync)(this.file, data);
    return _bluebird2.default.resolve();
  }

  has(key) {
    return _bluebird2.default.resolve(!!(0, _fsExtra.readJsonSync)(this.file)[key]);
  }

  remove(...keys) {
    const data = (0, _fsExtra.readJsonSync)(this.file);
    for (const key of keys) {
      delete data[key];
    }
    (0, _fsExtra.outputJsonSync)(this.file, data);
    return _bluebird2.default.resolve();
  }
  clear() {
    (0, _fsExtra.outputJsonSync)(this.file, {});
    return _bluebird2.default.resolve();
  }
}

exports.JsonStorage = JsonStorage;
function normalizePath(filepath) {
  const parsed = (0, _path.parse)(filepath);
  if (parsed.ext !== '.json') return (0, _path.format)(Object.assign({}, parsed, { ext: '.json' }));
  return filepath;
}

exports.Storage = JsonStorage;
exports.default = JsonStorage;
//# sourceMappingURL=index.js.map