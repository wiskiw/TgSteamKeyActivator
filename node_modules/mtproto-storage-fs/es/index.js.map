{"version":3,"sources":["../src/index.js"],"names":["Bluebird","parse","format","readJsonSync","outputJsonSync","pathExistsSync","JsonStorage","constructor","file","data","normalizePath","get","key","resolve","set","val","has","remove","keys","clear","filepath","parsed","ext","Storage"],"mappings":"AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,MAA9B;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,UAJP;;AAMA;;AAEA;AACA;;AAIA,OAAO,MAAMC,WAAN,CAAkB;AAEvBC,cAAYC,IAAZ,EAA0BC,IAA1B,EAAuC;AACrC,SAAKD,IAAL,GAAYE,cAAcF,IAAd,CAAZ;AACA,QAAI,CAACH,eAAe,KAAKG,IAApB,CAAD,IAA8B,CAAC,CAACC,IAApC,EACEL,eAAe,KAAKI,IAApB,EAA0BC,QAAQ,EAAlC;AACH;AACDE,MAAIC,GAAJ,EAA+B;AAC7B,WAAOZ,SAASa,OAAT,CAAiBV,aAAa,KAAKK,IAAlB,EAAwBI,GAAxB,CAAjB,CAAP;AACD;;AAEDE,MAAIF,GAAJ,EAAiBG,GAAjB,EAA0C;AACxC,UAAMN,OAAON,aAAa,KAAKK,IAAlB,CAAb;AACAC,SAAKG,GAAL,IAAYG,GAAZ;AACAX,mBAAe,KAAKI,IAApB,EAA0BC,IAA1B;AACA,WAAOT,SAASa,OAAT,EAAP;AACD;;AAEDG,MAAIJ,GAAJ,EAAmC;AACjC,WAAOZ,SAASa,OAAT,CAAiB,CAAC,CAACV,aAAa,KAAKK,IAAlB,EAAwBI,GAAxB,CAAnB,CAAP;AACD;;AAEDK,SAAO,GAAGC,IAAV,EAAyC;AACvC,UAAMT,OAAON,aAAa,KAAKK,IAAlB,CAAb;AACA,SAAK,MAAMI,GAAX,IAAkBM,IAAlB,EAAwB;AACtB,aAAOT,KAAKG,GAAL,CAAP;AACD;AACDR,mBAAe,KAAKI,IAApB,EAA0BC,IAA1B;AACA,WAAOT,SAASa,OAAT,EAAP;AACD;AACDM,UAAuB;AACrBf,mBAAe,KAAKI,IAApB,EAA0B,EAA1B;AACA,WAAOR,SAASa,OAAT,EAAP;AACD;AAjCsB;;AAoCzB,SAASH,aAAT,CAAuBU,QAAvB,EAAyC;AACvC,QAAMC,SAASpB,MAAMmB,QAAN,CAAf;AACA,MAAIC,OAAOC,GAAP,KAAe,OAAnB,EACE,OAAOpB,yBAAYmB,MAAZ,IAAoBC,KAAK,OAAzB,IAAP;AACF,SAAOF,QAAP;AACD;;AAED,SAASd,eAAeiB,OAAxB;;AAEA,eAAejB,WAAf","file":"index.js","sourcesContent":["//@flow\nimport Bluebird from 'bluebird'\nimport { parse, format } from 'path'\nimport {\n  readJsonSync,\n  outputJsonSync,\n  pathExistsSync,\n} from 'fs-extra'\n\n// import { type AsyncStorage } from 'mtproto-shared'\n\n// import Logger from 'mtproto-logger'\n// const log = Logger`json-storage`\n\ntype Data = { [key: string]: any }\n\nexport class JsonStorage {\n  file: string\n  constructor(file: string, data?: Data) {\n    this.file = normalizePath(file)\n    if (!pathExistsSync(this.file) || !!data)\n      outputJsonSync(this.file, data || {})\n  }\n  get(key: string): Promise<any> {\n    return Bluebird.resolve(readJsonSync(this.file)[key])\n  }\n\n  set(key: string, val: any): Promise<void> {\n    const data = readJsonSync(this.file)\n    data[key] = val\n    outputJsonSync(this.file, data)\n    return Bluebird.resolve()\n  }\n\n  has(key: string): Promise<boolean> {\n    return Bluebird.resolve(!!readJsonSync(this.file)[key])\n  }\n\n  remove(...keys: string[]): Promise<void> {\n    const data = readJsonSync(this.file)\n    for (const key of keys) {\n      delete data[key]\n    }\n    outputJsonSync(this.file, data)\n    return Bluebird.resolve()\n  }\n  clear(): Promise<void> {\n    outputJsonSync(this.file, {})\n    return Bluebird.resolve()\n  }\n}\n\nfunction normalizePath(filepath: string) {\n  const parsed = parse(filepath)\n  if (parsed.ext !== '.json')\n    return format({ ...parsed, ext: '.json' })\n  return filepath\n}\n\nexport { JsonStorage as Storage }\n\nexport default JsonStorage\n"]}