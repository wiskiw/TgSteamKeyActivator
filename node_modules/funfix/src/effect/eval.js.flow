/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import { Try, Either } from "../core/disjunctions"

declare export class Eval<+A> {
  get(): A;
  run(): Try<A>;

  getOrElse<AA>(fallback: AA): A | AA;
  getOrElseL<AA>(thunk: () => AA): A | AA;

  map<B>(f: (a: A) => B): Eval<B>;
  flatMap<B>(f: (a: A) => Eval<B>): Eval<B>;
  chain<B>(f: (a: A) => Eval<B>): Eval<B>;
  transform<R>(failure: (e: any) => R, success: (a: A) => R): Eval<R>;
  transformWith<R>(failure: (e: any) => Eval<R>, success: (a: A) => Eval<R>): Eval<R>;

  recover<AA>(f: (e: any) => AA): Eval<A | AA>;
  recoverWith<AA>(f: (e: any) => Eval<AA>): Eval<A | AA>;
  attempt(): Eval<Either<any, A>>;

  memoize(): Eval<A>;
  memoizeOnSuccess(): Eval<A>;
  forEachL(cb: (a: A) => void): Eval<void>;
  forEach(cb: (a: A) => void): void;

  // Implements HK<F, A>
  +_funKindF: Eval<any>;
  +_funKindA: A;

  // Implements Constructor<T>
  static +_funErasure: Eval<any>;

  static of<A>(thunk: () => A): Eval<A>;
  static pure<A>(value: A): Eval<A>;
  static now<A>(value: A): Eval<A>;
  static unit(): Eval<void>;
  static raise<A>(e: any): Eval<A>;
  static always<A>(thunk: () => A): Eval<A>;
  static once<A>(thunk: () => A): Eval<A>;
  static suspend<A>(thunk: () => Eval<A>): Eval<A>;
  static defer<A>(thunk: () => Eval<A>): Eval<A>;

  static tailRecM<A, B>(a: A, f: (a: A) => Eval<Either<A, B>>): Eval<B>;
}
