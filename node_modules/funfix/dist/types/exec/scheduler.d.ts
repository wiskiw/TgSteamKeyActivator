/**
 * Provides a {@link Scheduler} data type, capable of scheduling units of work
 * for asynchronous execution, as an alternative to Javascript's `setTimeout`,
 * `setInterval` or other globally available commands.
 *
 * Ã€ la carte imports work, assuming an ECMAScript 2015 compatible environment,
 * including ES2015 modules and `import` syntax:
 *
 * ```typescript
 * import { Scheduler } from "funfix/dist/exec/scheduler"
 * // ... or ...
 * import { Scheduler } from "funfix"
 * ```
 *
 * In absence of ES2015 compatibility, you can still rely on working with the
 * packaged (`pkg.main`) universal distribution that works within all browsers
 * and environments.
 *
 * @module exec/scheduler
 */
/***/
import { Duration } from "./time";
import { ICancelable } from "./cancelable";
import { DynamicRef } from "./ref";
/**
 * A `Scheduler` is an execution context that can execute units of
 * work asynchronously, with a delay or periodically.
 *
 * It replaces Javascript's `setTimeout`, which is desirable due to
 * the provided utilities and because special behavior might be needed
 * in certain specialized contexts (e.g. tests), even if the
 * [[Scheduler.global]] reference is implemented with `setTimeout`.
 */
export declare abstract class Scheduler {
    /**
     * Schedules the given `command` for async execution.
     *
     * In [[GlobalScheduler]] this method uses
     * [setImmediate]{@link https://developer.mozilla.org/en/docs/Web/API/Window/setImmediate}
     * when available. But given that `setImmediate` is a very
     * non-standard operation that is currently implemented only by
     * IExplorer and Node.js, on non-supporting environments we fallback
     * on `setTimeout`. See
     * [the W3C proposal]{@link https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html}.
     *
     * @param runnable is the thunk to execute asynchronously
     */
    abstract executeAsync(runnable: () => void): void;
    /**
     * Execute the given `runnable` on the current call stack by means
     * of a "trampoline", preserving stack safety.
     *
     * This is an alternative to {@link executeAsync} for triggering
     * light asynchronous boundaries.
     */
    abstract trampoline(runnable: () => void): void;
    /** Reports that an asynchronous computation failed. */
    abstract reportFailure(e: any): void;
    /**
     * Returns the current time in milliseconds.  Note that while the
     * unit of time of the return value is a millisecond, the
     * granularity of the value depends on the underlying operating
     * system and may be larger.  For example, many operating systems
     * measure time in units of tens of milliseconds.
     *
     * It's the equivalent of `Date.now()`. When wanting to measure
     * time, do not use `Date.now()` directly, prefer this method
     * instead, because then it can be mocked for testing purposes,
     * or overridden for better precision.
     */
    abstract currentTimeMillis(): number;
    /**
     * Schedules a task to run in the future, after `delay`.
     *
     * For example the following schedules a message to be printed to
     * standard output after 5 minutes:
     *
     * ```typescript
     * const task =
     *   scheduler.scheduleOnce(Duration.minutes(5), () => {
     *     console.log("Hello, world!")
     *   })
     *
     * // later if you change your mind ... task.cancel()
     * ```
     *
     * @param delay is the time to wait until the execution happens; if
     *        specified as a `number`, then it's interpreted as milliseconds;
     *        for readability, prefer passing [[Duration]] values
     * @param runnable is the callback to be executed
     *
     * @return a [[Cancelable]] that can be used to cancel the created
     *         task before execution.
     */
    abstract scheduleOnce(delay: number | Duration, runnable: () => void): ICancelable;
    /**
     * Schedules for execution a periodic task that is first executed
     * after the given initial delay and subsequently with the given
     * delay between the termination of one execution and the
     * commencement of the next.
     *
     * For example the following schedules a message to be printed to
     * standard output every 10 seconds with an initial delay of 5
     * seconds:
     *
     * ```typescript
     * const task =
     *   s.scheduleWithFixedDelay(Duration.seconds(5), Duration.seconds(10), () => {
     *     console.log("repeated message")
     *   })
     *
     * // later if you change your mind ...
     * task.cancel()
     * ```
     *
     * @param initialDelay is the time to wait until the first execution happens
     * @param delay is the time to wait between 2 successive executions of the task
     * @param runnable is the thunk to be executed
     * @return a cancelable that can be used to cancel the execution of
     *         this repeated task at any time.
     */
    scheduleWithFixedDelay(initialDelay: number | Duration, delay: number | Duration, runnable: () => void): ICancelable;
    /**
     * Schedules a periodic task that becomes enabled first after the given
     * initial delay, and subsequently with the given period. Executions will
     * commence after `initialDelay` then `initialDelay + period`, then
     * `initialDelay + 2 * period` and so on.
     *
     * If any execution of the task encounters an exception, subsequent executions
     * are suppressed. Otherwise, the task will only terminate via cancellation or
     * termination of the scheduler. If any execution of this task takes longer
     * than its period, then subsequent executions may start late, but will not
     * concurrently execute.
     *
     * For example the following schedules a message to be printed to standard
     * output approximately every 10 seconds with an initial delay of 5 seconds:
     *
     * ```typescript
     * const task =
     *   s.scheduleAtFixedRate(Duration.seconds(5), Duration.seconds(10), () => {
     *     console.log("repeated message")
     *   })
     *
     *   // later if you change your mind ...
     *   task.cancel()
     * ```
     *
     * @param initialDelay is the time to wait until the first execution happens
     * @param period is the time to wait between 2 successive executions of the task
     * @param runnable is the thunk to be executed
     * @return a cancelable that can be used to cancel the execution of
     *         this repeated task at any time.
     */
    scheduleAtFixedRate(initialDelay: number | Duration, period: number | Duration, runnable: () => void): ICancelable;
    /**
     * Exposes a reusable [[GlobalScheduler]] reference by means of a
     * {@link DynamicRef}, which allows for lexically scoped bindings to happen.
     *
     * ```typescript
     * const myScheduler = new GlobalScheduler(false)
     *
     * Scheduler.global.bind(myScheduler, () => {
     *   Scheduler.global.get() // myScheduler
     * })
     *
     * Scheduler.global.get() // default instance
     * ```
     */
    static readonly global: DynamicRef<Scheduler>;
}
/**
 * `GlobalScheduler` is a [[Scheduler]] implementation based on Javascript's
 * [setTimeout]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout}
 * and (if available and configured)
 * [setImmediate]{@link https://developer.mozilla.org/en/docs/Web/API/Window/setImmediate}.
 */
export declare class GlobalScheduler extends Scheduler {
    /**
     * If `true`, then `setImmediate` is used in `execute`.
     */
    private _useSetImmediate;
    /**
     * {@link Trampoline} used for immediate execution in
     * {@link Scheduler.trampoline}.
     */
    private _trampoline;
    /**
     * @param canUseSetImmediate is a boolean informing the
     * `GlobalScheduler` implementation that it can use the nonstandard
     * `setImmediate` for scheduling asynchronous tasks without extra
     * delays.
     */
    constructor(canUseSetImmediate?: boolean);
    executeAsync(runnable: () => void): void;
    trampoline(runnable: () => void): void;
    reportFailure(e: any): void;
    currentTimeMillis(): number;
    scheduleOnce(delay: number | Duration, runnable: () => void): ICancelable;
}
/**
 * The `TestScheduler` is a {@link Scheduler} type meant for testing purposes,
 * being capable of simulating asynchronous execution and the passage of time.
 *
 * Example:
 *
 * ```typescript
 * const s = new TestScheduler()
 *
 * s.execute(() => { console.log("Hello, world!") })
 *
 * // Triggers actual execution
 * s.tick()
 *
 * // Simulating delayed execution
 * const task = s.scheduleOnce(Duration.seconds(10), () => {
 *   console.log("Hello, delayed!")
 * })
 *
 * // We can cancel a delayed task if we want
 * task.cancel()
 *
 * // Or we can execute it by moving the internal clock forward in time
 * s.tick(Duration.seconds(10))
 * ```
 */
export declare class TestScheduler extends Scheduler {
    private _reporter;
    private _clock;
    private _triggeredFailures;
    private _tasks;
    private _tasksSearch;
    private _trampoline;
    constructor(reporter?: (error: any) => void);
    /**
     * Returns a list of triggered errors, if any happened during
     * the {@link tick} execution.
     */
    triggeredFailures(): Array<any>;
    /**
     * Returns `true` if there are any tasks left to execute, `false`
     * otherwise.
     */
    hasTasksLeft(): boolean;
    executeAsync(runnable: () => void): void;
    trampoline(runnable: () => void): void;
    reportFailure(e: any): void;
    currentTimeMillis(): number;
    scheduleOnce(delay: number | Duration, runnable: () => void): ICancelable;
    /**
     * Executes the current batch of tasks that are pending, relative
     * to [currentTimeMillis]{@link TestScheduler.currentTimeMillis}.
     *
     * ```typescript
     * const s = new TestScheduler()
     *
     * // Immediate execution
     * s.execute(() => console.log("A"))
     * s.execute(() => console.log("B"))
     * // Delay with 1 second from now
     * s.scheduleOnce(Duration.seconds(1), () => console.log("C"))
     * s.scheduleOnce(Duration.seconds(1), () => console.log("D"))
     * // Delay with 2 seconds from now
     * s.scheduleOnce(Duration.seconds(2), () => console.log("E"))
     * s.scheduleOnce(Duration.seconds(2), () => console.log("F"))
     *
     * // Actual execution...
     *
     * // Prints A, B
     * s.tick()
     * // Prints C, D
     * s.tick(Duration.seconds(1))
     * // Prints E, F
     * s.tick(Duration.seconds(1))
     * ```
     *
     * @param duration is an optional timespan to user for incrementing
     * [currentTimeMillis]{@link TestScheduler.currentTimeMillis}, thus allowing
     * the execution of tasks scheduled to execute with a delay.
     *
     * @return the number of executed tasks
     */
    tick(duration?: number | Duration): number;
    private _updateTasks(tasks);
}
