/**
 * Exposes standard, reusable error types, that help with some common scenarios,
 * working with error types being preferable to working with strings.
 *
 * Ã€ la carte imports work, assuming an ECMAScript 2015 compatible environment,
 * including ES2015 modules and `import` syntax:
 *
 * ```typescript
 * import { IllegalStateError } from "funfix/dist/core/errors"
 * // ... or ...
 * import { IllegalStateError } from "funfix"
 * ```
 *
 * In absence of ES2015 compatibility, you can still rely on working with the
 * packaged (`pkg.main`) universal distribution that works within all browsers
 * and environments.
 *
 * @module core/errors
 */
/***/
/**
 * A composite error represents a list of errors that were caught
 * while executing logic which delays re-throwing of errors.
 */
export declare class CompositeError extends Error {
    private errorsRef;
    constructor(errors: Array<any>);
    /**
     * Returns the full list of caught errors.
     */
    errors(): Array<any>;
}
/**
 * A dummy error that can be used for testing purposes.
 */
export declare class DummyError extends Error {
    constructor(message?: string);
}
/**
 * Thrown by various accessor methods or partial functions to indicate
 * that the element being requested does not exist.
 */
export declare class NoSuchElementError extends Error {
    constructor(message?: string);
}
/**
 * Error throw in class constructors by implementations that
 * are sealed or final.
 */
export declare class IllegalInheritanceError extends Error {
    constructor(message?: string);
}
/**
 * Signals that a function has been invoked at an illegal
 * or inappropriate time.
 *
 * In other words, environment or application is not in an
 * appropriate state for the requested operation.
 */
export declare class IllegalStateError extends Error {
    constructor(message?: string);
}
/**
 * Signals that a function has been invoked with illegal
 * arguments.
 */
export declare class IllegalArgumentError extends Error {
    constructor(message?: string);
}
/**
 * Signals that a function or a method is missing an implementation,
 * which should be provided in the future.
 */
export declare class NotImplementedError extends Error {
    constructor(message?: string);
}
/**
 * Signals that completion of a procedure took longer than anticipated.
 */
export declare class TimeoutError extends Error {
    constructor(message?: string);
}
