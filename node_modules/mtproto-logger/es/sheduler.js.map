{"version":3,"sources":["../src/sheduler.js"],"names":["Emitter","fromEvent","Debug","emitter","eventsHandler","queue","result","ln","length","i","qInstance","qLn","j","push","logStream","map","LogEvent","constructor","log","values","print","stringLimiting","str","slice","normalizeVaules","list","isSingleObject","results","Sheduler","sheduleInterval","printInterval","buffer","add","time","tagStr","unshift","firstLine","join","sheduleBuffer","emit","logEvent","setInterval","sheduler"],"mappings":"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","file":"sheduler.js","sourcesContent":["//@flow\n\nimport Emitter from 'eventemitter2'\nimport { fromEvent } from 'most'\nimport { type Stream } from 'most'\n\nimport Debug from './debug'\n\nconst emitter = new Emitter()\n\n\nconst eventsHandler = (queue: LogEvent[][]): LogEvent[] => {\n  const result = []\n  const ln = queue.length\n  for (let i = 0; i < ln; i++) {\n    const qInstance = queue[i]\n    const qLn = qInstance.length\n    for (let j = 0; j < qLn; j++)\n      result.push(qInstance[j])\n  }\n  return result\n}\n\nexport const logStream: Stream<LogEvent[]> = fromEvent('log', emitter).map(eventsHandler)\nclass LogEvent {\n  log: Debug.IDebugger\n  values: mixed[]\n  constructor(log: Debug.IDebugger, values: mixed[]) {\n    this.log = log\n    this.values = values\n  }\n  print() {\n    this.log(...this.values)\n  }\n}\n\nconst stringLimiting =\n  (str: *) =>\n    typeof str === 'string' && str > 50\n      ? str.slice(0, 150)\n      : str\n\nconst normalizeVaules = (list: any[]) => {\n  if (list.length === 0) return [' ']\n  return list.map(stringLimiting)\n}\n\n\nconst isSingleObject = (results: any[]) =>\n  results.length === 1 &&\n  typeof results[0] === 'object'\n\n\nexport class Sheduler {\n  queue: LogEvent[][] = []\n  buffer: LogEvent[] = []\n\n  add = (log: Debug.IDebugger,\n    time: string,\n    tagStr: string,\n    values: any[]) => {\n    const results = normalizeVaules(values)\n    if (isSingleObject(results))\n      results.unshift('%O')\n    const firstLine = [tagStr, time].join('  ')\n\n    this.buffer.push(new LogEvent(log, [firstLine]))\n    this.buffer.push(new LogEvent(log, results))\n\n  }\n\n  sheduleBuffer = () => {\n    this.queue.push(this.buffer)\n    this.buffer = []\n  }\n\n  print = () => {\n    emitter.emit('log', this.queue)\n    for (const buffer of this.queue)\n      for (const logEvent of buffer)\n        logEvent.print()\n    this.queue = []\n  }\n\n  constructor(sheduleInterval: number = 50,\n              printInterval: number = 200) {\n    setInterval(this.sheduleBuffer, sheduleInterval)\n    setInterval(this.print, printInterval)\n  }\n}\n\nconst sheduler = new Sheduler\n\nexport default sheduler\n"]}