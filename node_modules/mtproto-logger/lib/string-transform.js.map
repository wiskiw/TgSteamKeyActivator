{"version":3,"sources":["../src/string-transform.js"],"names":["brackets","open","gray","close","createGroupHeader","str","text","trim","toUpperCase","colorfull","bold","magenta","result","noOpNormalizeTag","trimmed","indexOf","Array","length","fill","join","blue","enclosed","mapToString","toString","flatSplit","acc","val","push","split","normalizeTags","list","flatList","map","reduce","trimReject","makeModuleName","makeTime","time","italic","makeTags","makeGroupHeader"],"mappings":";;;;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA,MAAMA,WAAW;AACfC,QAAO,gBAAMC,IAAN,CAAW,GAAX,CADQ;AAEfC,SAAO,gBAAMD,IAAN,CAAW,GAAX;AAFQ,CAAjB;;AAKA,MAAME,oBAAqBC,GAAD,IAAiB;AACzC,QAAMC,OAAOD,IAAIE,IAAJ,GAAWC,WAAX,EAAb;AACA,QAAMC,YAAY,gBAAMC,IAAN,CAAW,gBAAMC,OAAN,CAAcL,IAAd,CAAX,CAAlB;AACA,QAAMM,SAAU,YAAWH,SAAU,WAArC;AACA,SAAOG,MAAP;AACD,CALD;;AAQA,MAAMC,mBAAoBR,GAAD,IAAiB;AACxC,QAAMS,UAAUT,IAAIE,IAAJ,EAAhB;AACA,MAAIO,YAAY,EAAhB,EAAoB,OAAO,EAAP;AACpB,MAAIA,QAAQC,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EACE,OAAOC,MAAMF,QAAQG,MAAR,GAAe,CAArB,EACJC,IADI,CACC,GADD,EAEJC,IAFI,CAEC,EAFD,CAAP;AAGF,QAAMV,YAAY,gBAAMC,IAAN,CAAW,gBAAMU,IAAN,CAAWN,OAAX,CAAX,CAAlB;AACA,QAAMO,WAAY,GAAErB,SAASC,IAAK,GAAEQ,SAAU,GAAET,SAASG,KAAM,EAA/D;AACA,SAAOkB,QAAP;AACD,CAVD;;AAYA,MAAMC,cACHjB,GAAD,IACE,OAAOA,GAAP,KAAe,QAAf,GACIA,GADJ,GAEIA,IAAIkB,QAAJ,EAJR;;AAMA,MAAMC,YACJ,CAACC,GAAD,EAAgBC,GAAhB,KAAgC;AAC9BD,MAAIE,IAAJ,CAAS,GAAGD,IAAIE,KAAJ,CAAU,GAAV,CAAZ;AACA,SAAOH,GAAP;AACD,CAJH;;AAMA,MAAMI,gBAAiBC,IAAD,IAAa;AACjC,QAAMC,WAAqB,4BAAQD,IAAR,CAA3B;AACA,QAAMlB,SACJmB,SACGC,GADH,CACOV,WADP,EAEGW,MAFH,CAEUT,SAFV,EAEqB,EAFrB,EAGGQ,GAHH,CAGOnB,gBAHP,EAIGM,IAJH,CAIQ,EAJR,CADF,CAFiC,CAOlB;AACf,SAAOP,MAAP;AACD,CATD;;AAWA,MAAMsB,aACJ,CAACT,GAAD,EAAgBC,GAAhB,KAAgC;AAC9B,QAAMd,SAASc,IAAInB,IAAJ,EAAf;AACA,MAAIK,WAAW,EAAf,EACEa,IAAIE,IAAJ,CAASf,MAAT;AACF,SAAOa,GAAP;AACD,CANH;;AAQO,MAAMU,0CAAkBL,IAAD,IAAa;AACzC,QAAMC,WAAqB,4BAAQD,IAAR,CAA3B;AACA,QAAMlB,SACJmB,SACGC,GADH,CACOV,WADP,EAEGW,MAFH,CAEUT,SAFV,EAEqB,EAFrB,EAGGS,MAHH,CAGUC,UAHV,EAGsB,EAHtB,CADF,CAFyC,CAMZ;AAC7B,SAAOtB,MAAP;AACD,CARM;;AAUA,MAAMwB,8BAAYC,IAAD,IAAkB,gBAAMnC,IAAN,CAAW,gBAAMoC,MAAN,CAAaD,IAAb,CAAX,CAAnC;;AAGA,MAAME,8BAAW,4BAAQV,aAAR,CAAjB;;AAEA,MAAMW,4CAAkB,4BAAQpC,iBAAR,CAAxB","file":"string-transform.js","sourcesContent":["//@flow\n\nimport chalk from 'chalk'\n\nimport flatten from 'array-flatten'\n\nimport { memoize } from 'mtproto-shared'\n\nconst brackets = {\n  open : chalk.gray('['),\n  close: chalk.gray(']')\n}\n\nconst createGroupHeader = (str: string) => {\n  const text = str.trim().toUpperCase()\n  const colorfull = chalk.bold(chalk.magenta(text))\n  const result = `--- ---  ${colorfull}  --- ---`\n  return result\n}\n\n\nconst noOpNormalizeTag = (str: string) => {\n  const trimmed = str.trim()\n  if (trimmed === '') return ''\n  if (trimmed.indexOf('|') !== -1)\n    return Array(trimmed.length+2)\n      .fill(' ')\n      .join('')\n  const colorfull = chalk.bold(chalk.blue(trimmed))\n  const enclosed = `${brackets.open}${colorfull}${brackets.close}`\n  return enclosed\n}\n\nconst mapToString =\n  (str: *): string =>\n    typeof str === 'string'\n      ? str\n      : str.toString()\n\nconst flatSplit =\n  (acc: string[], val: string) => {\n    acc.push(...val.split(','))\n    return acc\n  }\n\nconst normalizeTags = (list: *) => {\n  const flatList: string[] = flatten(list)\n  const result =\n    flatList\n      .map(mapToString)\n      .reduce(flatSplit, [])\n      .map(noOpNormalizeTag)\n      .join(''); //eslint-disable-line\n  return result\n}\n\nconst trimReject =\n  (acc: string[], val: string) => {\n    const result = val.trim()\n    if (result !== '')\n      acc.push(result)\n    return acc\n  }\n\nexport const makeModuleName = (list: *) => {\n  const flatList: string[] = flatten(list)\n  const result =\n    flatList\n      .map(mapToString)\n      .reduce(flatSplit, [])\n      .reduce(trimReject, []); //eslint-disable-line\n  return result\n}\n\nexport const makeTime = (time: string) => chalk.gray(chalk.italic(time))\n\n\nexport const makeTags = memoize(normalizeTags)\n\nexport const makeGroupHeader = memoize(createGroupHeader)\n\n"]}