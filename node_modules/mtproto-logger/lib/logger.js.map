{"version":3,"sources":["../src/logger.js"],"names":["Logger","moduleName","rest","fullModule","unshift","fullname","join","padding","Array","length","fill","debug","logFunction","tag","objects","time","add","logGroup","name","Math","min","max","padString","pack","logger","groupPrinter","tags","tagStr","push","groupEnd","forEach","fn","loggerFn","group","enabled"],"mappings":";;;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AAEA,MAAMA,SAAS,CAACC,UAAD,EAAqC,GAAGC,IAAxC,KAAgE;AAC7E,QAAMC,aAAa,qCAAe,CAACF,UAAD,EAAaC,IAAb,CAAf,CAAnB;AACAC,aAAWC,OAAX,CAAmB,kBAAnB;AACA,QAAMC,WAAWF,WAAWG,IAAX,CAAgB,GAAhB,CAAjB;AACA,QAAMC,UACJC,MAAMH,SAASI,MAAT,GAAkB,EAAlB,GAAuB,CAA7B,EACCC,IADD,CACM,GADN,EAECJ,IAFD,CAEM,EAFN,CADF;AAIA,QAAMK,QAAQ,qBAAMN,QAAN,CAAd;AACA,QAAMO,cAAc,CAACC,GAAD,EAAcC,OAAd,KAAiC;AACnD,UAAMC,OAAO,+BAAS,+BAAT,CAAb;AACA,kCAAU,mBAASC,GAAnB,EAAwBL,KAAxB,EAA+BI,IAA/B,EAAqCF,GAArC,EAA0CC,OAA1C,EAAmDP,OAAnD;AACD,GAHD;;AAMA,QAAMU,WAAW,UAASC,IAAT,EAAoC;AACnD,UAAMX,UAAUY,KAAKC,GAAL,CAASD,KAAKE,GAAL,CAASH,KAAKT,MAAL,GAAc,CAAvB,EAA0B,CAA1B,CAAT,EAAuC,CAAvC,CAAhB;AACA,UAAMa,YAAa,IAAGd,MAAMD,UAAQ,CAAd,EACnBG,IADmB,CACd,GADc,EAEnBJ,IAFmB,CAEd,EAFc,CAEV,GAFZ;AAGA,UAAMiB,OAAO,CACX,MAAMC,OAAQ,QAAR,EAAiB,sCAAgBN,IAAhB,CAAjB,CADK,EAEX,MAAMM,OAAOF,SAAP,EAAkB,EAAlB,CAFK,CAAb;AAIA,aAASG,YAAT,CAAsB,GAAGC,IAAzB,EAA6C;AAC3C,YAAMC,SAAS,+BAAS,CAACL,SAAD,EAAYI,IAAZ,CAAT,CAAf;AACA,aAAO,CAAC,GAAGZ,OAAJ,KAAgB;AACrBS,aAAKK,IAAL,CAAU,MAAMhB,YAAYe,MAAZ,EAAoBb,OAApB,CAAhB;AACD,OAFD;AAGD;AACDW,iBAAaI,QAAb,GAAwB,YAAW;AACjCN,WAAKK,IAAL,CAAU,MAAMJ,OAAQ,QAAR,EAAiB,mBAAjB,CAAhB;AACAD,WAAKO,OAAL,CAAaC,MAAMA,IAAnB;AACD,KAHD;AAIA,WAAON,YAAP;AACD,GApBD;AAqBA,WAASO,QAAT,CAAkB,GAAGN,IAArB,EAA2B;AACzB,UAAMC,SAAS,+BAASD,IAAT,CAAf;AACA,WAAO,CAAC,GAAGZ,OAAJ,KAAgBF,YAAYe,MAAZ,EAAoBb,OAApB,CAAvB;AACD;AACDkB,WAASC,KAAT,GAAiBhB,QAAjB;;AAEA,QAAMO,SAAyBQ,QAA/B;;AAEA,SAAOrB,MAAMuB,OAAN,GACHV,MADG,qBAAP;AAGD,CA/CD;;kBAiDexB,M","file":"logger.js","sourcesContent":["//@flow\n\nimport sheduler from './sheduler'\nimport { makeGroupHeader, makeModuleName, makeTags, makeTime } from './string-transform'\nimport Debug from './debug'\nimport disabledLogger from './disabled'\nimport { dTimePure, immediate } from 'mtproto-shared'\n\nimport { type VariString, type LoggerInstance, type GroupLogger } from './index.h'\n\nconst Logger = (moduleName: Array<string> | string, ...rest: Array<string>) => {\n  const fullModule = makeModuleName([moduleName, rest])\n  fullModule.unshift('telegram-mtproto')\n  const fullname = fullModule.join(':')\n  const padding =\n    Array(fullname.length - 17 + 1)\n    .fill(' ')\n    .join('')\n  const debug = Debug(fullname)\n  const logFunction = (tag: string, objects: any[]) => {\n    const time = makeTime(dTimePure())\n    immediate(sheduler.add, debug, time, tag, objects, padding)\n  }\n\n\n  const logGroup = function(name: string): GroupLogger {\n    const padding = Math.min(Math.max(name.length + 1, 3), 8)\n    const padString = `*${Array(padding-2)\n      .fill(' ')\n      .join('')}*`\n    const pack = [\n      () => logger(`#GROUP`)(makeGroupHeader(name)),\n      () => logger(padString)('')\n    ]\n    function groupPrinter(...tags: VariString[]) {\n      const tagStr = makeTags([padString, tags])\n      return (...objects) => {\n        pack.push(() => logFunction(tagStr, objects))\n      }\n    }\n    groupPrinter.groupEnd = function() {\n      pack.push(() => logger(`~GROUP`)('-   -   -   -  \\n'))\n      pack.forEach(fn => fn())\n    }\n    return groupPrinter\n  }\n  function loggerFn(...tags) {\n    const tagStr = makeTags(tags)\n    return (...objects) => logFunction(tagStr, objects)\n  }\n  loggerFn.group = logGroup\n\n  const logger: LoggerInstance = loggerFn\n\n  return debug.enabled\n    ? logger\n    : disabledLogger\n}\n\nexport default Logger\n"]}