{"version":3,"sources":["../src/index.js"],"names":["log","FileStorage","constructor","filepath","data","allowRead","readInterval","timeoutID","Infinity","allowReadNow","reReadProtect","clearTimeout","setTimeout","substr","init","ensureSync","watcher","useFsEvents","disableGlobbing","persistent","atomic","on","stats","result","save","spaces","get","key","resolve","set","val","remove","keys","clear","fileData","err","Storage"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\nimport {\n  readJson,\n  outputJson,\n  ensureFileSync,\n  readJsonSync,\n  outputJsonSync\n} from 'fs-extra'\nimport { watch } from 'chokidar'\n\nimport type { AsyncStorage } from 'mtproto-shared'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`reactive-storage`\n\nexport class FileStorage implements AsyncStorage {\n  filepath: string\n  data: { [key: string]: * }\n  allowRead: boolean = true\n  readInterval: number = 2e3\n  timeoutID: number = -Infinity\n\n  constructor(filepath: string, data?: { [key: string]: * }) {\n    this.filepath = filepath.substr(-5) === '.json'\n      ? filepath\n      : `${filepath}.json`\n    if (data != null)\n      this.data = data\n\n    // process.on('beforeExit', () => {\n    //   watcher.close()\n    // })\n    this.init()\n  }\n  init() { //TODO make async\n    const data = ensureSync(this.filepath)\n    if (!this.data)\n      this.data = data\n    const watcher = watch(this.filepath, {\n      useFsEvents    : false,\n      disableGlobbing: true,\n      persistent     : false,\n      atomic         : true,\n    })\n    watcher.on('change', async (stats: any) => {\n      log('change')(stats)\n      log('allowRead')(this.allowRead)\n      if (this.allowRead) {\n        const result = await readJson(this.filepath)\n        this.data = result\n      }\n    })\n  }\n  allowReadNow = () => {\n    this.allowRead = true\n  }\n  reReadProtect = () => {\n    this.allowRead = false\n    clearTimeout(this.timeoutID)\n    this.timeoutID = setTimeout(this.allowReadNow, this.readInterval)\n  }\n\n  async save() {\n    this.reReadProtect()\n    await outputJson(this.filepath, this.data, { spaces: 2 })\n    this.reReadProtect()\n  }\n\n  get(key: string) {\n    const data = this.data[key]\n    log('get', `key ${key}`)(data)\n    return Bluebird.resolve(data)\n  }\n\n  async set(key: string, val: any): Promise<void> {\n    this.data[key] = val\n    log('set', `key ${key}`)(val)\n    await this.save()\n  }\n\n  async remove(...keys: string[]): Promise<void> {\n    const data = this.data\n    for (const key of keys)\n      delete data[key]\n    log('remove')(keys)\n    await this.save()\n  }\n\n  async clear() {\n    this.data = {}\n    log('clear')('ok')\n    await this.save()\n  }\n}\n\nfunction ensureSync(filepath: string) {\n  ensureFileSync(filepath)\n  let fileData = null\n  try {\n    fileData = readJsonSync(filepath)\n  } catch (err) {\n    log(`init`, `error`)(err)\n  }\n  if (fileData === null) {\n    outputJsonSync(filepath, {})\n    fileData = {}\n  }\n  return fileData\n}\n\nexport { FileStorage as Storage }\n\nexport default FileStorage\n"]}