{"version":3,"sources":["../src/error.js"],"names":["stackCleaner","Error","stackTraceLimit","MTError","getMessage","code","type","message","constructor","fullMessage","stack","ErrorBadResponse","url","originalError","ErrorBadRequest","ErrorNotFound","err","config","DcUrlError","dcID","dc","toString","RpcError","RpcApiError","of","data","error_code","error_message","toValue","toJSON","TypeBufferIntError","getTypeBufferMessage","ctx","offset","length","intView","typeBuffer","AuthKeyError","ProviderRegistryError","uid"],"mappings":"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","file":"error.js","sourcesContent":["//@flow\n\nimport type { $AxiosXHR } from 'axios'\n\nimport stackCleaner from './util/clean-stack'\nimport type { TypeBuffer } from './tl/type-buffer'\n\nError.stackTraceLimit = 25\n\nexport class MTError extends Error {\n  static getMessage(code: number, type: string, message: string) {\n    return `MT[${code}] ${type}: ${message}`\n  }\n  code: number\n  type: string\n  constructor(code: number, type: string, message: string) {\n    const fullMessage = MTError.getMessage(code, type, message)\n    super(fullMessage)\n    this.code = code\n    this.type = type\n    this.stack = stackCleaner(this.stack)\n  }\n}\n\nexport class ErrorBadResponse extends MTError {\n  originalError: Error | $AxiosXHR<any>\n  constructor(url: string, originalError?: Error | null | $AxiosXHR<any> = null) {\n    super(406, 'NETWORK_BAD_RESPONSE', url)\n    if (originalError)\n      this.originalError = originalError\n  }\n}\n\nexport class ErrorBadRequest extends MTError {\n  originalError: Error\n  constructor(url: string, originalError?: Error | null = null) {\n    super(406, 'NETWORK_BAD_REQUEST', url)\n    if (originalError)\n      this.originalError = originalError\n  }\n}\n\nexport class ErrorNotFound extends MTError {\n  constructor(err: { config: { url: string } }) {\n    super(404, 'REQUEST_FAILED', err.config.url)\n      // this.originalError = err\n  }\n}\n\nexport class DcUrlError extends MTError {\n  constructor(dcID: number, dc: string | boolean) {\n    super(860, 'WRONG_DC_URL', `Wrong url! dcID ${dcID}, url ${dc.toString()}`)\n      // this.originalError = err\n  }\n}\n\nexport type RpcErrorType = {\n  error_message?: string,\n  error_code?: number,\n}\n\nexport class RpcError extends MTError {\n  originalError: *\n  constructor(code: number, type: string, message: string, originalError: *) {\n    super(code, type, message)\n    this.originalError = originalError\n  }\n}\n\nexport class RpcApiError extends MTError {\n  constructor(code: number, message: string) {\n    super(code, 'RpcApiError', '')\n    this.message = message\n  }\n  static of(data: {\n    _: 'rpc_error',\n    error_code: number,\n    error_message: string,\n  }): RpcApiError {\n    return new RpcApiError(data.error_code, data.error_message)\n  }\n  toValue() {\n    return {\n      type   : 'RpcApiError',\n      code   : this.code,\n      message: this.message\n    }\n  }\n  toJSON() {\n    return this.toValue()\n  }\n}\n\nexport class TypeBufferIntError extends MTError {\n  static getTypeBufferMessage(ctx: TypeBuffer) {\n    const offset = ctx.offset\n    const length = ctx.intView.length * 4\n    return `Can not get next int: offset ${offset} length: ${length}`\n  }\n  typeBuffer: TypeBuffer\n  constructor(ctx: TypeBuffer) {\n    const message = TypeBufferIntError.getTypeBufferMessage(ctx)\n    super(800, 'NO_NEXT_INT', message)\n    this.typeBuffer = ctx\n  }\n}\n\nexport class AuthKeyError extends MTError {\n  constructor() {\n    super(401, 'AUTH_KEY_EMPTY', '')\n  }\n}\n\nexport class ProviderRegistryError extends MTError {\n  constructor(uid: string) {\n    super(850, 'NO_INSTANCE', `Lib instance ${uid} not found in registry`)\n  }\n}\n"]}