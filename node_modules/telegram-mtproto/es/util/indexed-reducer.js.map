{"version":3,"sources":["../../src/util/indexed-reducer.js"],"names":["combineReducers","List","indexedReducer","metaIndexGetter","metaChecker","handlers","singleReducer","wrapHandler","action","val","reducer","state","empty","meta","index","subState","has","set","newState","update","indexed","metaName","_","id"],"mappings":"AAEA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,OAAOC,IAAP,MAAiB,kBAAjB;;AAEA,OAAO,SAASC,cAAT,CACLC,eADK,EAELC,WAFK,EAGL;AACA,SAAO,UAASC,QAAT,EAA0B;AAC/B,QAAMC,gBAAgB,OAAOD,QAAP,KAAoB,UAApB,GAClBA,QADkB,GAElBL,gBAAgBK,QAAhB,CAFJ;AAGA,QAAME,cAAcC,UAAUC,OAAOH,cAAcG,GAAd,EAAmBD,MAAnB,CAArC;AACA,WAAO,SAASE,OAAT,CAAiBC,QAAuBV,KAAKW,KAAL,EAAxC,EAAsDJ,MAAtD,EAIJ;AACD,UAAMK,OAAOL,OAAOK,IAApB;AACA,UAAI,CAACT,YAAYS,IAAZ,CAAL,EACE,OAAOF,KAAP;AACF,UAAMG,QAAQX,gBAAgBU,IAAhB,CAAd;AACA,UAAME,WAA0BJ,MAAMK,GAAN,CAAUF,KAAV,IAC5BH,KAD4B,GAE5BA,MAAMM,GAAN,CAAUH,KAAV,EAAiB,EAAjB,CAFJ;AAGA,UAAMI,WAA0BH,SAASI,MAAT,CAAgBL,KAAhB,EAAuBP,YAAYC,MAAZ,CAAvB,CAAhC;AACA,aAAOU,QAAP;AACD,KAdD;AAeD,GApBD;AAqBD;;AAED,OAAO,SAASE,OAAT,CAAoDC,QAApD,EAAoE;AACzE,WAASjB,WAAT,CAAqBS,IAArB,EAAmD;AACjD,WAAO,OAAOA,IAAP,KAAgB,QAAhB,IACFA,QAAQ,IADN,IAEFA,KAAKS,CAAL,KAAWD,QAFhB;AAGD;AACD,WAASlB,eAAT,CAAyBU,IAAzB,EAAwD;AACtD,WAAOA,KAAKU,EAAZ;AACD;AACD,SAAOrB,eAAeC,eAAf,EAAgCC,WAAhC,CAAP;AACD","file":"indexed-reducer.js","sourcesContent":["//@flow\n\nimport { combineReducers } from 'redux'\n\nimport List from './immutable-list'\n\nexport function indexedReducer<Meta, Id: number | string>(\n  metaIndexGetter: (meta: Meta) => Id,\n  metaChecker: (meta: mixed) => boolean\n) {\n  return function(handlers: mixed) {\n    const singleReducer = typeof handlers === 'function'\n      ? handlers\n      : combineReducers(handlers)\n    const wrapHandler = action => val => singleReducer(val, action)\n    return function reducer(state: List<any, Id> = List.empty(), action: {\n      type: string,\n      payload: mixed,\n      meta: Meta\n    }) {\n      const meta = action.meta\n      if (!metaChecker(meta))\n        return state\n      const index = metaIndexGetter(meta)\n      const subState: List<any, Id> = state.has(index)\n        ? state\n        : state.set(index, {})\n      const newState: List<any, Id> = subState.update(index, wrapHandler(action))\n      return newState\n    }\n  }\n}\n\nexport function indexed<Id: number | string, Name: string>(metaName: Name) {\n  function metaChecker(meta: mixed): boolean %checks {\n    return typeof meta === 'object'\n      && meta != null\n      && meta._ === metaName\n  }\n  function metaIndexGetter(meta: { _: Name, id: Id }): Id {\n    return meta.id\n  }\n  return indexedReducer(metaIndexGetter, metaChecker)\n}\n\n\n"]}