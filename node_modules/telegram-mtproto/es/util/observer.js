import Bluebird from 'bluebird';
import { Stream, of } from 'most';

import Logger from 'mtproto-logger';
import '../property';
var log = Logger`observer`;

//$FlowIssue
function Observer({ next, error, complete }) {
  //$FlowIssue
  return stream => Bluebird.try(() => {
    var streamNext = stream.map(val => Bluebird
    //$FlowIssue
    .try(() => next(val)).tap(data => {
      if (isStream(data) === false) stream.complete(data);
    })).awaitPromises();
    return streamNext.chain(val => isStream(val) ? val : of(val)).recoverWith(error)
    // .tap(log`after recover`)
    .observe(x => x);
  }).then(complete);
}

function isStream(val) {
  return val instanceof Stream;
}

export default Observer;
//# sourceMappingURL=observer.js.map