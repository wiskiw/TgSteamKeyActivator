import { createWriteStream } from 'fs';
import { dTime } from 'mtproto-shared';

import { toPairs, forEach, any, is, __, type } from 'ramda';

var DEL = Symbol('delete');

export function traverse(func) {
  return function visitor(obj) {
    if (Array.isArray(obj)) {
      var result = [];
      for (var _iterator = obj.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var [index, value] = _ref;

        var [edited, newIndex] = func(value, index);
        if (edited === DEL) continue;
        var visited = visitor(edited, newIndex);
        result.push(visited);
      }
      return result;
    } else if (typeof obj === 'object') {
      var _result = {};
      var iterator = forEach(([index, value]) => {
        var [edited, newIndex] = func(value, index);
        if (edited === DEL) return;
        var visited = visitor(edited, newIndex);
        _result[newIndex] = visited;
      });

      iterator(toPairs(obj));
      return _result;
    }
    return obj;
  };
}

var arraysNormalize = (obj, key) => {
  var result = obj;
  if (any(is(__, obj), [Uint8Array, Buffer, ArrayBuffer, Int32Array, Uint32Array])) result = { data: Array.from(obj), type: type(obj) };
  return [result, key];
};

var beforeStringify = traverse(arraysNormalize);
var stringify = data => JSON.stringify(beforeStringify(data));

var getId = () => Math.trunc(Math.random() * 1e6);
var fileName = `logs/file-log-${getId()}.log`;

var writeStream = createWriteStream(fileName);

var writer = functionName => ({
  input(data) {
    var id = getId();
    writeStream.write(`${dTime()} ${functionName} ${id} input\n${stringify(data)}\n`);
    return id;
  },
  output: (id, data) => writeStream.write(`${dTime()} ${functionName} ${id} output\n${stringify(data)}\n`)
});

export default writer;
//# sourceMappingURL=file-log.js.map