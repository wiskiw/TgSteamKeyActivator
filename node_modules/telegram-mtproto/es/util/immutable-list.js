import { dissoc, without, equals } from 'ramda';

//$FlowIssue


export default class List {
  constructor(ids, props) {
    this.length = ids.length;
    this.ids = ids;
    var idType = void 0;
    if (ids.length === 0) idType = 'string';else idType = typeof ids[0];
    //$FlowIssue
    Object.defineProperty(this, 'idType', {
      value: idType,
      enumerable: false
    });
    Object.defineProperty(this, 'props', {
      value: props,
      enumerable: false
    });
    Object.defineProperties(this, props);
  }
  //$FlowIssue
  *[Symbol.iterator]() {
    for (var _iterator = this.ids, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var _id = _ref;

      yield [_id, this[_id]];
    }
  }
  has(id) {
    return this.ids.indexOf(id) !== -1;
  }
  get(id) {
    //$FlowIssue
    return this[id];
  }
  set(id, value) {
    var already = this.has(id);
    var ids = void 0;
    if (already) {
      var current = this.get(id);
      if (value === current || equals(current, value)) return this;
      ids = this.ids;
    } else ids = [...this.ids, id];
    var props = Object.assign({}, this.props, { [id]: makeProperty(value) });
    return new List(ids, props);
  }
  delete(id) {
    if (this.has(id) === false) return this;
    var ids = without([id], this.ids);
    var props = dissoc(id, this.props);
    return new List(ids, props);
  }
  update(id, fn) {
    var val = this.get(id);
    var updated = fn(val);
    var result = this.set(id, updated);
    return result;
  }
  map(fn) {
    var ids = this.ids;
    var props = {};
    for (var _iterator2 = ids, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _id2 = _ref2;

      var _val = this.get(_id2);
      var mapped = fn(_val);
      props[_id2] = makeProperty(mapped);
    }
    return new List(ids, props);
  }
  reduce(fn, base) {
    //$FlowIssue
    var result = this.ids.reduce((acc, val) => fn(acc, this[val]), base);
    return result;
  }
  static empty() {
    return new List([], {});
  }
  static of(list, mapper) {
    var mapping = typeof mapper === 'function' ? mapper : (_, i) => i;
    var ids = list.map(mapping);
    var props = {};
    var i = 0;
    for (var _iterator3 = ids, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var key = _ref3;

      var _val2 = list[i++];
      props[key] = makeProperty(_val2);
    }
    return new List(ids, props);
  }
  toValue() {
    switch (this.idType) {
      case 'number':
        return toValueArr(this.ids, this);
      case 'string':
        return this;
      default:
        return this;
    }
  }
  toJSON() {
    return this.toValue();
  }
}

var makeProperty = val => ({
  value: val,
  enumerable: true,
  configurable: false,
  writable: false
});

//$FlowIssue
function toValueArr(ids, values) {
  var result = new Array(ids.length);
  for (var _iterator4 = ids, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
    var _ref4;

    if (_isArray4) {
      if (_i4 >= _iterator4.length) break;
      _ref4 = _iterator4[_i4++];
    } else {
      _i4 = _iterator4.next();
      if (_i4.done) break;
      _ref4 = _i4.value;
    }

    var _id3 = _ref4;

    result[_id3] = values[_id3];
  }return result;
}
//# sourceMappingURL=immutable-list.js.map