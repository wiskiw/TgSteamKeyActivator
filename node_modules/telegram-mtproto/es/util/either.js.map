{"version":3,"sources":["../../src/util/either.js"],"names":["Result","Either","constructor","inner","Object","defineProperty","value","enumerable","chiral","matchWith","Right","Left","map","fn","mapError","merge","chain","chained","res","getOrElse","defaults","orElse","matcher","Ok","Error","cata","of","obj","fromNullable","withPred","pred","val"],"mappings":"AAEA,OAAO,KAAKA,MAAZ,MAAwB,iBAAxB;AACA,OAA6B,iBAA7B;;AAOA,OAAO,MAAMC,MAAN,CAA0B;AAI/BC,cAAYC,KAAZ,EAAyC;AACvCC,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACnCC,aAAYH,KADuB;AAEnCI,kBAAY;AAFuB,KAArC;AAIA,SAAKC,MAAL,GAAc,KAAKC,SAAL,CAAe;AAC3BC,aAAO,MAAM,OADc;AAE3BC,YAAO,MAAM;AAFc,KAAf,CAAd;AAIA,SAAKL,KAAL,GAAaH,MAAMG,KAAnB;AACD;AACDM,MAAYC,EAAZ,EAA8D;AAC5D,WAAO,IAAIZ,MAAJ,CAAW,KAAKE,KAAL,CAAWS,GAAX,CAAeC,EAAf,CAAX,CAAP;AACD;AACDC,WAAgBD,EAAhB,EAAgE;AAC9D,WAAO,IAAIZ,MAAJ,CAAW,KAAKE,KAAL,CAAWW,QAAX,CAAoBD,EAApB,CAAX,CAAP;AACD;AACDE,UAAsB;AACpB,WAAO,KAAKZ,KAAL,CAAWY,KAAX,EAAP;AACD;AACDC,QAAqBH,EAArB,EAA8F;AAC5F;AACA,QAAMI,UAAwC,KAAKR,SAAL,CAAe;AAC3DC,aAAQQ,GAAD,IAA2BL,GAAGK,IAAIZ,KAAP,CADyB;AAE3DK,YAAO,MAAM;AAF8C,KAAf,CAA9C;AAIA,WAAOM,OAAP;AACD;AACDE,YAAUC,QAAV,EAAkC;AAChC,WAAO,KAAKjB,KAAL,CAAWgB,SAAX,CAAqBC,QAArB,CAAP;AACD;AACDC,SAAsBR,EAAtB,EAA+F;AAC7F;AACA,QAAMI,UAAyC,KAAKR,SAAL,CAAe;AAC5DC,aAAO,MAAM,IAD+C;AAE5DC,YAAQO,GAAD,IAA0BL,GAAGK,IAAIZ,KAAP;AAF2B,KAAf,CAA/C;AAIA,WAAOW,OAAP;AACD;AACDR,YAAgBa,OAAhB,EAAkE;AAChE,WAAO,KAAKnB,KAAL,CAAWM,SAAX,CAAqB;AAC1Bc,UAAOD,QAAQZ,KADW;AAE1Bc,aAAOF,QAAQX;AAFW,KAArB,CAAP;AAID;AACDc,OAAWH,OAAX,EAA6D;AAC3D,WAAO,KAAKb,SAAL,CAAea,OAAf,CAAP;AACD;AAnD8B;;AAsDjC,OAAO,SAASI,EAAT,CAAiCC,GAAjC,EAAkE;AACvE,MAAMxB,QAAQH,OAAO0B,EAAP,CAAUC,GAAV,CAAd;AACA,SAAO,IAAI1B,MAAJ,CAAWE,KAAX,CAAP;AACD;;AAED,OAAO,SAASO,KAAT,CAAgCiB,GAAhC,EAAyD;AAC9D,SAAOD,GAAGC,GAAH,CAAP;AACD;;AAED,OAAO,SAAShB,IAAT,CAAgCgB,GAAhC,EAA0D;AAC/D,MAAMxB,QAAQH,OAAOwB,KAAP,CAAaG,GAAb,CAAd;AACA,SAAO,IAAI1B,MAAJ,CAAWE,KAAX,CAAP;AACD;;AAED,OAAO,SAASyB,YAAT,CAA6BD,GAA7B,EAAsE;AAC3E,SAAO,IAAI1B,MAAJ,CAAWD,OAAO4B,YAAP,CAAoBD,GAApB,CAAX,CAAP;AACD;;AAED,OAAO,SAASE,QAAT,CAAqBC,IAArB,EAAqCC,GAArC,EAA2D;AAChE,MAAID,KAAKC,GAAL,CAAJ,EAAe;AACb,WAAOrB,MAAMqB,GAAN,CAAP;AACD,GAFD,MAEO;AACL,WAAOpB,KAAKoB,GAAL,CAAP;AACD;AACF;;AAED,eAAeL,EAAf","file":"either.js","sourcesContent":["//@flow\n\nimport * as Result from 'folktale/result'\nimport { type IResult } from 'folktale/result'\n\nexport interface ResultMatcher<Right, Left, -A, -B> {\n  Right(res: { value: Right }): A,\n  Left(res: { value: Left }): B,\n}\n\nexport class Either<Right, Left> {\n  inner: IResult<Right, Left>\n  chiral: 'Left' | 'Right'\n  value: Right | Left\n  constructor(inner: IResult<Right, Left>) {\n    Object.defineProperty(this, 'inner', {\n      value     : inner,\n      enumerable: false\n    })\n    this.chiral = this.matchWith({\n      Right: () => 'Right',\n      Left : () => 'Left',\n    })\n    this.value = inner.value\n  }\n  map<Right1>(fn: (obj: Right) => Right1): Either<Right1, Left> {\n    return new Either(this.inner.map(fn))\n  }\n  mapError<Left1>(fn: (obj: Left) => Left1): Either<Right, Left1> {\n    return new Either(this.inner.mapError(fn))\n  }\n  merge(): Right | Left {\n    return this.inner.merge()\n  }\n  chain<Right1, Left1>(fn: (obj: Right) => Either<Right1, Left1>): Either<Right1, Left | Left1> {\n    //$FlowIssue\n    const chained: Either<Right1, Left | Left1> = this.matchWith({\n      Right: (res: { value: Right }) => fn(res.value),\n      Left : () => this,\n    })\n    return chained\n  }\n  getOrElse(defaults: Right): Right {\n    return this.inner.getOrElse(defaults)\n  }\n  orElse<Right1, Left1>(fn: (obj: Left) => Either<Right1, Left1>): Either<Right | Right1, Left1> {\n    //$FlowIssue\n    const chained: Either<Right | Right1, Left1> = this.matchWith({\n      Right: () => this,\n      Left : (res: { value: Left }) => fn(res.value),\n    })\n    return chained\n  }\n  matchWith<A, B>(matcher: ResultMatcher<Right, Left, A, B>): A | B {\n    return this.inner.matchWith({\n      Ok   : matcher.Right,\n      Error: matcher.Left,\n    })\n  }\n  cata<A, B>(matcher: ResultMatcher<Right, Left, A, B>): A | B {\n    return this.matchWith(matcher)\n  }\n}\n\nexport function of<Right, -Left: mixed>(obj: Right): Either<Right, Left> {\n  const inner = Result.of(obj)\n  return new Either(inner)\n}\n\nexport function Right<R, -Left: mixed>(obj: R): Either<R, Left> {\n  return of(obj)\n}\n\nexport function Left<-Right: mixed, L>(obj: L): Either<Right, L> {\n  const inner = Result.Error(obj)\n  return new Either(inner)\n}\n\nexport function fromNullable<Right>(obj: ?Right): Either<Right, null | void> {\n  return new Either(Result.fromNullable(obj))\n}\n\nexport function withPred<T>(pred: $Pred<1>, val: T): Either<*, *> {\n  if (pred(val)) {\n    return Right(val)\n  } else {\n    return Left(val)\n  }\n}\n\nexport default of\n"]}