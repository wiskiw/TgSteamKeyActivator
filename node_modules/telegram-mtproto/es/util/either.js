import * as Result from 'folktale/result';
import 'folktale/result';

export class Either {
  constructor(inner) {
    Object.defineProperty(this, 'inner', {
      value: inner,
      enumerable: false
    });
    this.chiral = this.matchWith({
      Right: () => 'Right',
      Left: () => 'Left'
    });
    this.value = inner.value;
  }
  map(fn) {
    return new Either(this.inner.map(fn));
  }
  mapError(fn) {
    return new Either(this.inner.mapError(fn));
  }
  merge() {
    return this.inner.merge();
  }
  chain(fn) {
    //$FlowIssue
    var chained = this.matchWith({
      Right: res => fn(res.value),
      Left: () => this
    });
    return chained;
  }
  getOrElse(defaults) {
    return this.inner.getOrElse(defaults);
  }
  orElse(fn) {
    //$FlowIssue
    var chained = this.matchWith({
      Right: () => this,
      Left: res => fn(res.value)
    });
    return chained;
  }
  matchWith(matcher) {
    return this.inner.matchWith({
      Ok: matcher.Right,
      Error: matcher.Left
    });
  }
  cata(matcher) {
    return this.matchWith(matcher);
  }
}

export function of(obj) {
  var inner = Result.of(obj);
  return new Either(inner);
}

export function Right(obj) {
  return of(obj);
}

export function Left(obj) {
  var inner = Result.Error(obj);
  return new Either(inner);
}

export function fromNullable(obj) {
  return new Either(Result.fromNullable(obj));
}

export function withPred(pred, val) {
  if (pred(val)) {
    return Right(val);
  } else {
    return Left(val);
  }
}

export default of;
//# sourceMappingURL=either.js.map