import { combineReducers } from 'redux';

import List from './immutable-list';

export function indexedReducer(metaIndexGetter, metaChecker) {
  return function (handlers) {
    var singleReducer = typeof handlers === 'function' ? handlers : combineReducers(handlers);
    var wrapHandler = action => val => singleReducer(val, action);
    return function reducer(state = List.empty(), action) {
      var meta = action.meta;
      if (!metaChecker(meta)) return state;
      var index = metaIndexGetter(meta);
      var subState = state.has(index) ? state : state.set(index, {});
      var newState = subState.update(index, wrapHandler(action));
      return newState;
    };
  };
}

export function indexed(metaName) {
  function metaChecker(meta) {
    return typeof meta === 'object' && meta != null && meta._ === metaName;
  }
  function metaIndexGetter(meta) {
    return meta.id;
  }
  return indexedReducer(metaIndexGetter, metaChecker);
}
//# sourceMappingURL=indexed-reducer.js.map