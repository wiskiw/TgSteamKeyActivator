{"version":3,"sources":["../../src/util/file-log.js"],"names":["createWriteStream","dTime","toPairs","forEach","any","is","__","type","DEL","Symbol","traverse","func","visitor","obj","Array","isArray","result","entries","index","value","edited","newIndex","visited","push","iterator","arraysNormalize","key","Uint8Array","Buffer","ArrayBuffer","Int32Array","Uint32Array","data","from","beforeStringify","stringify","JSON","getId","Math","trunc","random","fileName","writeStream","writer","functionName","input","id","write","output"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,IAAlC;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,IAAxC,QAAoD,OAApD;;AAEA,IAAMC,MAAMC,OAAO,QAAP,CAAZ;;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAiE;AACtE,SAAO,SAASC,OAAT,CAAiBC,GAAjB,EAA2B;AAChC,QAAIC,MAAMC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtB,UAAMG,SAAS,EAAf;AACA,2BAA6BH,IAAII,OAAJ,EAA7B,kHAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAjC,CAACC,KAAD,EAAQC,KAAR,CAAiC;;AAC1C,YAAM,CAACC,MAAD,EAASC,QAAT,IAAqBV,KAAKQ,KAAL,EAAYD,KAAZ,CAA3B;AACA,YAAIE,WAAWZ,GAAf,EAAoB;AACpB,YAAMc,UAAUV,QAAQQ,MAAR,EAAgBC,QAAhB,CAAhB;AACAL,eAAOO,IAAP,CAAYD,OAAZ;AACD;AACD,aAAON,MAAP;AACD,KATD,MASO,IAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;AAClC,UAAMG,UAAS,EAAf;AACA,UAAMQ,WAAWrB,QAAQ,CAAC,CAACe,KAAD,EAAQC,KAAR,CAAD,KAAoB;AAC3C,YAAM,CAACC,MAAD,EAASC,QAAT,IAAqBV,KAAKQ,KAAL,EAAYD,KAAZ,CAA3B;AACA,YAAIE,WAAWZ,GAAf,EAAoB;AACpB,YAAMc,UAAUV,QAAQQ,MAAR,EAAgBC,QAAhB,CAAhB;AACAL,gBAAOK,QAAP,IAAmBC,OAAnB;AACD,OALgB,CAAjB;;AAOAE,eAAStB,QAAQW,GAAR,CAAT;AACA,aAAOG,OAAP;AACD;AACD,WAAOH,GAAP;AACD,GAvBD;AAwBD;;AAED,IAAMY,kBAAkB,CAACZ,GAAD,EAAMa,GAAN,KAAc;AACpC,MAAIV,SAASH,GAAb;AACA,MAAIT,IAAIC,GAAGC,EAAH,EAAOO,GAAP,CAAJ,EAAiB,CAACc,UAAD,EAAaC,MAAb,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,WAA9C,CAAjB,CAAJ,EACEf,SAAS,EAAEgB,MAAMlB,MAAMmB,IAAN,CAAWpB,GAAX,CAAR,EAAyBN,MAAMA,KAAKM,GAAL,CAA/B,EAAT;AACF,SAAO,CAACG,MAAD,EAASU,GAAT,CAAP;AACD,CALD;;AAOA,IAAMQ,kBAAkBxB,SAASe,eAAT,CAAxB;AACA,IAAMU,YAAaH,IAAD,IAAUI,KAAKD,SAAL,CAAeD,gBAAgBF,IAAhB,CAAf,CAA5B;;AAGA,IAAMK,QAAQ,MAAMC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,GAA5B,CAApB;AACA,IAAMC,WAAY,iBAAgBJ,OAAQ,MAA1C;;AAEA,IAAMK,cAAc1C,kBAAkByC,QAAlB,CAApB;;AAEA,IAAME,SAAUC,YAAD,KAA2B;AACxCC,QAAMb,IAAN,EAAY;AACV,QAAMc,KAAKT,OAAX;AACAK,gBAAYK,KAAZ,CAAmB,GAAE9C,OAAQ,IAAG2C,YAAa,IAAGE,EAAG,WAAUX,UAAUH,IAAV,CAAgB,IAA7E;AACA,WAAOc,EAAP;AACD,GALuC;AAMxCE,UAAQ,CAACF,EAAD,EAAKd,IAAL,KAAcU,YAAYK,KAAZ,CAAmB,GAAE9C,OAAQ,IAAG2C,YAAa,IAAGE,EAAG,YAAWX,UAAUH,IAAV,CAAgB,IAA9E;AANkB,CAA3B,CAAf;;AASA,eAAeW,MAAf","file":"file-log.js","sourcesContent":["import { createWriteStream } from 'fs'\nimport { dTime } from 'mtproto-shared'\n\nimport { toPairs, forEach, any, is, __, type } from 'ramda'\n\nconst DEL = Symbol('delete')\n\nexport function traverse(func: (obj: any, key: string | number) => any) {\n  return function visitor(obj: any) {\n    if (Array.isArray(obj)) {\n      const result = []\n      for (const [index, value] of obj.entries()) {\n        const [edited, newIndex] = func(value, index)\n        if (edited === DEL) continue\n        const visited = visitor(edited, newIndex)\n        result.push(visited)\n      }\n      return result\n    } else if (typeof obj === 'object') {\n      const result = {}\n      const iterator = forEach(([index, value]) => {\n        const [edited, newIndex] = func(value, index)\n        if (edited === DEL) return\n        const visited = visitor(edited, newIndex)\n        result[newIndex] = visited\n      })\n\n      iterator(toPairs(obj))\n      return result\n    }\n    return obj\n  }\n}\n\nconst arraysNormalize = (obj, key) => {\n  let result = obj\n  if (any(is(__, obj), [Uint8Array, Buffer, ArrayBuffer, Int32Array, Uint32Array]))\n    result = { data: Array.from(obj), type: type(obj) }\n  return [result, key]\n}\n\nconst beforeStringify = traverse(arraysNormalize)\nconst stringify = (data) => JSON.stringify(beforeStringify(data))\n\n\nconst getId = () => Math.trunc( Math.random() * 1e6 )\nconst fileName = `logs/file-log-${getId()}.log`\n\nconst writeStream = createWriteStream(fileName)\n\nconst writer = (functionName: string) => ({\n  input(data) {\n    const id = getId()\n    writeStream.write(`${dTime()} ${functionName} ${id} input\\n${stringify(data)}\\n`)\n    return id\n  },\n  output: (id, data) => writeStream.write(`${dTime()} ${functionName} ${id} output\\n${stringify(data)}\\n`)\n})\n\nexport default writer"]}