{"version":3,"sources":["../../src/util/cata.js"],"names":["Stream","Either","cata","cases","either","isRight","Right","Left","r","get","result","swap","l","cataC","switchCata","cataStream","switchCataStream","stream","mapped","map","val"],"mappings":"AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAOA,SAASC,IAAT,CACEC,KADF,EAEEC,MAFF,EAGW;AACT,MAAMC,UAAmBD,OAAOC,OAAP,EAAzB;AACA,MAAM,EAAEC,KAAF,EAASC,IAAT,KAAkBJ,KAAxB;AACA,MAAIE,OAAJ,EAAa;AACX,QAAMG,IAAOJ,OAAOK,GAAP,EAAb;AACA,QAAMC,SAAaJ,MAAME,CAAN,CAAnB;AACA,WAAOE,MAAP;AACD,GAJD,MAIO;AACL,QAAMC,OAAqBP,OAAOO,IAAP,EAA3B;AACA,QAAMC,IAAOD,KAAKF,GAAL,EAAb;AACA,QAAMC,UAAaH,KAAKK,CAAL,CAAnB;AACA,WAAOF,OAAP;AACD;AACF;;AAED,OAAO,SAASG,KAAT,CAA6BV,KAA7B,EAA8D;AACnE,SAAO,SAASW,UAAT,CAAoBV,MAApB,EAAmD;AACxD,QAAMM,SAAkBR,KAAKC,KAAL,EAAYC,MAAZ,CAAxB;AACA,WAAOM,MAAP;AACD,GAHD;AAID;;AAED,OAAO,SAASK,UAAT,CAAkCZ,KAAlC,EAAmE;AACxE,SAAO,SAASa,gBAAT,CAA0BC,MAA1B,EAAyE;AAC9E,QAAMC,SAA0BD,OAAOE,GAAP,CAAYC,GAAD,IAASlB,KAAKC,KAAL,EAAYiB,GAAZ,CAApB,CAAhC;AACA,WAAOF,MAAP;AACD,GAHD;AAID;;AAED,eAAehB,IAAf","file":"cata.js","sourcesContent":["//@flow\nimport { Stream } from 'most'\nimport { Either } from 'funfix'\n\nexport type EitherCase<R, RR, L, LL> = {\n  Left(data: L): LL,\n  Right(data: R): RR,\n}\n\nfunction cata<R, L, RR, LL>(\n  cases: EitherCase<R, RR, L, LL>,\n  either: Either<L, R>\n): RR | LL {\n  const isRight: boolean = either.isRight()\n  const { Right, Left } = cases\n  if (isRight) {\n    const r: R = either.get()\n    const result: RR = Right(r)\n    return result\n  } else {\n    const swap: Either<R, L> = either.swap()\n    const l: L = swap.get()\n    const result: LL = Left(l)\n    return result\n  }\n}\n\nexport function cataC<R, L, RR, LL>(cases: EitherCase<R, RR, L, LL>) {\n  return function switchCata(either: Either<L, R>): RR | LL {\n    const result: RR | LL = cata(cases, either)\n    return result\n  }\n}\n\nexport function cataStream<R, L, RR, LL>(cases: EitherCase<R, RR, L, LL>) {\n  return function switchCataStream(stream: Stream<Either<L, R>>): Stream<RR | LL> {\n    const mapped: Stream<RR | LL> = stream.map((val) => cata(cases, val))\n    return mapped\n  }\n}\n\nexport default cata\n"]}