{"version":3,"sources":["../../src/dc-status/seq-no.js"],"names":["uniq","append","drop","SeqNo","constructor","limit","init","count","first","current","holes","history","hasHoles","getNext","notContentRelated","seqNo","push","next","Math","max","length","dropCount","findMin","countHoles","ln","min","Infinity","i","val","range"],"mappings":"AAEA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,OAAnC;;AAEA,eAAe,MAAMC,KAAN,CAAY;AAUzBC,gBAAc;AAAA,SATdC,KASc,GATE,GASF;;AACZ,SAAKC,IAAL;AACD;AACDA,SAAO;AACL,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKX,IAAL,GAAY,EAAZ;AACA,SAAKY,QAAL,GAAgB,KAAhB;AACD;AACDC,UAAQC,iBAAR,EAAqC;AACnC,QAAIC,QAAQ,KAAKR,KAAL,GAAa,CAAzB;AACA,QAAI,CAACO,iBAAL,EAAwB;AACtBC;AACA,WAAKR,KAAL;AACD;AACD,SAAKS,IAAL,CAAUD,KAAV;AACA,WAAOA,KAAP;AACD;AACDC,OAAKC,IAAL,EAAmB;AACjB,SAAKR,OAAL,GAAeS,KAAKC,GAAL,CAAS,KAAKV,OAAd,EAAuBQ,IAAvB,CAAf;AACA,SAAKN,OAAL,GAAeV,OAAOgB,IAAP,EAAa,KAAKN,OAAlB,CAAf;AACA,QAAI,KAAKA,OAAL,CAAaS,MAAb,IAAuB,KAAKf,KAAhC,EAAuC;AACrC,UAAMgB,YAAY,KAAKV,OAAL,CAAaS,MAAb,GAAsB,KAAKf,KAA7C;AACA,WAAKM,OAAL,GAAeT,KAAKmB,SAAL,EAAgB,KAAKV,OAArB,CAAf;AACD;AACD,SAAKX,IAAL,GAAYA,KAAK,KAAKW,OAAV,CAAZ;AACA,SAAKW,OAAL;AACA,SAAKC,UAAL;AACD;AACDD,YAAU;AACR,QAAME,KAAK,KAAKxB,IAAL,CAAUoB,MAArB;AACA,QAAIK,MAAMC,QAAV;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,EAApB,EAAwBG,GAAxB,EAA6B;AAC3B,UAAMC,MAAM,KAAK5B,IAAL,CAAU2B,CAAV,CAAZ;AACA,UAAIC,MAAMH,GAAV,EACEA,MAAMG,GAAN;AACH;AACD,SAAKpB,KAAL,GAAaiB,GAAb;AACD;AACDF,eAAa;AACX,QAAMC,KAAK,KAAKxB,IAAL,CAAUoB,MAArB;AACA,QAAII,OAAO,CAAX,EAAc;AACZ,WAAKd,KAAL,GAAa,CAAb;AACA;AACD;AACD,QAAMmB,QAAQ,KAAKpB,OAAL,GAAe,KAAKD,KAAlC;AACA,SAAKE,KAAL,GAAamB,QAAQL,EAArB;AACA,SAAKZ,QAAL,GAAgB,KAAKF,KAAL,KAAe,CAA/B;AACD;AA7DwB","file":"seq-no.js","sourcesContent":["//@flow\n\nimport { uniq, append, drop } from 'ramda'\n\nexport default class SeqNo {\n  limit: number = 100\n\n  count: number\n  first: number\n  current: number\n  holes: number\n  history: number[]\n  uniq: number[]\n  hasHoles: boolean\n  constructor() {\n    this.init()\n  }\n  init() {\n    this.count = 0\n    this.first = 0\n    this.current = 0\n    this.holes = 0\n    this.history = []\n    this.uniq = []\n    this.hasHoles = false\n  }\n  getNext(notContentRelated?: boolean) {\n    let seqNo = this.count * 2\n    if (!notContentRelated) {\n      seqNo++\n      this.count++\n    }\n    this.push(seqNo)\n    return seqNo\n  }\n  push(next: number) {\n    this.current = Math.max(this.current, next)\n    this.history = append(next, this.history)\n    if (this.history.length >= this.limit) {\n      const dropCount = this.history.length - this.limit\n      this.history = drop(dropCount, this.history)\n    }\n    this.uniq = uniq(this.history)\n    this.findMin()\n    this.countHoles()\n  }\n  findMin() {\n    const ln = this.uniq.length\n    let min = Infinity\n    for (let i = 0; i < ln; i++) {\n      const val = this.uniq[i]\n      if (val < min)\n        min = val\n    }\n    this.first = min\n  }\n  countHoles() {\n    const ln = this.uniq.length\n    if (ln === 0) {\n      this.holes = 0\n      return\n    }\n    const range = this.current - this.first\n    this.holes = range - ln\n    this.hasHoles = this.holes === 0\n  }\n}\n"]}