{"version":3,"sources":["../../src/plugins/long-poll.js"],"names":["Bluebird","tsNow","NetworkerThread","active","Logger","log","waitToTime","poll","allowLongPoll","Promise","setTimeout","rs","LongPoll","constructor","thread","maxWait","pendingTime","Date","now","requestTime","isActive","alreadyWaitPending","observe","val","setPendingTime","request","result","wrapMtpCall","max_delay","wait_after","max_wait","noResponse","longPoll","checkLongPoll","writePollTime","sending","sendLongPool","pending"],"mappings":";;AAEA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,IAAMC,MAAMD,MAAO,WAAnB;;AAEA;;AAEA,IAAME;AAAA,+BAAa,WAAMC,IAAN,EAAwC;AACzD,WAAO,CAACA,KAAKC,aAAL,EAAR;AACE,YAAM,IAAIC,OAAJ,CAAY;AAAA,eAAMC,WAAWC,EAAX,EAAe,GAAf,CAAN;AAAA,OAAZ,CAAN;AADF;AAED,GAHK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAKA,MAAMC,QAAN,CAAe;AASbC,cAAYC,MAAZ,EAAqC;AAAA,SANrCC,OAMqC,GAN3B,IAM2B;AAAA,SALrCC,WAKqC,GALvBC,KAAKC,GAAL,EAKuB;AAAA,SAJrCC,WAIqC,GAJvBF,KAAKC,GAAL,EAIuB;AAAA,SAHrCE,QAGqC,GAH1B,KAG0B;AAAA,SAFrCC,kBAEqC,GAFP,KAEO;;AACnC,SAAKP,MAAL,GAAcA,MAAd;AACAX,WACGmB,OADH,CACWC,OAAO,KAAKH,QAAL,GAAgBG,GADlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,mBAAiB;AACf,QAAMN,MAAMjB,OAAZ;AACA,SAAKkB,WAAL,GAAmBD,GAAnB;AACA,SAAKF,WAAL,GAAmBE,MAAM,KAAKH,OAA9B;AACD;AACKU,SAAN,GAAgB;AAAA;;AAAA;AACd,UAAMC,SAAS,MAAM,MAAKZ,MAAL,CAAYa,WAAZ,CAAwB,WAAxB,EAAqC;AACxDC,mBAAY,IAD4C;AAExDC,oBAAY,GAF4C;AAGxDC,kBAAY,MAAKf;AAHuC,OAArC,EAIlB;AACDgB,oBAAY,IADX;AAEDC,kBAAY;AACZ;AAHC,OAJkB,CAArB;AASA,YAAKlB,MAAL,CAAYmB,aAAZ;AACA,aAAOP,MAAP;AAXc;AAYf;;AAEDQ,kBAAgB;AACd,SAAKf,WAAL,GAAmBlB,OAAnB;AACD;;AAEDO,kBAAgB;AACd,QAAMkB,SAAS,KAAKP,WAAL,GAAmB,IAAnB,GAA0BlB,OAAzC;AACAI,OAAI,iBAAJ,CAAqBqB,MAArB;AACA,WAAOA,MAAP;AACD;AACKS,SAAN,GAAgB;AAAA;;AAAA;AACd,aAAKd,kBAAL,GAA0B,IAA1B;AACA,YAAMf,kBAAN;AACA,aAAKe,kBAAL,GAA0B,KAA1B;AACA,aAAKG,cAAL;AACA,UAAME,SAAS,MAAM,OAAKD,OAAL,EAArB;AACA,aAAOC,MAAP;AANc;AAOf;AACKU,cAAN,GAAmC;AAAA;;AAAA;AACjC;AACA,UAAI,CAAC,OAAKhB,QAAV,EAAoB,OAAO,KAAP;AACpB,UAAI,OAAKZ,aAAL,EAAJ,EAA0B;AACxB,eAAK6B,OAAL,GAAe,OAAKF,OAAL,EAAf;AACD;;AAED,UAAMT,SAAS,MAAM,OAAKW,OAA1B;AACA,aAAOX,MAAP;AARiC;AASlC;AAlEY;;AAqEf,eAAed,QAAf","file":"long-poll.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\n\nimport { tsNow } from '../service/time-manager'\nimport { NetworkerThread } from '../service/networker/index'\nimport { active } from '../state/signal'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`long-poll`\n\n// let inited = false\n\nconst waitToTime = async(poll: LongPoll): Promise<void> => {\n  while (!poll.allowLongPoll())\n    await new Promise(rs => setTimeout(rs, 500))\n}\n\nclass LongPoll {\n  thread: NetworkerThread\n\n  maxWait = 25e3\n  pendingTime = Date.now()\n  requestTime = Date.now()\n  isActive = false\n  alreadyWaitPending: boolean = false\n  pending: Promise<any>\n  constructor(thread: NetworkerThread) {\n    this.thread = thread\n    active\n      .observe(val => this.isActive = val)\n    // if (inited) {\n    //   log('Networker')(thread)\n    //   //$ FlowIssue\n    //   this.request = () => Bluebird.resolve()\n    // }\n    // inited = true\n  }\n\n  setPendingTime() {\n    const now = tsNow()\n    this.requestTime = now\n    this.pendingTime = now + this.maxWait\n  }\n  async request() {\n    const result = await this.thread.wrapMtpCall('http_wait', {\n      max_delay : 1000,\n      wait_after: 500,\n      max_wait  : this.maxWait\n    }, {\n      noResponse: true,\n      longPoll  : true,\n      // notContentRelated: true\n    })\n    this.thread.checkLongPoll()\n    return result\n  }\n\n  writePollTime() {\n    this.requestTime = tsNow()\n  }\n\n  allowLongPoll() {\n    const result = this.requestTime + 1500 < tsNow()\n    log`allow long poll`(result)\n    return result\n  }\n  async sending() {\n    this.alreadyWaitPending = true\n    await waitToTime(this)\n    this.alreadyWaitPending = false\n    this.setPendingTime()\n    const result = await this.request()\n    return result\n  }\n  async sendLongPool(): Promise<any> {\n    //TODO add base dc check\n    if (!this.isActive) return false\n    if (this.allowLongPoll()) {\n      this.pending = this.sending()\n    }\n\n    const result = await this.pending\n    return result\n  }\n}\n\nexport default LongPoll\n"]}