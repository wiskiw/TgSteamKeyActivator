import Promise from 'bluebird';

import { toPairs } from 'ramda';

/**
 * Basic storage implementation.
 * Saves data in memory
 *
 * @export
 * @class MemoryStorage
 * @implements {AsyncStorage}
 */
export class MemoryStorage {

  constructor(data) {
    this.store = new Map();

    if (data != null) {
      for (var _iterator = toPairs(data), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var [_key, _value] = _ref;

        this.store.set(_key, _value);
      }
    }
  }

  get(key) {
    return Promise.resolve(this.store.get(key));
  }

  set(key, val) {
    this.store.set(key, val);
    return Promise.resolve();
  }

  remove(...keys) {
    var results = keys.map(e => this.store.delete(e));
    return Promise.resolve(results);
  }

  clear() {
    this.store.clear();
    return Promise.resolve();
  }
}

export default MemoryStorage;
//# sourceMappingURL=memory-storage.js.map