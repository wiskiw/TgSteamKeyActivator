function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

import { Stream, of, awaitPromises } from 'most';
import { equals } from 'ramda';

import Logger from 'mtproto-logger';
var log = Logger`net-request`;

import { API, NET } from '../action';
import { NetMessage } from '../../service/networker/net-message';
import { apiMessage, encryptApiBytes, mtMessage } from '../../service/chain/encrypted-message';
import Config from '../../config-provider';
import NetworkerThread from '../../service/networker/index';
import { Serialization } from '../../tl/index';
import { httpClient } from '../../http';
import { homeDc, uid, whenActive } from '../signal';
import jsonError from '../../util/json-error';
// import ApiRequest from '../../service/main/request'

function makeApiBytes({ message, thread }) {
  return apiMessage({
    ctx: new Serialization({ startMaxLength: message.body.length + 64 }, thread.uid).writer,
    serverSalt: thread.serverSalt,
    sessionID: thread.sessionID,
    message
  });
}

function encryptedBytes(opts) {
  return encryptApiBytes({
    bytes: makeApiBytes(opts),
    authKey: opts.thread.authKeyUint8
  });
}

// process.on('unhandledRejection', val => {
//   console.log(val)
//   console.trace('on')
// })

export var onNewRequest = action => action.thru(API.NEW_REQUEST.stream).thru(whenActive).combine((data, homeDc) => Object.assign({}, data, { homeDc }), homeDc).combine((data, uid) => Object.assign({}, data, { uid }), uid).skipRepeatsWith((old, fresh) => equals(old.payload, fresh.payload)).map(API.CALL_TASK);

export var onNewTask = action => action.thru(API.CALL_TASK.stream).thru(whenActive).map(({ payload }) => payload)
// .delay(50)
.tap(val => val.payload.netReq.invoke()).filter(() => false);

var netRequest = action => action.thru(NET.SEND.stream).thru(whenActive).map(({ payload }) => payload).map((() => {
  var _ref = _asyncToGenerator(function* (_ref2) {
    var { options } = _ref2,
        data = _objectWithoutProperties(_ref2, ['options']);

    return Object.assign({}, data, {
      options: Object.assign({
        responseType: 'arraybuffer'
      }, options),
      data: yield encryptedBytes(data)
    });
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})()).thru(awaitPromises).map((_ref3) => {
  var { data } = _ref3,
      opts = _objectWithoutProperties(_ref3, ['data']);

  return Object.assign({}, data, opts);
}).map((_ref4) => {
  var { encryptedBytes, thread, msgKey } = _ref4,
      rest = _objectWithoutProperties(_ref4, ['encryptedBytes', 'thread', 'msgKey']);

  var request = new Serialization({
    startMaxLength: encryptedBytes.byteLength + 256
  }, thread.uid).writer;

  var mtBytes = mtMessage({
    ctx: request,
    authKeyID: thread.authKeyID,
    msgKey,
    encryptedBytes
  });
  var url = Config.dcMap(thread.uid, thread.dcID);
  return Object.assign({ thread, mtBytes, url }, rest);
}).map((() => {
  var _ref5 = _asyncToGenerator(function* ({ options, mtBytes, message, thread, noResponseMsgs, url }) {
    return {
      message,
      thread,
      noResponseMsgs,
      result: yield httpClient.post(url, mtBytes, options)
    };
  });

  return function (_x2) {
    return _ref5.apply(this, arguments);
  };
})()).thru(awaitPromises).map(NET.RECEIVE_RESPONSE).recoverWith(err => of(NET.NETWORK_ERROR(jsonError(err))).delay(15));

export default netRequest;
//# sourceMappingURL=net-request.js.map