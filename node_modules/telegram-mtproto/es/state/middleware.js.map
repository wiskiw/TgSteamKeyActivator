{"version":3,"sources":["../../src/state/middleware.js"],"names":["of","Logger","log","subject","skipEmptyMiddleware","store","next","action","Array","isArray","payload","length","type","debounceMiddleware","dispatch","actionStream","tap","map","meta","debounced","concatMap","val","delay","observe"],"mappings":"AAEA,SAASA,EAAT,QAAmB,MAAnB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,IAAMC,MAAMD,MAAO,YAAnB;;AAEA,SAASE,OAAT,QAAwB,aAAxB;;AAEA,OAAO,IAAMC,sBAAuBC,KAAD,IAAeC,IAAD,IAAcC,MAAD,IAAe;AAC3E,MAAIC,MAAMC,OAAN,CAAcF,OAAOG,OAArB,KAAiCH,OAAOG,OAAP,CAAeC,MAAf,KAA0B,CAA/D,EACET,GAAI,YAAJ,CAAgBK,OAAOK,IAAvB,EADF,KAGE,OAAON,KAAKC,MAAL,CAAP;AACH,CALM;;AAOP,OAAO,IAAMM,qBAAqB,CAAC,EAAEC,QAAF,EAAD,KAAsBR,IAAD,IAAa;AAClE,MAAMS,eAAeZ,QAAQ,EAAES,MAAM,EAAR,EAAYF,SAAS,EAArB,EAAR,CAArB;AACAK,eACGC,GADH,CACOd,GAAI,QADX,EAEGe,GAFH,CAEOV,UAAU;AACb,QAAIA,OAAOW,IAAP,IAAe,IAAnB;AACE;AACAX,aAAOW,IAAP,GAAc,EAAd;AACFX,WAAOW,IAAP,CAAYC,SAAZ,GAAwB,IAAxB;AACA,WAAOZ,MAAP;AACD,GARH,EASGa,SATH,CASaC,OAAOrB,GAAGqB,GAAH,EAAQC,KAAR,CAAc,EAAd,CATpB,EAUGC,OAVH,CAUWT,QAVX;AAWA,SAAQP,MAAD,IAAe;AACpB,QAAIA,OAAOW,IAAP,IAAeX,OAAOW,IAAP,CAAYC,SAA/B,EACE,OAAOb,KAAKC,MAAL,CAAP;AACF,WAAOQ,aAAaT,IAAb,CAAkBC,MAAlB,CAAP;AACD,GAJD;AAKD,CAlBM","file":"middleware.js","sourcesContent":["//@flow\n\nimport { of } from 'most'\nimport Logger from 'mtproto-logger'\nconst log = Logger`redux-core`\n\nimport { subject } from '../property'\n\nexport const skipEmptyMiddleware = (store: *) => (next: *) => (action: *) => {\n  if (Array.isArray(action.payload) && action.payload.length === 0)\n    log`skip empty`(action.type)\n  else\n    return next(action)\n}\n\nexport const debounceMiddleware = ({ dispatch }: *) => (next: *) => {\n  const actionStream = subject({ type: '', payload: {} })\n  actionStream\n    .tap(log`action`)\n    .map(action => {\n      if (action.meta == null)\n        //$FlowIssue\n        action.meta = {}\n      action.meta.debounced = true\n      return action\n    })\n    .concatMap(val => of(val).delay(50))\n    .observe(dispatch)\n  return (action: *) => {\n    if (action.meta && action.meta.debounced)\n      return next(action)\n    return actionStream.next(action)\n  }\n}\n\n"]}