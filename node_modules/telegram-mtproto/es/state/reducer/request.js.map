{"version":3,"sources":["../../../src/state/reducer/request.js"],"names":["combineReducers","createReducer","API","List","api","NEW_REQUEST","state","payload","meta","set","id","timestamp","Date","DONE_REQUEST","matcher","Right","data","value","linked","ids","has","get","netReq","deferFinal","resolve","Left","reject","Array","isArray","messages","message","matchWith","empty","reducer"],"mappings":"AAEA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,WAA9B;;AAEA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAyE,WAAzE;AACA,OAAiC,cAAjC;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAmC,mBAAnC;;AAQA,IAAMC,MAAMH,cAAc;AACxB;AACA,GAACC,IAAIG,WAAL,GAAmB,CAACC,KAAD,EAAuCC,OAAvC,EAA+DC,IAA/D,KACjBF,MAAMG,GAAN,CAAUD,KAAKE,EAAf,oBAAwBH,OAAxB,IAAiCI,WAAW,IAAIC,IAAJ,CAASL,QAAQI,SAAjB,CAA5C,IAHsB;AAIxB;AACA,GAACT,IAAIW,YAAL,GAAoB,CAACP,KAAD,EACCC,OADD,EAECC,IAFD,KAEqB;AACvC,QAAMM,UAA2C;AAC/CC,YAAMC,IAAN,EAAY;AACV;AACA,YAAM,EAAEC,KAAF,KAAYD,IAAlB;AACA,YAAME,SAASD,MAAME,GAAN,CAAUD,MAAzB;AACA,YAAIA,UAAUZ,MAAMc,GAAN,CAAUF,MAAV,CAAd,EACEZ,MACGe,GADH,CACOH,MADP,EAEGI,MAFH,CAGGC,UAHH,CAIGC,OAJH,CAIWP,MAAMD,IAJjB;AAKH,OAX8C;AAY/CS,WAAKT,IAAL,EAAW;AACT;AACA,YAAM,EAAEC,KAAF,KAAYD,IAAlB;AACA,YAAME,SAASD,MAAME,GAAN,CAAUD,MAAzB;AACA,YAAIA,UAAUZ,MAAMc,GAAN,CAAUF,MAAV,CAAd,EACEZ,MACGe,GADH,CACOH,MADP,EAEGI,MAFH,CAGGC,UAHH,CAIGG,MAJH,CAIUT,MAAMD,IAJhB;AAKH;AAtB8C,KAAjD;AAwBA,QAAIW,MAAMC,OAAN,CAAcrB,QAAQsB,QAAtB,CAAJ;AACE,2BAAsBtB,QAAQsB,QAA9B,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA7BC,QAA6B;;AACtCA,iBAAQC,SAAR,CAAkBjB,OAAlB;AACD;AAHH,KAIA,OAAOR,KAAP,CA7BuC,CA6B3B;AACb;AArCuB,CAAd,EAsCTH,KAAK6B,KAAL,EAtCS,CAAZ;;AAwCA,IAAMC,UAAUjC,gBAAgB;AAC9BI;AAD8B,CAAhB,CAAhB;;AAIA,eAAe6B,OAAf","file":"request.js","sourcesContent":["//@flow\n\nimport { combineReducers } from 'redux'\nimport { createReducer } from 'redux-act'\n\nimport { API } from '../action'\nimport { type ApiNewRequest, type ApiMetaPL, type NetIncomingData } from '../action'\nimport { type TaskEndData } from '../epic/task'\nimport List from '../../util/immutable-list'\nimport { type ResultMatcher } from '../../util/either'\n\ntype ApiRequestField = {\n  method: string,\n  params: { [key: string]: mixed },\n  timestamp: Date,\n}\n\nconst api = createReducer({\n  //$FlowIssue\n  [API.NEW_REQUEST]: (state: List<ApiRequestField, string>, payload: ApiNewRequest, meta: ApiMetaPL) =>\n    state.set(meta.id, { ...payload, timestamp: new Date(payload.timestamp) }),\n  //$FlowIssue\n  [API.DONE_REQUEST]: (state: List<ApiRequestField, string>,\n                       payload: NetIncomingData & TaskEndData,\n                       meta: ApiMetaPL) => {\n    const matcher: ResultMatcher<*, *, void, void> = {\n      Right(data) {\n        // console.log('data', data)\n        const { value } = data\n        const linked = value.ids.linked\n        if (linked && state.has(linked))\n          state\n            .get(linked)\n            .netReq\n            .deferFinal\n            .resolve(value.data)\n      },\n      Left(data) {\n        // console.log('data l', data)\n        const { value } = data\n        const linked = value.ids.linked\n        if (linked && state.has(linked))\n          state\n            .get(linked)\n            .netReq\n            .deferFinal\n            .reject(value.data)\n      },\n    }\n    if (Array.isArray(payload.messages))\n      for (const message of payload.messages) {\n        message.matchWith(matcher)\n      }\n    return state//.delete(meta.id)\n  }\n}, List.empty())\n\nconst reducer = combineReducers({\n  api\n})\n\nexport default reducer\n"]}