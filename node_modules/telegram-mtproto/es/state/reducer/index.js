function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import { combineReducers } from 'redux';
import { createReducer } from 'redux-act';
import { append } from 'ramda';

import '../index.h';
import { MAIN, NET, API } from '../action';
import '../action';
import '../epic/task';

import networker from './networker-state';
import request from './request';

var active = createReducer({
  //$FlowIssue
  [MAIN.ACTIVATED]: () => true
}, false);

var uid = createReducer({
  //$FlowIssue
  [MAIN.SWITCH_ON]: (state, payload) => payload
}, ' ');

var messageHistory = createReducer({
  //$FlowIssue
  [API.DONE_REQUEST]: (state, data) => {
    // console.log(data)
    var { result, thread, messages } = data,
        rest = _objectWithoutProperties(data, ['result', 'thread', 'messages']);
    // console.log(result)
    // console.log(rest)
    return append({
      messages,
      direction: 'in' }, state);
  },
  //$FlowIssue
  [NET.SEND]: (state, payload) => append({
    id: payload.message.msg_id,
    seqNo: payload.message.seq_no,
    direction: 'out' }, state)
}, []);

var homeDc = createReducer({}, 2);

var mainReducer = combineReducers({
  _: () => true,
  active,
  homeDc,
  uid,
  messageHistory,
  networker,
  request
});

export default mainReducer;
//# sourceMappingURL=index.js.map