import { combineReducers } from 'redux';
import { createReducer } from 'redux-act';

import { API } from '../action';
import '../action';
import '../epic/task';
import List from '../../util/immutable-list';
import '../../util/either';

var api = createReducer({
  //$FlowIssue
  [API.NEW_REQUEST]: (state, payload, meta) => state.set(meta.id, Object.assign({}, payload, { timestamp: new Date(payload.timestamp) })),
  //$FlowIssue
  [API.DONE_REQUEST]: (state, payload, meta) => {
    var matcher = {
      Right(data) {
        // console.log('data', data)
        var { value } = data;
        var linked = value.ids.linked;
        if (linked && state.has(linked)) state.get(linked).netReq.deferFinal.resolve(value.data);
      },
      Left(data) {
        // console.log('data l', data)
        var { value } = data;
        var linked = value.ids.linked;
        if (linked && state.has(linked)) state.get(linked).netReq.deferFinal.reject(value.data);
      }
    };
    if (Array.isArray(payload.messages)) {
      for (var _iterator = payload.messages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var _message = _ref;

        _message.matchWith(matcher);
      }
    }return state; //.delete(meta.id)
  }
}, List.empty());

var reducer = combineReducers({
  api
});

export default reducer;
//# sourceMappingURL=request.js.map