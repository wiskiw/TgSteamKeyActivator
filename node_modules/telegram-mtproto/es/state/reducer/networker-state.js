import { combineReducers } from 'redux';
import { createReducer } from 'redux-act';
import { uniq, without, append, assoc, dissoc } from 'ramda';

import { NETWORKER_STATE, AUTH, NET, API } from '../action';
import '../epic/task';
import List from '../../util/immutable-list';
import { NetMessage } from '../../service/networker/net-message';
import { convertToUint8Array, convertToArrayBuffer, sha1BytesSync } from '../../bin';
import { indexed } from '../../util/indexed-reducer';

var requestMap = createReducer({
  //$FlowIssue
  [NETWORKER_STATE.SENT.ADD]: (state, payload) => typeof payload.requestID === 'string' ? assoc(payload.msg_id, payload.requestID, state) : state
  //$ FlowIssue
  // [API.DONE_REQUEST]: (state: {[key: string]: string}, { messages }: TaskEndData) =>
  //   messages.reduce((acc: {[key: string]: string}, val) => {
  //     const id = val.merge().ids.req
  //     const field = acc[id]
  //     if (field != null) {
  //       return dissoc(id, acc)
  //     }
  //     return acc
  //   }, state)
}, {});

var resend = createReducer({
  //$FlowIssue
  [NETWORKER_STATE.RESEND.ADD]: (state, payload) => uniq([...state, ...payload]),
  //$FlowIssue
  [NETWORKER_STATE.RESEND.DEL]: (state, payload) => without(payload, state)
}, []);

var sent = createReducer({
  //$FlowIssue
  [NETWORKER_STATE.SENT.ADD]: (state, payload) => state.set(payload.uid, payload),
  //$FlowIssue
  [NETWORKER_STATE.SENT.DEL]: (state, payload) => payload.reduce((acc, val) => acc.delete(val.uid), state)
}, List.empty());

var pending = createReducer({
  //$FlowIssue
  [NETWORKER_STATE.PENDING.ADD]: (state, payload) => uniq([...state, ...payload]),
  //$FlowIssue
  [NETWORKER_STATE.PENDING.DEL]: (state, payload) => without(payload, state)
}, []);

var authKey = createReducer({
  //$FlowIssue
  [AUTH.SET_AUTH_KEY]: (state, payload) => payload
}, []);

var authKeyUint8 = createReducer({
  //$FlowIssue
  [AUTH.SET_AUTH_KEY]: (state, payload) => convertToUint8Array(payload)
}, new Uint8Array([]));

var authKeyBuffer = createReducer({
  //$FlowIssue
  [AUTH.SET_AUTH_KEY]: (state, payload) => convertToArrayBuffer(payload)
}, new ArrayBuffer(0));

var authKeyID = createReducer({
  //$FlowIssue
  [AUTH.SET_AUTH_KEY]: (state, payload) => sha1BytesSync(payload).slice(-8)
}, []);

var authSubKey = combineReducers({
  authKeyUint8,
  authKeyBuffer,
  authKeyID
});

var salt = createReducer({
  //$FlowIssue
  [AUTH.SET_SERVER_SALT]: (state, payload) => payload
}, []);

var session = createReducer({
  //$FlowIssue
  [AUTH.SET_SESSION_ID]: (state, payload) => payload
}, []);

var sessionHistory = createReducer({
  //$FlowIssue
  [AUTH.SET_SESSION_ID]: (state, payload) => append(payload, state)
}, []);

var dc = createReducer({
  //$FlowIssue
  [NET.SEND]: (state, payload) => payload.thread.threadID
}, '');

var connectionInited = createReducer({}, false);

var seq = createReducer({}, 1);

var reducer = indexed('networker')({
  seq,
  connectionInited,
  dc,
  resend,
  sent,
  pending,
  authKey,
  authSubKey,
  salt,
  session,
  sessionHistory,
  requestMap
});

export default reducer;
//# sourceMappingURL=networker-state.js.map