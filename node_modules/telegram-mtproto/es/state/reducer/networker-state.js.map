{"version":3,"sources":["../../../src/state/reducer/networker-state.js"],"names":["combineReducers","createReducer","uniq","without","append","assoc","dissoc","NETWORKER_STATE","AUTH","NET","API","List","NetMessage","convertToUint8Array","convertToArrayBuffer","sha1BytesSync","indexed","requestMap","SENT","ADD","state","payload","requestID","msg_id","resend","RESEND","DEL","sent","set","uid","reduce","acc","val","delete","empty","pending","PENDING","authKey","SET_AUTH_KEY","authKeyUint8","Uint8Array","authKeyBuffer","ArrayBuffer","authKeyID","slice","authSubKey","salt","SET_SERVER_SALT","session","SET_SESSION_ID","sessionHistory","dc","SEND","thread","threadID","connectionInited","seq","reducer"],"mappings":"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","file":"networker-state.js","sourcesContent":["//@flow\n\nimport { combineReducers } from 'redux'\nimport { createReducer } from 'redux-act'\nimport { uniq, without, append, assoc, dissoc } from 'ramda'\n\nimport { NETWORKER_STATE, AUTH, NET, API } from '../action'\nimport { type TaskEndData } from '../epic/task'\nimport List from '../../util/immutable-list'\nimport { NetMessage } from '../../service/networker/net-message'\nimport { convertToUint8Array, convertToArrayBuffer, sha1BytesSync } from '../../bin'\nimport { indexed } from '../../util/indexed-reducer'\n\n\nconst requestMap = createReducer({\n  //$FlowIssue\n  [NETWORKER_STATE.SENT.ADD]: (state: {[key: string]: string}, payload: NetMessage) =>\n    typeof payload.requestID === 'string'\n      ? assoc(payload.msg_id, payload.requestID, state)\n      : state,\n  //$ FlowIssue\n  // [API.DONE_REQUEST]: (state: {[key: string]: string}, { messages }: TaskEndData) =>\n  //   messages.reduce((acc: {[key: string]: string}, val) => {\n  //     const id = val.merge().ids.req\n  //     const field = acc[id]\n  //     if (field != null) {\n  //       return dissoc(id, acc)\n  //     }\n  //     return acc\n  //   }, state)\n}, {})\n\nconst resend = createReducer({\n  //$FlowIssue\n  [NETWORKER_STATE.RESEND.ADD]: (state: string[], payload: string[]) =>\n    uniq([...state, ...payload]),\n  //$FlowIssue\n  [NETWORKER_STATE.RESEND.DEL]: (state: string[], payload: string[]) =>\n    without(payload, state),\n}, [])\n\nconst sent = createReducer({\n  //$FlowIssue\n  [NETWORKER_STATE.SENT.ADD]: (state: List<NetMessage, string>, payload: NetMessage) =>\n    state.set(payload.uid, payload),\n  //$FlowIssue\n  [NETWORKER_STATE.SENT.DEL]: (state: List<NetMessage, string>, payload: NetMessage[]) =>\n    payload.reduce((acc, val) => acc.delete(val.uid), state),\n}, List.empty())\n\nconst pending = createReducer({\n  //$FlowIssue\n  [NETWORKER_STATE.PENDING.ADD]: (state: string[], payload: string[]) =>\n    uniq([...state, ...payload]),\n  //$FlowIssue\n  [NETWORKER_STATE.PENDING.DEL]: (state: string[], payload: string[]) =>\n    without(payload, state),\n}, [])\n\nconst authKey = createReducer({\n  //$FlowIssue\n  [AUTH.SET_AUTH_KEY]: (state: number[], payload: number[]) => payload,\n}, [])\n\nconst authKeyUint8 = createReducer({\n  //$FlowIssue\n  [AUTH.SET_AUTH_KEY]: (state: Uint8Array, payload: number[]) => convertToUint8Array(payload),\n}, new Uint8Array([]))\n\nconst authKeyBuffer = createReducer({\n  //$FlowIssue\n  [AUTH.SET_AUTH_KEY]: (state: ArrayBuffer, payload: number[]) => convertToArrayBuffer(payload),\n}, new ArrayBuffer(0))\n\nconst authKeyID = createReducer({\n  //$FlowIssue\n  [AUTH.SET_AUTH_KEY]: (state: number[], payload: number[]) => sha1BytesSync(payload).slice(-8),\n}, [])\n\nconst authSubKey = combineReducers({\n  authKeyUint8,\n  authKeyBuffer,\n  authKeyID,\n})\n\nconst salt = createReducer({\n  //$FlowIssue\n  [AUTH.SET_SERVER_SALT]: (state: number[], payload: number[]) => payload,\n}, [])\n\nconst session = createReducer({\n  //$FlowIssue\n  [AUTH.SET_SESSION_ID]: (state: number[], payload: number[]) => payload,\n}, [])\n\nconst sessionHistory = createReducer({\n  //$FlowIssue\n  [AUTH.SET_SESSION_ID]: (state: number[][], payload: number[]) => append(payload, state),\n}, [])\n\nconst dc = createReducer({\n  //$FlowIssue\n  [NET.SEND]: (state: string, payload): string =>\n    payload.thread.threadID\n}, '')\n\n\nconst connectionInited = createReducer({\n\n}, false)\n\nconst seq = createReducer({\n\n}, 1)\n\nconst reducer = indexed('networker')({\n  seq,\n  connectionInited,\n  dc,\n  resend,\n  sent,\n  pending,\n  authKey,\n  authSubKey,\n  salt,\n  session,\n  sessionHistory,\n  requestMap,\n})\n\nexport default reducer\n"]}