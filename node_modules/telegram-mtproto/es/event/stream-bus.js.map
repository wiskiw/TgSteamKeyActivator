{"version":3,"sources":["../../src/event/stream-bus.js"],"names":["from","of","Config","makeEventStream","onRpcError","isMigrateError","getMigrateDc","isFileMigrateError","getFileMigrateDc","ApiRequest","NetworkerThread","NetMessage","MTError","RpcError","dcStoreKeys","Logger","log","createStreamBus","ctx","emitter","rootEmitter","uid","bus","makeStreamMap","responseRaw","observe","incomingMessage","state","val","networker","threads","get","threadID","message","_","dcID","newNetworker","set","messageIn","apiOnly","filter","value","isAPI","mtOnly","messages","msg_id","rpcResult","data","sentMessage","deferred","resolve","result","delete","requestID","req","requests","defer","rpcError","isAuthRestart","error","code","type","newDc","has","req_msg_id","reject","msg","options","dc","api","invokeNetRequest","storage","authKey","saltKey","networkerDC","remove","doAuth","reqId","thread","authBegin","nearest","newSession","messageID","applyServerSalt","server_salt","ackMessage","processMessageAck","first_msg_id","repeatRequest","map","awaitPromises","values","debounce","mergeConcurrently","untypedMessage","noAuth","apiReq","an","pushMessageCast","responseRawCast","incomingMessageCast","newNetworkerCast","rpcResultCast","untypedMessageCast","newRequestCast","messageInCast","newSessionCast","noAuthCast","getter","pushMessage","changeRpcError","newRequest","streamMap","raw","changed"],"mappings":"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","file":"stream-bus.js","sourcesContent":["//@flow\n\nimport type { EventEmitterType } from 'eventemitter2'\nimport { from, of } from 'most'\n\nimport Config from '../config-provider'\nimport { makeEventStream } from './make-event-stream'\n\nimport type { MTProto } from '../service/main'\nimport type { RpcRawError } from './rpc'\nimport {\n  onRpcError,\n  isMigrateError,\n  getMigrateDc,\n  isFileMigrateError,\n  getFileMigrateDc\n} from './rpc'\nimport ApiRequest from '../service/main/request'\nimport NetworkerThread from '../service/networker'\nimport { NetMessage } from '../service/networker/net-message'\nimport { MTError, RpcError } from '../error'\nimport dcStoreKeys from '../util/dc-store-keys'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`stream-bus`\n\n\nconst createStreamBus = (ctx: MTProto) => {\n  const emitter = Config.rootEmitter(ctx.uid)\n  const bus = makeStreamMap(emitter)\n\n  bus.responseRaw.observe(log('raw response'))\n  // bus.responseRaw.onError(log('raw error'))\n\n  bus.incomingMessage.observe(log('incoming message'))\n\n  const state = ctx.state\n\n  bus.incomingMessage.observe((val) => {\n    // ctx.state.messages.delete(val.message.msg_id)\n    const networker = state.threads.get(val.threadID)\n    if (networker == null) return\n    log('observer', 'type')(val.message._, networker.dcID)\n  })\n\n  bus.newNetworker.observe((networker) => {\n    log('new networker')(networker)\n    state.threads.set(networker.threadID, networker)\n  })\n\n  bus.messageIn.observe(log('message in'))\n\n  const apiOnly = bus.messageIn.filter(value => value.isAPI)\n  const mtOnly = bus.messageIn.filter(value => !value.isAPI)\n\n  apiOnly.observe((val) => {\n    ctx.state.messages.set(val.msg_id, val)\n  })\n  mtOnly.observe((val) => {\n    ctx.state.messages.set(val.msg_id, val)\n  })\n\n  bus.rpcResult.observe(async(data: OnRpcResult) => {\n    log('rpc result')(data)\n    data.sentMessage.deferred.resolve(data.result)\n    ctx.state.messages.delete(data.sentMessage.msg_id)\n    const requestID = data.sentMessage.requestID\n    if (typeof requestID !== 'string') return\n    const req = ctx.state.requests.get(requestID)\n    if (req) {\n      // data.sentMessage.deferred.reject('No such request!')\n      req.defer.resolve(data.result)\n      ctx.state.requests.delete(requestID)\n    }\n  })\n\n  bus.rpcError.observe(log('rpc error'))\n\n  const isAuthRestart = (error: MTError) =>\n    error.code === 500\n    && error.type === 'AUTH_RESTART'\n\n  bus.rpcError.observe(async({ error, ...data }: OnRpcError) => {\n    if (isFileMigrateError(error)) {\n      const newDc = getFileMigrateDc(error)\n      if (typeof newDc !== 'number') throw error\n      if (!ctx.state.messages.has(data.message.req_msg_id)) {\n        data.sentMessage.deferred.reject(error)\n        return log('on file migrate error')(data.message.req_msg_id, 'req_msg_id not found')\n      }\n      const msg = ctx.state.messages.get(data.message.req_msg_id)\n      if (!msg || !msg.requestID || typeof msg.requestID !== 'string') {\n        data.sentMessage.deferred.reject(error)\n        return log('on file migrate error')('msg', msg)\n      }\n      const req = ctx.state.requests.get(msg.requestID)\n      if (!req) {\n        data.sentMessage.deferred.reject(error)\n        return log('on file migrate error')('req', req)\n      }\n      req.options.dc = newDc\n      log('file migrate', 'req')(req)\n      log('on file migrate restart')('before end')\n      await ctx.api.invokeNetRequest(req)\n    } if (isMigrateError(error)) {\n      const newDc = getMigrateDc(error)\n      if (typeof newDc !== 'number') throw error\n      await ctx.storage.set('dc', newDc)\n      if (!ctx.state.messages.has(data.message.req_msg_id)) {\n        data.sentMessage.deferred.reject(error)\n        return log('on migrate error')(data.message.req_msg_id, 'req_msg_id not found')\n      }\n      const msg = ctx.state.messages.get(data.message.req_msg_id)\n      if (!msg || !msg.requestID || typeof msg.requestID !== 'string') {\n        data.sentMessage.deferred.reject(error)\n        return log('on migrate error')('msg', msg)\n      }\n      const req = ctx.state.requests.get(msg.requestID)\n      if (!req) {\n        data.sentMessage.deferred.reject(error)\n        return log('on migrate error')('req', req)\n      }\n      req.options.dc = newDc\n      log('migrate', 'req')(req)\n      log('on migrate restart')('before end')\n      await ctx.api.invokeNetRequest(req)\n    } else if (isAuthRestart(error)) {\n      if (!ctx.state.messages.has(data.message.req_msg_id)) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'auth restart')(data.message.req_msg_id, 'req_msg_id not found')\n      }\n      const msg = ctx.state.messages.get(data.message.req_msg_id)\n      if (!msg || !msg.requestID) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'auth restart')('no requestID msg', msg)\n      }\n      const req = ctx.state.requests.get(msg.requestID)\n      if (!req) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'on auth restart')('no request info', msg)\n      }\n      const { authKey, saltKey } = dcStoreKeys(data.networkerDC)\n      log('on auth restart')(authKey, saltKey)\n      await ctx.storage.remove(authKey, saltKey)\n      log('on auth restart')('before end')\n      await ctx.api.doAuth()\n      await ctx.api.invokeNetRequest(req)\n    } else if (error.code === 401) {\n\n      log('rpc', 'auth key unreg')(data.sentMessage)\n      const reqId = data.sentMessage.requestID\n      if (!reqId) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'auth key unreg')('no requestID msg', data.sentMessage)\n      }\n      const dc = data.sentMessage.dc\n      const req = ctx.state.requests.get(reqId)\n      if (!req || !dc) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'on auth key unreg')('no request info', dc, reqId)\n      }\n\n      // const { authKey, saltKey } = dcStoreKeys(dc)\n      // await ctx.storage.remove(authKey)\n      const thread = ctx.state.threads.get(data.threadID)\n      if (!thread) {\n        data.sentMessage.deferred.reject(error)\n        return log('error', 'on auth key unreg')('no thread', dc, data.threadID)\n      }\n      // thread.connectionInited = false\n      ctx.api.authBegin = false\n      log('on auth key unreg')('before end')\n      const nearest = await ctx.storage.get('nearest_dc')\n      await ctx.storage.set('dc', nearest)\n      // await new Promise(rs => setTimeout(rs, 1e3))\n      req.options.dc = nearest\n      await ctx.api.doAuth()\n      await ctx.api.invokeNetRequest(req)\n    } else {\n      log('rpc', 'unhandled')(data)\n      log('rpc', 'unhandled', 'error')(error)\n      // data.sentMessage.deferred.reject(error)\n    }\n  })\n\n  // bus.netMessage.observe((message) => {\n  //   log('net message')(message)\n  //   const req = ctx.state.messages.get(message.msg_id)\n  //   log('req')(req)\n  // })\n\n  // bus.netMessage.observe(log('new request'))\n\n  bus.newSession.observe(async({\n    threadID,\n    networkerDC,\n    message,\n    messageID\n  }) => {\n    const thread = ctx.state.threads.get(threadID)\n    if (!thread) {\n      log`new session, error, no thread`(threadID, messageID)\n      return\n    }\n    await thread.applyServerSalt(message.server_salt)\n    thread.ackMessage(messageID)\n    thread.processMessageAck(message.first_msg_id)\n\n    log`new session, handled`(messageID, networkerDC)\n\n    const repeatRequest =\n      (req: ApiRequest) =>\n        of(req)\n          .map(ctx.api.invokeNetRequest)\n          .awaitPromises()\n\n    await from(ctx.state.requests.values())\n      .debounce(30)\n      .map(repeatRequest)\n      .mergeConcurrently(1)\n      .observe(log`recurring requests`)\n  })\n\n  bus.untypedMessage.observe(log`untyped`)\n\n  bus.noAuth.observe(async({\n    dc,\n    apiReq,\n    error\n    }: NoAuth) => {\n    // const mainDc  = await ctx.storage.get('dc')\n    // if (dc === mainDc) {\n\n    // } else {\n\n    // }\n  })\n\n  return bus\n}\n\n\nconst an: any = {}\n\nconst pushMessageCast    : PushMessageEvent = an\nconst responseRawCast    : RawEvent<Object> = an\nconst incomingMessageCast: IncomingMessageEvent = an\nconst newNetworkerCast   : NetworkerThread = an\nconst rpcResultCast      : OnRpcResult = an\nconst untypedMessageCast : OnUntypedMessage = an\n\n// const netMessageCast     : MtpCall = an\nconst newRequestCast     : ApiRequest = an\nconst messageInCast      : NetMessage = an\nconst newSessionCast     : OnNewSession = an\nconst noAuthCast         : NoAuth = an\n\nfunction makeStreamMap(emitter: EventEmitterType) {\n  const getter = makeEventStream(emitter)\n\n\n  const pushMessage     = getter('push-message', pushMessageCast)\n  const responseRaw     = getter('response-raw', responseRawCast)\n  const incomingMessage = getter('incoming-message', incomingMessageCast)\n  const newNetworker    = getter('new-networker', newNetworkerCast)\n  const rpcError        = getter('rpc-error', changeRpcError)\n  const rpcResult       = getter('rpc-result', rpcResultCast)\n  const untypedMessage  = getter('untyped-message', untypedMessageCast)\n  // const netMessage      = getter('net-message', netMessageCast)\n  const newRequest      = getter('new-request', newRequestCast)\n  const messageIn       = getter('message-in', messageInCast)\n  const newSession      = getter('new-session', newSessionCast)\n  const noAuth          = getter('no-auth', noAuthCast)\n\n  const streamMap = {\n    pushMessage,\n    responseRaw,\n    incomingMessage,\n    newNetworker,\n    rpcError,\n    untypedMessage,\n    // netMessage,\n    newRequest,\n    messageIn,\n    rpcResult,\n    newSession,\n    noAuth,\n  }\n\n  return streamMap\n}\n\ntype OnRpcResult = {\n  threadID: string,\n  networkerDC: number,\n  message: { _: string, req_msg_id: string, [key: string]: any },\n  sentMessage: NetMessage,\n  result: Object\n}\n\n\ntype OnRpcErrorRaw = {\n  threadID: string,\n  networkerDC: number,\n  error: RpcRawError,\n  sentMessage: NetMessage,\n  message: { _: string, req_msg_id: string, [key: string]: any }\n}\n\ntype OnRpcError = {\n  threadID: string,\n  networkerDC: number,\n  error: RpcError,\n  sentMessage: NetMessage,\n  message: { _: string, req_msg_id: string, [key: string]: any }\n}\n\ntype OnNewSession = {\n  threadID: string,\n  networkerDC: number,\n  message: {\n    _: string,\n    req_msg_id: string,\n    [key: string]: any\n  },\n  messageID: string\n}\n\ntype OnUntypedMessage = {\n  threadID: string,\n  networkerDC: number,\n  message: {\n    _: string,\n    req_msg_id: string,\n    [key: string]: any\n  },\n  messageID: string,\n  sessionID: Uint8Array,\n  result: Object,\n}\n\nfunction changeRpcError({ error, ...raw }: OnRpcErrorRaw): OnRpcError {\n  const changed = onRpcError(error)\n  const result = { ...raw, error: changed }\n  return result\n}\n\n/*type ApiCall = {\n  type: 'api-call',\n  msg_id: string,\n  method: string,\n  params: Object,\n  options: {\n    messageID?: string,\n    dcID?: number\n  }\n}*/\n\n// type MtpCall = {\n//   type: 'mtp-call',\n//   msg_id: string,\n//   method: string,\n//   params: Object,\n//   options: Object\n// }\n\ntype PushMessageEvent = {\n  threadID: string,\n  message: NetMessage\n}\n\ntype IncomingMessageEvent = {\n  threadID: string,\n  message: Object,\n  messageID: string,\n  sessionID: Uint8Array\n}\n\ntype RawEvent<T> = {\n  data: T,\n  status: number,\n  statusText: string\n}\n\ntype NoAuth = {\n  dc: number,\n  apiReq: ApiRequest,\n  error: MTError,\n}\n\n\n\n\nexport default createStreamBus\n"]}