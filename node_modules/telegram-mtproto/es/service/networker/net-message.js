import { forEachObjIndexed } from 'ramda';

import { generateID } from '../time-manager';
import blueDefer from '../../util/defer';


export class NetMessage {
  constructor(uid, seq_no, body) {
    this.acked = false;
    this.container = false;
    this.notContentRelated = false;
    this.createNetworker = false;
    this.longPoll = false;

    this.copyHelper = (value, key) => {
      //$FlowIssue
      this[key] = value;
    };

    this.uid = uid;
    this.msg_id = generateID(uid);
    this.seq_no = seq_no;
    // this.body = body
    Object.defineProperty(this, 'body', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: body
    });
    Object.defineProperty(this, 'deferred', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: blueDefer()
    });
    Object.defineProperty(this, 'copyHelper', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: this.copyHelper
    });
  }
  copyOptions(options) {
    //TODO remove this
    forEachObjIndexed(this.copyHelper, options);
  }

  size() {
    if (this.body instanceof Uint8Array) return this.body.byteLength;else return this.body.length;
    /*
    else if (this.body != null) return this.body.length
    return 0*/
  }
  clone(seq_no, dc /* | '@@home'*/) {
    var copy = new NetMessage(this.uid, seq_no, this.body);
    var result = clone(this, copy, dc);
    return result;
  }
  // toJSON() {
  //   return {
  //     uid      : this.uid,
  //     deferred : this.deferred,
  //     requestID: this.requestID,
  //     noShedule: this.noShedule,

  //   }
  // }
}

export class NetContainer extends NetMessage {
  constructor(uid, seq_no, body, inner) {
    super(uid, seq_no, body);
    this.container = true;
    this.inner = inner;
  }
  clone(seq_no, dc /* | '@@home'*/) {
    var copy = new NetContainer(this.uid, seq_no, this.body, this.inner);
    var result = clone(this, copy, dc);
    return result;
  }
}

function clone(orig, copy, dc) {
  copy.dc = dc;
  copy.isAPI = orig.isAPI;
  copy.notContentRelated = orig.notContentRelated;
  copy.deferred = orig.deferred;
  copy.acked = orig.acked;
  copy.noShedule = orig.noShedule;
  copy.createNetworker = orig.createNetworker;
  copy.dcID = orig.dcID;
  copy.resultType = orig.resultType;
  return copy;
}
//# sourceMappingURL=net-message.js.map