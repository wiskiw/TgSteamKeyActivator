{"version":3,"sources":["../../../src/service/authorizer/index.js"],"names":["Bluebird","blueDefer","immediate","Config","Serialization","Deserialization","random","applyServerTime","tsNow","bytesCmp","bytesToHex","sha1BytesSync","aesEncryptSync","rsaEncrypt","aesDecryptSync","bytesToArrayBuffer","bytesFromHex","bytesXor","generateNonce","bpe","str2bigInt","one","dup","sub_","sub","greater","primeHex","KeyManager","Logger","log","SendPlainReq","TypeWriter","concat","e1","e2","tmpAesKey","serverNonce","newNonce","arr1","arr2","key1","key2","slice","tmpAesIv","arr3","res","minSize","Math","ceil","getTwoPow","arr","Array","fill","unshift","hex","join","leemonTwoPow","reqPqRequest","prepare","dcUrl","reqBox","sendPlainReq","deserializer","getBuffer","response","fetchObject","Auth","uid","publisKeysHex","publicKeysParsed","auth","deferred","nonce","request","mtproto","writer","storeMethod","_","error","Error","reject","server_nonce","pq","fingerprints","server_public_key_fingerprints","key","select","publicKey","p","q","it","common","Crypto","factorize","bytes","stack","mtpSendReqPQ","data","dataBox","storeObject","new_nonce","hash","getBytes","dataWithHash","public_key_fingerprint","fingerprint","encrypted_data","newNonceHash","new_nonce_hash","mtpDecryptServerDhDataAnswer","encrypted_answer","mtpSendReqDhParams","gBytes","g","toString","b","gB","modPow","x","y","m","dhPrime","retry_id","retry","g_b","encryptedData","authKey","gA","authKeyHash","authKeyAux","authKeyID","newNonceHash1","new_nonce_hash1","serverSalt","resolve","newNonceHash2","new_nonce_hash2","mtpSendSetClientDhParams","newNonceHash3","new_nonce_hash3","encryptedAnswer","answerWithHash","answerWithPadding","buffer","dh_prime","g_a","serverTime","server_time","mtpVerifyDhParams","offset","getOffset","localTime","innerLog","dhPrimeHex","dhPrimeLeemon","gALeemon","dhDec","case1","case2","case3","dhSubPow","case4","authChain","then","mtpAuth","dcID","cached","promise","onFail","err","catch"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\n\nimport blueDefer from '../../util/defer'\nimport { immediate } from 'mtproto-shared'\nimport { type PublicKey } from '../main/index.h'\nimport { type Cached as ApiCached } from '../api-manager/index.h'\nimport Config from '../../config-provider'\nimport { Serialization, Deserialization } from '../../tl'\n\nimport random from '../secure-random'\nimport { applyServerTime, tsNow } from '../time-manager'\n\nimport { bytesCmp, bytesToHex, sha1BytesSync,\n  aesEncryptSync, rsaEncrypt, aesDecryptSync, bytesToArrayBuffer,\n  bytesFromHex, bytesXor, generateNonce } from '../../bin'\nimport { bpe, str2bigInt, one,\n  dup, sub_, sub, greater } from '../../vendor/leemon'\n\nimport type { ResPQ, Server_DH_Params, Server_DH_inner_data, Set_client_DH_params_answer } from './index.h'\nimport type { PublicKeyExtended } from '../main/index.h'\nimport primeHex from './prime-hex'\nimport KeyManager from './rsa-keys-manger'\n\nimport Logger from 'mtproto-logger'\n\nconst log = Logger`auth`\n\n// import { ErrorBadResponse } from '../../error'\n\nimport SendPlainReq from './send-plain-req'\nimport { TypeWriter } from '../../tl/type-buffer'\n\nconst concat = (e1, e2) => [...e1, ...e2]\n\nconst tmpAesKey = (serverNonce, newNonce) => {\n  const arr1 = concat(newNonce, serverNonce)\n  const arr2 = concat(serverNonce, newNonce)\n  const key1 = sha1BytesSync(arr1)\n  const key2 = sha1BytesSync(arr2).slice(0, 12)\n  return key1.concat(key2)\n}\n\nconst tmpAesIv = (serverNonce, newNonce: Bytes) => {\n  const arr1 = concat(serverNonce, newNonce)\n  const arr2 = concat(newNonce, newNonce)\n  const arr3 = newNonce.slice(0, 4)\n  const key1 = sha1BytesSync(arr1)\n  const key2 = sha1BytesSync(arr2)\n  const res = key1.slice(12).concat(key2, arr3)\n  return res\n}\n\ntype Defer = {\n  resolve: (res: any) => void,\n  reject: (res: any) => void,\n  promise: Bluebird$Promise<any>\n}\n\ntype Cached = {[id: number]: Defer}\n\ntype Bytes = number[]\n\ntype AuthBasic = {\n  dcID: number,\n  dcUrl: string,\n  nonce: Bytes,\n  deferred: Defer,\n  serverNonce: Uint8Array,\n  pq: Uint8Array,\n  fingerprints: string[],\n  p: Bytes,\n  q: Bytes,\n  publicKey: PublicKeyExtended,\n  newNonce: Bytes,\n  b: Bytes,\n  g: number,\n  gA: any,\n  retry: number,\n  dhPrime: Uint8Array,\n  serverTime: number,\n  localTime: number,\n  tmpAesKey: Bytes,\n  tmpAesIv: Bytes,\n  authKeyID: Bytes,\n  authKey: Bytes,\n  serverSalt: Bytes\n}\n\nconst minSize = Math.ceil(64 / bpe) + 1\n\nconst getTwoPow = () => { //Dirty cheat to count 2^(2048 - 64)\n                          //This number contains 496 zeroes in hex\n  const arr = Array(496)\n    .fill('0')\n  arr.unshift('1')\n  const hex = arr.join('')\n  const res = str2bigInt(hex, 16, minSize)\n  return res\n}\n\nconst leemonTwoPow = getTwoPow()\n\nconst reqPqRequest =\nasync(prepare: () => void, dcUrl: string, reqBox: TypeWriter, sendPlainReq: *): Promise<ResPQ> => {\n  prepare()\n  const deserializer = await sendPlainReq(dcUrl, reqBox.getBuffer())\n  //$FlowIssue\n  const response: ResPQ = deserializer.fetchObject('ResPQ', 'ResPQ')\n  return response\n}\n\nexport function Auth(\n  uid: string,\n  publisKeysHex: PublicKey[],\n  publicKeysParsed: ApiCached<PublicKey>\n) {\n  const sendPlainReq = SendPlainReq(uid)\n  const { prepare, select } = KeyManager(uid, publisKeysHex, publicKeysParsed)\n\n  async function mtpSendReqPQ(auth: AuthBasic) {\n    const deferred = auth.deferred\n    log('Send req_pq')(bytesToHex(auth.nonce))\n\n    const request = new Serialization({ mtproto: true }, uid)\n    const reqBox = request.writer\n    request.storeMethod('req_pq', { nonce: auth.nonce })\n\n\n    /*let deserializer\n    try {\n      await prepare()\n      deserializer = await sendPlainReq(auth.dcUrl, reqBox.getBuffer())\n    } catch (err) {\n      console.error(dTime(), 'req_pq error', err.message)\n      deferred.reject(err)\n      throw err\n    }*/\n    try {\n      const response: ResPQ = await reqPqRequest(prepare, auth.dcUrl, reqBox, sendPlainReq)\n\n      if (response._ !== 'resPQ') {\n        const error = new Error(`[MT] resPQ response invalid: ${response._}`)\n        deferred.reject(error)\n        return Bluebird.reject(error)\n      }\n      if (!bytesCmp(auth.nonce, response.nonce)) {\n        const error = new Error('[MT] resPQ nonce mismatch')\n        deferred.reject(error)\n        return Bluebird.reject(error)\n      }\n      auth.serverNonce = response.server_nonce\n      auth.pq = response.pq\n      auth.fingerprints = response.server_public_key_fingerprints\n\n      log('Got ResPQ')(bytesToHex(auth.serverNonce), bytesToHex(auth.pq), auth.fingerprints)\n\n      const key = select(auth.fingerprints)\n      auth.publicKey = key\n\n      log('PQ factorization start')(auth.pq)\n      const [ p, q, it ] = await Config.common.Crypto.factorize({ bytes: auth.pq })\n\n      auth.p = p\n      auth.q = q\n      log('PQ factorization done')(it)\n    } catch (error) {\n      log('Worker error')(error, error.stack)\n      deferred.reject(error)\n      throw error\n    }\n\n\n    return auth\n  }\n\n  async function mtpSendReqDhParams(auth: AuthBasic) {\n    const deferred = auth.deferred\n\n    auth.newNonce = new Array(32)\n    random(auth.newNonce)\n\n    const data = new Serialization({ mtproto: true }, uid)\n    const dataBox = data.writer\n    data.storeObject({\n      _           : 'p_q_inner_data',\n      pq          : auth.pq,\n      p           : auth.p,\n      q           : auth.q,\n      nonce       : auth.nonce,\n      server_nonce: auth.serverNonce,\n      new_nonce   : auth.newNonce\n    }, 'P_Q_inner_data', 'DECRYPTED_DATA')\n\n    //$FlowIssue\n    const hash: Bytes = data.getBytes()\n    const dataWithHash = sha1BytesSync(dataBox.getBuffer()).concat(hash)\n\n    const request = new Serialization({ mtproto: true }, uid)\n    const reqBox = request.writer\n    request.storeMethod('req_DH_params', {\n      nonce                 : auth.nonce,\n      server_nonce          : auth.serverNonce,\n      p                     : auth.p,\n      q                     : auth.q,\n      public_key_fingerprint: auth.publicKey.fingerprint,\n      encrypted_data        : rsaEncrypt(auth.publicKey, dataWithHash)\n    })\n\n\n    log('afterReqDH')('Send req_DH_params')\n\n    let deserializer\n    try {\n      deserializer = await sendPlainReq(auth.dcUrl, reqBox.getBuffer())\n    } catch (error) {\n      deferred.reject(error)\n      throw error\n    }\n\n    //$FlowIssue\n    const response: Server_DH_Params = deserializer.fetchObject('Server_DH_Params', 'RESPONSE')\n\n    if (response._ !== 'server_DH_params_fail' && response._ !== 'server_DH_params_ok') {\n      const error = new Error(`[MT] Server_DH_Params response invalid: ${  response._}`)\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.nonce, response.nonce)) {\n      const error = new Error('[MT] Server_DH_Params nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\n      const error = new Error('[MT] Server_DH_Params server_nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    if (response._ === 'server_DH_params_fail') {\n      const newNonceHash = sha1BytesSync(auth.newNonce).slice(-16)\n      if (!bytesCmp(newNonceHash, response.new_nonce_hash)) {\n        const error = new Error('[MT] server_DH_params_fail new_nonce_hash mismatch')\n        deferred.reject(error)\n        throw error\n      }\n      const error = new Error('[MT] server_DH_params_fail')\n      deferred.reject(error)\n      throw error\n    }\n\n    // try {\n    mtpDecryptServerDhDataAnswer(auth, response.encrypted_answer)\n    // } catch (e) {\n    //   deferred.reject(e)\n    //   return false\n    // }\n\n    return auth\n  }\n\n  function mtpDecryptServerDhDataAnswer(auth: AuthBasic, encryptedAnswer) {\n    auth.tmpAesKey = tmpAesKey(auth.serverNonce, auth.newNonce)\n    auth.tmpAesIv = tmpAesIv(auth.serverNonce, auth.newNonce)\n\n    const answerWithHash = aesDecryptSync(\n      encryptedAnswer,\n      auth.tmpAesKey,\n      auth.tmpAesIv)\n\n    const hash = answerWithHash.slice(0, 20)\n    const answerWithPadding = answerWithHash.slice(20)\n    const buffer = bytesToArrayBuffer(answerWithPadding)\n\n    const deserializer = new Deserialization(buffer, { mtproto: true }, uid)\n\n    //$FlowIssue\n    const response: Server_DH_inner_data = deserializer.fetchObject('Server_DH_inner_data', 'server_dh')\n\n    if (response._ !== 'server_DH_inner_data')\n      throw new Error(`[MT] server_DH_inner_data response invalid`)\n\n    if (!bytesCmp(auth.nonce, response.nonce))\n      throw new Error('[MT] server_DH_inner_data nonce mismatch')\n\n    if (!bytesCmp(auth.serverNonce, response.server_nonce))\n      throw new Error('[MT] server_DH_inner_data serverNonce mismatch')\n\n    log('DecryptServerDhDataAnswer')('Done decrypting answer')\n    auth.g = response.g\n    auth.dhPrime = response.dh_prime\n    auth.gA = response.g_a\n    auth.serverTime = response.server_time\n    auth.retry = 0\n\n    mtpVerifyDhParams(auth.g, auth.dhPrime, auth.gA)\n\n    const offset = deserializer.getOffset()\n\n    if (!bytesCmp(hash, sha1BytesSync(answerWithPadding.slice(0, offset))))\n      throw new Error('[MT] server_DH_inner_data SHA1-hash mismatch')\n\n    auth.localTime = tsNow()\n    applyServerTime(uid, auth.serverTime, auth.localTime)\n  }\n\n  const innerLog = log('VerifyDhParams')\n\n  function mtpVerifyDhParams(g, dhPrime, gA) {\n    innerLog('begin')\n    const dhPrimeHex = bytesToHex(dhPrime)\n    if (g !== 3 || dhPrimeHex !== primeHex)\n      // The verified value is from https://core.telegram.org/mtproto/security_guidelines\n      throw new Error('[MT] DH params are not verified: unknown dhPrime')\n    innerLog('dhPrime cmp OK')\n\n    const dhPrimeLeemon = str2bigInt(dhPrimeHex, 16, minSize)\n    const gALeemon = str2bigInt(bytesToHex(gA), 16, minSize)\n    const dhDec = dup(dhPrimeLeemon)\n    sub_(dhDec, one)\n    const case1 = !greater(gALeemon, one)\n    const case2 = !greater(dhDec, gALeemon)\n    if (case1)\n      throw new Error('[MT] DH params are not verified: gA <= 1')\n\n    if (case2)\n      throw new Error('[MT] DH params are not verified: gA >= dhPrime - 1')\n    const case3 = !!greater(leemonTwoPow, gALeemon)\n    const dhSubPow = dup(dhPrimeLeemon)\n    sub(dhSubPow, leemonTwoPow)\n    const case4 = !greater(dhSubPow, gALeemon)\n    if (case3)\n      throw new Error('[MT] DH params are not verified: gA < 2^{2048-64}')\n    if (case4)\n      throw new Error('[MT] DH params are not verified: gA > dhPrime - 2^{2048-64}')\n    innerLog('2^{2048-64} < gA < dhPrime-2^{2048-64} OK')\n\n    return true\n  }\n\n  async function mtpSendSetClientDhParams(auth: AuthBasic) {\n    const deferred = auth.deferred\n    const gBytes = bytesFromHex(auth.g.toString(16))\n\n    auth.b = new Array(256)\n    random(auth.b)\n\n    const gB = await Config.common.Crypto.modPow({\n      x: gBytes,\n      y: auth.b,\n      m: auth.dhPrime\n    })\n    const data = new Serialization({ mtproto: true }, uid)\n\n    data.storeObject({\n      _           : 'client_DH_inner_data',\n      nonce       : auth.nonce,\n      server_nonce: auth.serverNonce,\n      retry_id    : [0, auth.retry++],\n      g_b         : gB\n    }, 'Client_DH_Inner_Data', 'client_DH')\n\n    //$FlowIssue\n    const hash: Bytes = data.getBytes()\n    const dataWithHash = sha1BytesSync(data.writer.getBuffer()).concat(hash)\n\n    const encryptedData = aesEncryptSync(dataWithHash, auth.tmpAesKey, auth.tmpAesIv)\n\n    const request = new Serialization({ mtproto: true }, uid)\n\n    request.storeMethod('set_client_DH_params', {\n      nonce         : auth.nonce,\n      server_nonce  : auth.serverNonce,\n      encrypted_data: encryptedData\n    })\n\n    log('onGb')('Send set_client_DH_params')\n\n    const deserializer = await sendPlainReq(auth.dcUrl, request.writer.getBuffer())\n\n    //$FlowIssue\n    const response: Set_client_DH_params_answer = deserializer.fetchObject('Set_client_DH_params_answer', 'client_dh')\n\n    if (response._ != 'dh_gen_ok' && response._ != 'dh_gen_retry' && response._ != 'dh_gen_fail') {\n      const error = new Error(`[MT] Set_client_DH_params_answer response invalid: ${  response._}`)\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.nonce, response.nonce)) {\n      const error = new Error('[MT] Set_client_DH_params_answer nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\n      const error = new Error('[MT] Set_client_DH_params_answer server_nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    const authKey = await Config.common.Crypto.modPow({\n      x: auth.gA,\n      y: auth.b,\n      m: auth.dhPrime\n    })\n\n    const authKeyHash = sha1BytesSync(authKey),\n          authKeyAux = authKeyHash.slice(0, 8),\n          authKeyID = authKeyHash.slice(-8)\n\n    log('Got Set_client_DH_params_answer')(response._)\n    switch (response._) {\n      case 'dh_gen_ok': {\n        const newNonceHash1 = sha1BytesSync(auth.newNonce.concat([1], authKeyAux)).slice(-16)\n\n        if (!bytesCmp(newNonceHash1, response.new_nonce_hash1)) {\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash1 mismatch'))\n          return false\n        }\n\n        const serverSalt = bytesXor(auth.newNonce.slice(0, 8), auth.serverNonce.slice(0, 8))\n        // console.log('Auth successfull!', authKeyID, authKey, serverSalt)\n\n        auth.authKeyID = authKeyID\n        auth.authKey = authKey\n        auth.serverSalt = serverSalt\n\n        deferred.resolve(auth)\n        break\n      }\n      case 'dh_gen_retry': {\n        const newNonceHash2 = sha1BytesSync(auth.newNonce.concat([2], authKeyAux)).slice(-16)\n        if (!bytesCmp(newNonceHash2, response.new_nonce_hash2)) {\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash2 mismatch'))\n          return false\n        }\n\n        return mtpSendSetClientDhParams(auth)\n      }\n      case 'dh_gen_fail': {\n        const newNonceHash3 = sha1BytesSync(auth.newNonce.concat([3], authKeyAux)).slice(-16)\n        if (!bytesCmp(newNonceHash3, response.new_nonce_hash3)) {\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash3 mismatch'))\n          return false\n        }\n\n        deferred.reject(new Error('[MT] Set_client_DH_params_answer fail'))\n        return false\n      }\n    }\n  }\n\n  const authChain = (auth: AuthBasic) =>\n    mtpSendReqPQ(auth)\n      .then(mtpSendReqDhParams)\n      .then(mtpSendSetClientDhParams)\n\n  function mtpAuth(dcID: number, cached: Cached, dcUrl: string) {\n    if (cached[dcID])\n      return cached[dcID].promise\n    log('mtpAuth', 'dcID', 'dcUrl')(dcID, dcUrl)\n    const nonce = generateNonce()\n\n    if (!dcUrl)\n      return Bluebird.reject(\n        new Error(`[MT] No server found for dc ${dcID} url ${dcUrl}`))\n\n    const auth: any = {\n      dcID,\n      dcUrl,\n      nonce,\n      deferred: blueDefer()\n    }\n\n    const onFail = (err: Error) => {\n      log('authChain', 'error')(err)\n      cached[dcID].reject(err)\n      delete cached[dcID]\n      return Bluebird.reject(err)\n    }\n\n    try {\n      immediate(authChain, auth)\n    } catch (err) {\n      return onFail(err)\n    }\n\n    cached[dcID] = auth.deferred\n\n    cached[dcID].promise.catch(onFail)\n\n    return cached[dcID].promise\n  }\n\n  return mtpAuth\n}\nexport default Auth\n"]}