{"version":3,"sources":["../../../src/service/authorizer/send-plain-req.js"],"names":["Bluebird","has","pathEq","allPass","httpClient","ErrorBadResponse","ErrorNotFound","generateID","readLong","readInt","writeLong","writeLongP","writeInt","Config","Serialization","Deserialization","is404","notError","reqOpts","responseType","SendPlain","uid","onlySendPlainReq","requestBuffer","requestLength","byteLength","requestArray","Int32Array","header","headBox","writer","headerBuffer","getBuffer","headerArray","headerLength","resultBuffer","ArrayBuffer","resultArray","set","length","onlySendPlainErr","err","error","emit","reject","onlySendPlainRes","url","req","data","deserializer","mtproto","ctx","typeBuffer","e","status","statusText","sendPlainReq","resolve","then","bytes","post"],"mappings":"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","file":"send-plain-req.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\nimport { type AxiosXHR } from 'axios'\nimport { has, pathEq, allPass } from 'ramda'\n\nimport httpClient from '../../http'\nimport { ErrorBadResponse, ErrorNotFound } from '../../error'\nimport { generateID } from '../time-manager'\nimport { readLong, readInt } from '../../tl/reader'\nimport { writeLong, writeLongP, writeInt } from '../../tl/writer'\nimport Config from '../../config-provider'\nimport { Serialization, Deserialization } from '../../tl'\n\nconst is404 = pathEq(['response', 'status'], 404)\nconst notError = allPass([has('message'), has('type')])\n\nconst reqOpts = {\n  responseType: 'arraybuffer'\n}\n\nconst SendPlain = (uid: string) => {\n  function onlySendPlainReq(requestBuffer: ArrayBuffer) {\n    const requestLength = requestBuffer.byteLength,\n          requestArray = new Int32Array(requestBuffer)\n\n    const header = new Serialization({}, uid)\n    const headBox = header.writer\n\n    writeLongP(headBox, 0, 0, 'auth_key_id') // Auth key\n    writeLong(headBox, generateID(uid), 'msg_id') // Msg_id\n    writeInt(headBox, requestLength, 'request_length')\n\n    const headerBuffer: ArrayBuffer = headBox.getBuffer(),\n          headerArray = new Int32Array(headerBuffer)\n    const headerLength = headerBuffer.byteLength\n\n    const resultBuffer = new ArrayBuffer(headerLength + requestLength),\n          resultArray = new Int32Array(resultBuffer)\n\n    resultArray.set(headerArray)\n    resultArray.set(requestArray, headerArray.length)\n\n    return resultArray\n  }\n\n  const onlySendPlainErr = (err) => {\n    let error\n    switch (true) {\n      case is404(err):\n        error = new ErrorNotFound(err)\n        break\n      case notError(err):\n        error = new ErrorBadResponse('', err)\n        break\n      default:\n        error = err\n    }\n    Config.emit(uid)('response-raw', error)\n    return Bluebird.reject(error)\n  }\n\n  const onlySendPlainRes = (url: string) => (req: AxiosXHR<ArrayBuffer>) => {\n    if (!req.data || !req.data.byteLength) {\n      const error = new ErrorBadResponse(url)\n      Config.emit(uid)('response-raw', error)\n      return Bluebird.reject(error)\n    }\n\n    let deserializer\n    try {\n      deserializer = new Deserialization(req.data, { mtproto: true }, uid)\n      const ctx = deserializer.typeBuffer\n      readLong(ctx, 'auth_key_id')\n      readLong(ctx, 'msg_id')\n      readInt(ctx, 'msg_len')\n    } catch (e) {\n      const error = new ErrorBadResponse(url, e)\n      Config.emit(uid)('response-raw', error)\n      return Bluebird.reject(error)\n    }\n    Config.emit(uid)('response-raw', {\n      data      : req.data,\n      status    : req.status,\n      statusText: req.statusText\n    })\n    return deserializer\n  }\n\n  const sendPlainReq = (url: string, requestBuffer: ArrayBuffer) =>\n    Bluebird\n      .resolve()\n      .then(() => onlySendPlainReq(requestBuffer))\n      .then((bytes) => httpClient.post(url, bytes, reqOpts))\n      .then(onlySendPlainRes(url), onlySendPlainErr)\n\n  return sendPlainReq\n}\n\nexport default SendPlain\n"]}