{"version":3,"sources":["../../../src/service/api-manager/index.js"],"names":["Bluebird","Logger","log","Auth","blueDefer","MTError","DcUrlError","bytesFromHex","bytesToHex","dTime","Config","NetworkerThread","ApiRequest","Observer","subject","API","dispatch","baseDcID","Ln","length","obj","res","ApiManager","constructor","config","uid","cache","uploader","downloader","auth","servers","keysParsed","authPromise","authBegin","currentDc","online","server","api","app","storage","publicKeys","apiConfig","serverConfig","emitter","rootEmitter","on","emit","mtpInvokeApi","bind","invokeNetRequest","mtpGetNetworker","newDc","networkSetter","dc","authKey","serverSalt","networker","appConfig","dcID","Error","akk","ssk","dcUrl","dcMap","authKeyHex","get","serverSaltHex","error","netError","set","doAuth","storedBaseDc","baseDc","opts","createNetworker","nearestDc","wrapApiCall","nearest_dc","this_dc","resolve","err","reject","initConnection","isAnyNetworker","promise","method","params","options","netReq","requestID","NEW_REQUEST","timestamp","Date","now","deferFinal","reqDc","e","defer","data","ctx","Object","keys","console","stack"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`api-manager`\n\nimport Auth from '../authorizer'\n\nimport blueDefer from '../../util/defer'\n\nimport { MTError, DcUrlError } from '../../error'\n\nimport { bytesFromHex, bytesToHex } from '../../bin'\n\nimport { dTime } from 'mtproto-shared'\n\nimport { type Bytes, type LeftOptions, type Cache } from './index.h'\nimport { type PublicKey, type ApiConfig, type StrictConfig, type ServerConfig } from '../main/index.h'\nimport { type Emit, type On } from 'eventemitter2'\nimport { type AsyncStorage } from '../../plugins'\n\nimport Config from '../../config-provider'\nimport NetworkerThread from '../networker'\nimport ApiRequest from '../main/request'\nimport Observer from '../../util/observer'\nimport { subject } from '../../property'\nimport { type HoldSubject } from '../../property'\nimport { API } from '../../state/action'\n\nimport { dispatch } from '../../state/core'\n\nconst baseDcID = 2\n\nconst Ln = (length: number, obj?: *): boolean => {\n  if (obj == null) return false\n  const res = typeof obj.length === 'number' &&\n    obj.length === length\n  return res\n}\n\n\n\nexport class ApiManager {\n  invokeNetRequest: (netReq: ApiRequest) => Promise<mixed>\n  cache: Cache = {\n    uploader  : {},\n    downloader: {},\n    auth      : {},\n    servers   : {},\n    keysParsed: {}\n  }\n  uid: string\n  apiConfig: ApiConfig\n  publicKeys: PublicKey[]\n  storage: AsyncStorage\n  serverConfig: ServerConfig\n  networkFabric: *\n  auth: *\n  on: On\n  emit: Emit\n  authPromise: * = blueDefer()\n  authBegin = false\n  currentDc: number = 2\n  online: boolean = false\n  constructor(config: StrictConfig, uid: string) {\n    const {\n      server,\n      api,\n      app: {\n        storage,\n        publicKeys\n      }\n    } = config\n    this.uid = uid\n    this.apiConfig = api\n    this.publicKeys = publicKeys\n    this.storage = storage\n    this.serverConfig = server\n    const emitter = Config.rootEmitter(this.uid)\n    this.on = emitter.on\n    this.emit = emitter.emit\n    this.auth = Auth(uid, publicKeys, this.cache.keysParsed)\n\n    //$FlowIssue\n    this.mtpInvokeApi = this.mtpInvokeApi.bind(this)\n    this.invokeNetRequest = this.invokeNetRequest.bind(this)\n    //$FlowIssue\n    this.mtpGetNetworker = this.mtpGetNetworker.bind(this)\n\n    // this.updatesManager = UpdatesManager(apiManager, this.TL)\n    // apiManager.updates = this.updatesManager\n    emitter.on('error.303', (newDc: number) => {\n      this.authBegin = false\n      this.currentDc = newDc\n    })\n  }\n  networkSetter(dc: number, authKey: Bytes, serverSalt: Bytes) {\n    const networker = new NetworkerThread({\n      appConfig: this.apiConfig,\n      storage  : this.storage,\n    }, dc, authKey, serverSalt, this.uid)\n    this.cache.downloader[dc] = networker\n    return networker\n  }\n  async mtpGetNetworker(dcID: number) {\n    // const isUpload = options.fileUpload || options.fileDownload\n    // const cache = isUpload\n    //   ? this.cache.uploader\n    //   : this.cache.downloader\n\n    const cache = this.cache.downloader\n    if (!dcID) throw new Error('get Networker without dcID')\n\n    if (typeof cache[dcID] !== 'undefined') return cache[dcID]\n\n    const akk = `dc${  dcID  }_auth_key`\n    const ssk = `dc${  dcID  }_server_salt`\n\n    const dcUrl = Config.dcMap(this.uid, dcID)\n    if (typeof dcUrl !== 'string')\n      throw new DcUrlError(dcID, dcUrl)\n\n    if (cache[dcID]) return cache[dcID]\n\n    const authKeyHex: string = await this.storage.get(akk)\n    let serverSaltHex: string = await this.storage.get(ssk)\n\n    // if (!authKeyHex || !serverSaltHex)\n      // await this.doAuth()\n\n    if (Ln(512, authKeyHex)) {\n      if (!serverSaltHex || serverSaltHex.length !== 16)\n        serverSaltHex = 'AAAAAAAAAAAAAAAA'\n      const authKey = bytesFromHex(authKeyHex)\n      const serverSalt = bytesFromHex(serverSaltHex)\n\n      return this.networkSetter(dcID, authKey, serverSalt)\n    }\n\n    let auth\n    try {\n      auth = await this.auth(dcID, this.cache.auth, dcUrl)\n    } catch (error) {\n      return netError(error)\n    }\n\n    const { authKey, serverSalt } = auth\n\n    await this.storage.set(akk, bytesToHex(authKey))\n    await this.storage.set(ssk, bytesToHex(serverSalt))\n\n    this.emit('base', 'WORK')\n\n    return this.networkSetter(dcID, authKey, serverSalt)\n  }\n  async doAuth() {\n    this.authBegin = true\n    this.emit('base', 'CHECK')\n    try {\n      const storedBaseDc = await this.storage.get('dc')\n      const baseDc = storedBaseDc || baseDcID\n      const opts = {\n        dc             : baseDc,\n        createNetworker: true\n      }\n      const networker = await this.mtpGetNetworker(baseDc)\n      const nearestDc = await networker.wrapApiCall(\n        'help.getNearestDc', {}, opts)\n      const { nearest_dc, this_dc } = nearestDc\n      await this.storage.set('nearest_dc', nearest_dc)\n      if (storedBaseDc == null) {\n        await this.storage.set('dc', this_dc)\n        // if (nearest_dc !== this_dc) await this.mtpGetNetworker(nearest_dc, {\n        //   dcID           : this_dc,\n        //   createNetworker: true\n        // })\n\n      }\n      log(`nearest Dc`, ` this dc`)(nearestDc, this_dc)\n      this.authPromise.resolve()\n    } catch (err) {\n      this.authPromise.reject(err)\n    }\n  }\n  async initConnection() {\n    this.emit('base', 'REQUEST')\n    if (!isAnyNetworker(this)) {\n      if (!this.authBegin)\n        this.doAuth()\n      await this.authPromise.promise\n    }\n  }\n  async mtpInvokeApi(method: string, params: Object = {}, options: LeftOptions = {}) {\n\n    /* const akk = `dc${this.currentDc}_auth_key`\n    if (method === 'auth.sendCode' || method === 'auth.signIn') {\n      const dcKey = await this.storage.get(akk)\n      if (typeof dcKey === 'string' && dcKey.length > 0) alreadyAuthWarning(method)\n    } */\n\n    const netReq = new ApiRequest(\n      { method, params },\n      options,\n      this.invokeNetRequest)\n    // const toPromise = {\n    //   Left : (val) => Bluebird.reject(val),\n    //   Right: (val) => Bluebird.resolve(val),\n    // }\n    // const ok: any = {}\n    // const request = subject(ok)\n    // const obs = requestObserver(netReq, request)\n    // obs.then(debug`obs`)\n    netReq.options.requestID = netReq.requestID\n    // this.emit('new-request', netReq)\n    dispatch(API.NEW_REQUEST({\n      netReq,\n      method,\n      params,\n      timestamp: Date.now(),\n    }, netReq.requestID))\n    // netReq.defer.promise.then(\n    //   val => request.next(val),\n    //   err => request.error(err)\n    // )\n    return netReq.deferFinal.promise\n  }\n\n  async invokeNetRequest(netReq: ApiRequest) {\n    let networker\n\n    let dcID: number\n    try {\n      await this.initConnection()\n\n\n      if (netReq.options.dc) {\n        const reqDc = netReq.options.dc\n        if (typeof reqDc === 'number')\n          dcID = reqDc\n        else if (reqDc === '@@home')\n          dcID = await this.storage.get('dc')\n        else throw new Error(`invokeNetRequest wrong request id ${reqDc}`)\n      } else\n        dcID = await this.storage.get('dc')\n\n      networker = await this.mtpGetNetworker(dcID)\n    } catch (e) {\n      netReq.defer.reject(e)\n      return netReq.defer.promise\n    }\n\n\n\n    // const requestThunk = (waitTime: number): Promise<any> => {\n    //   debug('requestThunk', 'waitTime')(waitTime)\n    //   return delayedCall(req.performRequest, +waitTime * 1e3)\n    // }\n\n    await networker.wrapApiCall(\n      netReq.data.method,\n      netReq.data.params,\n      netReq.options,\n      netReq.requestID)\n\n    // try {\n    //   const result = await networker.wrapApiCall(\n    //     netReq.data.method,\n    //     netReq.data.params,\n    //     netReq.options,\n    //     netReq.requestID)\n    //   netReq.defer.resolve(result)\n    //   return result\n    // } catch (err) {\n    //   if (isRawError(err)) {\n    //     (err: RawErrorStruct)\n    //     log`raw error`(err)\n    //     console.trace('Wrong way!')\n    //     dispatch(API.DONE_REQUEST(err, netReq.requestID))\n    //     return netReq.defer.promise\n    //   }\n    //   const error: MTError = err\n    //   console.error(dTime(), 'Error', error.code, error.type, baseDcID, dcID)\n    //   console.trace('Unhandled performRequest')\n    //   const noAuth = error.code === 401\n    //   if (noAuth) {\n    //     log('performRequest', 'no auth')(dcID)\n    //     this.emit('no-auth', {\n    //       dc    : dcID,\n    //       apiReq: netReq,\n    //       error\n    //     })\n    //   }\n    //   // if (!error)\n    //   //   err = { type: 'ERROR_EMPTY', input: '' }\n    //   // else if (!is(Object, error))\n    //   //   err = { message: error }\n    //   // else err = error\n    //   console.warn(`[rejectPromise] Unhandled error!`, err)\n\n    //   if (!netReq.options.noErrorBox) {\n    //     //TODO weird code. `error` changed after `.reject`?\n\n    //     /*err.input = method\n\n    //     err.stack =\n    //       stack ||\n    //       hasPath(['originalError', 'stack'], error) ||\n    //       error.stack ||\n    //       (new Error()).stack*/\n    //     /*this.emit('error.invoke', error)*/\n    //   }\n    //   netReq.defer.reject(error)\n    // }\n\n    return netReq.defer.promise\n  }\n}\n\n/* type RawErrorStruct = {\n  _: 'rpc_error',\n  error_code: number,\n  error_message: string,\n}\n\nfunction isRawError(val: mixed): boolean %checks {\n  return typeof val === 'object'\n    && val != null\n    && val._ === 'rpc_error'\n    && typeof val.error_code === 'number'\n    && typeof val.error_message === 'string'\n}\n\nfunction requestObserver(netReq: ApiRequest, request: HoldSubject<any>) {\n  const obs = Observer({\n    next(data) {\n      log`obs, next`(data)\n      return data\n    },\n    error(data) {\n      log`obs, error`(data)\n      return request.next(data)\n    },\n    async complete(data) {\n      log`obs, complete`(data)\n      // dispatch(API.DONE_REQUEST(data, netReq.requestID))\n      return data\n    }\n  })(request)\n\n  return obs\n} */\n\nconst isAnyNetworker = (ctx: ApiManager) => Object.keys(ctx.cache.downloader).length > 0\n\nconst netError = error => {\n  console.log('Get networker error', error, error.stack)\n  return Bluebird.reject(error)\n}\n\n/* const alreadyAuthWarning = (method: string) => {\n  const message = `\n!! WARNING !!\nYou call ${method} method at the time when you are already authorized.\nThat will have result in unnecessary re-creation of the session`\n  console.warn(message)\n} */\n"]}