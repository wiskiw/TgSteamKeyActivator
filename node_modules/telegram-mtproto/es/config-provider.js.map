{"version":3,"sources":["../src/config-provider.js"],"names":["uuid","ProviderRegistryError","Layout","cryptoCommon","getCrypto","provider","common","Config","signIn","get","uid","getConfig","set","value","rootEmitter","emit","layer","apiLayer","mtLayer","schema","apiSchema","mtSchema","timerOffset","lastMessageID","dcMap","id","dc","Error","Crypto","config","registerInstance","fullConfig"],"mappings":"AAEA,OAAOA,IAAP,MAAiB,SAAjB;AACA;;AAEA,SAASC,qBAAT,QAAsC,SAAtC;AACA,OAA8B,cAA9B;AACA,OAAiD,eAAjD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AA8BA,IAAMC,WAAqB,EAA3B;;AAEA,IAAMC,2BACDH,YADC,CAAN;;AAIA,IAAMI,SAAS;AACbC,UAAQ;AACNC,SAAMC,GAAD,IAAiBC,UAAUD,GAAV,EAAeF,MAD/B;AAENI,QAAIF,GAAJ,EAAiBG,KAAjB,EAAiC;AAC/BF,gBAAUD,GAAV,EAAeF,MAAf,GAAwBK,KAAxB;AACD;AAJK,GADK;AAObC,eAAcJ,GAAD,IAAiBC,UAAUD,GAAV,EAAeI,WAPhC;AAQbC,QAAcL,GAAD,IAAiBC,UAAUD,GAAV,EAAeK,IARhC;AASbC,SAAa;AACXC,cAAWP,GAAD,IAAiBC,UAAUD,GAAV,EAAeM,KAAf,CAAqBC,QADrC;AAEXC,aAAWR,GAAD,IAAiBC,UAAUD,GAAV,EAAeM,KAAf,CAAqBE;AAFrC,GATA;AAabC,UAAQ;AACNV,SAAYC,GAAD,IAAiBC,UAAUD,GAAV,EAAeS,MADrC;AAENC,eAAYV,GAAD,IAAiBC,UAAUD,GAAV,EAAeS,MAAf,CAAsBC,SAF5C;AAGNC,cAAYX,GAAD,IAAiBC,UAAUD,GAAV,EAAeS,MAAf,CAAsBE;AAH5C,GAbK;AAkBbC,eAAa;AACXb,SAAMC,GAAD,IAAiBC,UAAUD,GAAV,EAAeY,WAD1B;AAEXV,QAAIF,GAAJ,EAAiBG,KAAjB,EAAgC;AAC9BF,gBAAUD,GAAV,EAAeY,WAAf,GAA6BT,KAA7B;AACD;AAJU,GAlBA;AAwBbU,iBAAe;AACbd,SAAMC,GAAD,IAAiBC,UAAUD,GAAV,EAAea,aADxB;AAEbX,QAAIF,GAAJ,EAAiBG,KAAjB,EAA0C;AACxCF,gBAAUD,GAAV,EAAea,aAAf,GAA+BV,KAA/B;AACD;AAJY,GAxBF;AA8BbW,QAAMd,GAAN,EAAmBe,EAAnB,EAA+B;AAC7B,QAAMC,KAAKf,UAAUD,GAAV,EAAec,KAAf,CAAqBf,GAArB,CAAyBgB,EAAzB,CAAX;AACA,QAAI,OAAOC,EAAP,KAAc,QAAlB,EACE,MAAM,IAAIC,KAAJ,CAAW,gBAAeF,EAAG,EAA7B,CAAN;AACF,WAAOC,EAAP;AACD,GAnCY;AAoCbpB;AApCa,CAAf;;AAyCAC,OAAOD,MAAP,CAAcsB,MAAd,GAAuBxB,UAAUG,OAAOD,MAAjB,CAAvB;;AAEA,OAAO,SAASK,SAAT,CAAmBD,GAAnB,EAAgC;AACrC,MAAMmB,SAASxB,SAASK,GAAT,CAAf;AACA,MAAImB,UAAU,IAAd,EAAoB,MAAM,IAAI5B,qBAAJ,CAA0BS,GAA1B,CAAN;AACpB,SAAOmB,MAAP;AACD;;AAED,OAAO,SAASC,gBAAT,CAA0BD,MAA1B,EAAuE;AAC5E,MAAME,+BAEDF,MAFC;AAGJP,iBAAe,CAHX;AAIJC,mBAAe,CAAC,CAAD,EAAI,CAAJ;AAJX,IAAN;AAMAlB,WAAS0B,WAAWrB,GAApB,IAA2BqB,UAA3B;AACD;;AAED,eAAexB,MAAf","file":"config-provider.js","sourcesContent":["//@flow\n\nimport uuid from 'uuid/v4'\n// import isNode from 'detect-node'\n\nimport { ProviderRegistryError } from './error'\nimport { type TLSchema } from './tl/index.h'\nimport { type Emit, type EventEmitterType } from 'eventemitter2'\nimport Layout from './layout'\nimport cryptoCommon from './co-worker/common-provider'\nimport getCrypto from './co-worker'\n\ntype InstanceConfig = {|\n  +uid: string,\n  emit: Emit,\n  +rootEmitter: EventEmitterType,\n  signIn: boolean,\n  +schema: {|\n    apiSchema: TLSchema,\n    mtSchema: TLSchema\n  |},\n  +layer: {|\n    apiLayer: Layout,\n    mtLayer: Layout,\n  |},\n  timerOffset: number,\n  lastMessageID: [number, number],\n  dcMap: Map<number, string>\n|}\n\ntype Provider = {\n  [uid: string]: InstanceConfig\n}\n\ntype InstanceDiff = {\n  timerOffset: number,\n  lastMessageID: [number, number]\n}\n\n\nconst provider: Provider = { }\n\nconst common = {\n  ...cryptoCommon\n}\n\nconst Config = {\n  signIn: {\n    get: (uid: string) => getConfig(uid).signIn,\n    set(uid: string, value: boolean) {\n      getConfig(uid).signIn = value\n    }\n  },\n  rootEmitter: (uid: string) => getConfig(uid).rootEmitter,\n  emit       : (uid: string) => getConfig(uid).emit,\n  layer      : {\n    apiLayer: (uid: string) => getConfig(uid).layer.apiLayer,\n    mtLayer : (uid: string) => getConfig(uid).layer.mtLayer,\n  },\n  schema: {\n    get      : (uid: string) => getConfig(uid).schema,\n    apiSchema: (uid: string) => getConfig(uid).schema.apiSchema,\n    mtSchema : (uid: string) => getConfig(uid).schema.mtSchema,\n  },\n  timerOffset: {\n    get: (uid: string) => getConfig(uid).timerOffset,\n    set(uid: string, value: number) {\n      getConfig(uid).timerOffset = value\n    }\n  },\n  lastMessageID: {\n    get: (uid: string) => getConfig(uid).lastMessageID,\n    set(uid: string, value: [number, number]) {\n      getConfig(uid).lastMessageID = value\n    }\n  },\n  dcMap(uid: string, id: number) {\n    const dc = getConfig(uid).dcMap.get(id)\n    if (typeof dc !== 'string')\n      throw new Error(`Wrong dc id! ${id}`)\n    return dc\n  },\n  common\n}\n\nexport type Common = typeof Config.common;\n\nConfig.common.Crypto = getCrypto(Config.common)\n\nexport function getConfig(uid: string) {\n  const config = provider[uid]\n  if (config == null) throw new ProviderRegistryError(uid)\n  return config\n}\n\nexport function registerInstance(config: $Diff<InstanceConfig, InstanceDiff>) {\n  const fullConfig: InstanceConfig = {\n    //$FlowIssue\n    ...config,\n    timerOffset  : 0,\n    lastMessageID: [0, 0]\n  }\n  provider[fullConfig.uid] = fullConfig\n}\n\nexport default Config\n"]}