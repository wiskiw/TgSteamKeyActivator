{"version":3,"sources":["../../src/tl/index.js"],"names":["TypeWriter","logr","PACKED","Serialization","constructor","mtproto","startMaxLength","uid","writer","maxLength","reset","getBytes","typed","getBytesTyped","getBytesPlain","storeMethod","methodName","params","layer","mtLayer","apiLayer","pred","funcs","get","Error","id","hasFlags","flags","storeObject","param","paramName","name","typeClass","fieldObj","isFlag","typeDefaults","has","isVector","Array","isArray","TypeError","length","entries","i","elem","returns","obj","type","field","substr","itemType","toLowerCase","schema","mtSchema","apiSchema","predicate","isBare","constructorData","charAt","constructors","tlConst","condType","fieldBit","indexOf","split","flagIndex","parseInt","fiags","emitter","wildcard","Deserialization","buffer","override","getter","readInt","typeBuffer","fetchInt","fetchBool","offset","fetchObject","fetchIntBytes","bits","len","bytes","next","fetchRawBytes","ln","byteView","byteLength","fetchPacked","compressed","uncompressed","newDeserializer","fetchVector","constructorCmp","result","push","fallback","typeProps","index","constructorsIndex","schemaFallback","finded","isOverrided","rpc_result","message","fieldName","bit","value","seqSet","emit","getOffset","fetchEnd","isEnd","req_msg_id","sentMessage","resultType","msg_id","seqno","body","e","console","error","stack","_"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport EventEmitter from 'eventemitter2'\n\nimport { uintToInt, intToUint, bytesToHex,\n  gzipUncompress, bytesToArrayBuffer } from '../bin'\n\nimport { dTime } from 'mtproto-shared'\nimport { readLong, readInt, readBytes, readString, readDouble } from './reader'\nimport { writeInt, writeIntBytes, writeBytes, writeDouble,\n  writeBool, writeLong } from './writer'\n\nimport Layout, { getFlags, isSimpleType, getTypeProps } from '../layout'\nimport { TypeBuffer, TypeWriter, getNakedType, getTypeConstruct } from './type-buffer'\nimport Config, { getConfig } from '../config-provider'\nimport type { MsgGetter } from './index.h'\nimport { NetMessage } from '../service/networker/net-message'\n// import writer from '../util/file-log'\n\n// const storeMethodLog = writer('storeMethod')\n// const fetchObjectLog = writer('fetchObject')\n\nimport Logger from 'mtproto-logger'\nconst logr = Logger`tl,read`\n\nconst PACKED = 0x3072cfa1\n\ntype SerialConstruct = {\n  mtproto?: boolean,\n  startMaxLength?: number\n}\n\ntype DConfig = {\n  mtproto?: boolean,\n  override?: *,\n  getter?: MsgGetter\n}\n\nexport class Serialization {\n  writer: TypeWriter = new TypeWriter()\n  uid: string\n  mtproto: boolean\n  apiLayer: Layout\n  mtLayer: Layout\n\n  constructor(\n    {\n      mtproto = false,\n      startMaxLength = 2048 /* 2Kb */\n    }: SerialConstruct,\n    uid: string) {\n\n    this.uid = uid\n\n    this.writer.maxLength = startMaxLength\n\n    this.writer.reset()\n    this.mtproto = mtproto\n  }\n  getBytes: () => number[]\n  getBytes: (typed: false) => number[]\n  getBytes: (typed: true) => Uint8Array\n  getBytes(typed?: boolean) {\n    if (typed)\n      return this.writer.getBytesTyped()\n    else\n      return this.writer.getBytesPlain()\n  }\n\n  storeMethod(methodName: string, params: { [key: string]: * }) {\n    // const logId = storeMethodLog.input({\n    //   methodName,\n    //   params\n    // })\n\n    const layer = this.mtproto\n      ? Config.layer.mtLayer(this.uid)\n      : Config.layer.apiLayer(this.uid)\n    const pred = layer.funcs.get(methodName)\n    if (!pred) throw new Error(`No method name ${methodName} found`)\n\n    writeInt(this.writer,\n             intToUint(`${pred.id}`),\n             `${methodName}[id]`)\n    if (pred.hasFlags) {\n      const flags = getFlags(pred)(params)\n      this.storeObject(flags, '#', `f ${methodName} #flags ${flags}`)\n    }\n    for (const param of pred.params) {\n      const paramName = param.name\n      const typeClass = param.typeClass\n      let fieldObj\n      if (typeof params[paramName] === 'undefined') {\n        if (param.isFlag) continue\n        else if (layer.typeDefaults.has(typeClass))\n          fieldObj = layer.typeDefaults.get(typeClass)\n        else if (isSimpleType(typeClass)) {\n          switch (typeClass) {\n            case 'int': fieldObj = 0; break\n            // case 'long': fieldObj = 0; break\n            case 'string': fieldObj = ' '; break\n            // case 'double': fieldObj = 0; break\n            case 'true': fieldObj = true; break\n            // case 'bytes': fieldObj = [0]; break\n          }\n        }\n        else throw new Error(`Method ${methodName} did not receive required argument ${paramName}`)\n      } else {\n        fieldObj = params[paramName]\n      }\n      if (param.isVector) {\n        if (!Array.isArray(fieldObj))\n          throw new TypeError(`Vector argument ${paramName} in ${methodName} required Array,`  +\n          //$FlowIssue\n          ` got ${fieldObj} ${typeof fieldObj}`)\n        writeInt(this.writer, 0x1cb5c415, `${paramName}[id]`)\n        writeInt(this.writer, fieldObj.length, `${paramName}[count]`)\n        for (const [ i, elem ] of fieldObj.entries())\n          this.storeObject(elem, param.typeClass, `${paramName}[${i}]`)\n      } else\n        this.storeObject(fieldObj, param.typeClass, `f ${methodName}(${paramName})`)\n    }\n    /*let condType\n    let fieldBit\n    for (const param of methodData.params) {\n      let type = param.type\n      if (type.indexOf('?') !== -1) {\n        condType = type.split('?')\n        fieldBit = condType[0].split('.')\n        if (!(params[fieldBit[0]] & 1 << fieldBit[1])) {\n          continue\n        }\n        type = condType[1]\n      }\n      const paramName = param.name\n      const stored = params[paramName]\n      if (!stored)\n        stored = this.emptyOfType(type, schema)\n      if (!stored)\n        throw new Error(`Method ${methodName}.`+\n          ` No value of field ${ param.name } recieved and no Empty of type ${ param.type }`)\n      this.storeObject(stored, type, `f ${methodName}(${paramName})`)\n    }*/\n\n\n    // storeMethodLog.output(logId, {\n    //   pred,\n    //   writer: this.writer\n    // })\n    return pred.returns\n  }\n  /*emptyOfType(ofType, schema: TLSchema) {\n    const resultConstruct = schema.constructors.find(\n      ({ type, predicate }: TLConstruct) =>\n        type === ofType &&\n        predicate.indexOf('Empty') !== -1)\n    return resultConstruct\n      ? { _: resultConstruct.predicate }\n      : null\n  }*/\n  storeObject(obj: *, type: string, field: string) {\n    switch (type) {\n      case '#':\n      case 'int':\n        return writeInt(this.writer, obj, field)\n      case 'long':\n        return writeLong(this.writer, obj, field)\n      case 'int128':\n        return writeIntBytes(this.writer, obj, 128)\n      case 'int256':\n        return writeIntBytes(this.writer, obj, 256)\n      case 'int512':\n        return writeIntBytes(this.writer, obj, 512)\n      case 'string':\n        return writeBytes(this.writer, obj)\n      case 'bytes':\n        return writeBytes(this.writer, obj)\n      case 'double':\n        return writeDouble(this.writer, obj, field)\n      case 'Bool':\n        return writeBool(this.writer, obj, field)\n      case 'true':\n        return\n    }\n\n    if (Array.isArray(obj)) {\n      if (type.substr(0, 6) == 'Vector')\n        writeInt(this.writer, 0x1cb5c415, `${field}[id]`)\n      else if (type.substr(0, 6) != 'vector') {\n        throw new Error(`Invalid vector type ${  type}`)\n      }\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\n      writeInt(this.writer, obj.length, `${field}[count]`)\n      for (let i = 0; i < obj.length; i++) {\n        this.storeObject(obj[i], itemType, `${field  }[${  i  }]`)\n      }\n      return true\n    }\n    else if (type.substr(0, 6).toLowerCase() == 'vector') {\n      throw new Error('Invalid vector object')\n    }\n\n    if (typeof obj !== 'object')\n      throw new Error(`Invalid object for type ${  type}`)\n\n    const schema = this.mtproto\n      ? Config.schema.mtSchema(this.uid)\n      : Config.schema.apiSchema(this.uid)\n\n    const predicate = obj['_']\n    let isBare = false\n    let constructorData = false\n    isBare = type.charAt(0) == '%'\n    if (isBare)\n      type = type.substr(1)\n\n\n    for (const tlConst of schema.constructors) {\n      if (tlConst.predicate == predicate) {\n        constructorData = tlConst\n        break\n      }\n    }\n\n    if (!constructorData)\n      throw new Error(`No predicate ${predicate} found`)\n\n    if (predicate == type)\n      isBare = true\n\n    if (!isBare)\n      writeInt(this.writer,\n               intToUint(constructorData.id),\n               `${field}.${predicate}[id]`)\n\n    let condType\n    let fieldBit\n\n    for (const param of constructorData.params) {\n      type = param.type\n      if (type.indexOf('?') !== -1) {\n        condType = type.split('?')\n        fieldBit = condType[0].split('.')\n        const flagIndex = parseInt(fieldBit[1], 10)\n        if (!(obj.fiags & 1 << flagIndex)) {\n          continue\n        }\n        type = condType[1]\n      }\n\n      this.storeObject(obj[param.name], type, `${field}.${  predicate  }.${  param.name  }`)\n    }\n    if (typeof constructorData === 'boolean')\n      return constructorData\n    return constructorData.type\n  }\n\n}\n\nconst emitter = new EventEmitter({ wildcard: true })\n\nexport class Deserialization {\n  typeBuffer: TypeBuffer\n  override: *\n  mtproto: boolean\n  uid: string\n  emitter: EventEmitter\n  getter: ?MsgGetter\n\n  constructor(\n    buffer: Buffer | ArrayBuffer,\n    {\n      mtproto = false,\n      override = {},\n      getter\n    }: DConfig,\n    uid: string) {\n\n    this.getter = getter\n    this.uid = uid\n    this.override = override\n\n    this.typeBuffer = new TypeBuffer(buffer)\n    this.mtproto = mtproto\n    this.emitter = emitter\n\n    // const fetchObject = this.fetchObject.bind(this)\n\n    // const mock = (type, field) => {\n    //   const logId = fetchObjectLog.input({\n    //     type,\n    //     typeBuffer: this.typeBuffer,\n    //     field\n    //   })\n    //   const result = fetchObject(type, field)\n    //   fetchObjectLog.output(logId, {\n    //     typeBuffer: this.typeBuffer,\n    //     result\n    //   })\n    //   return result\n    // }\n    // this.fetchObject = mock\n  }\n\n  // log('int')(field, i.toString(16), i)\n  readInt = (field: string) =>\n    readInt(this.typeBuffer, field)\n\n  fetchInt(field: string = ''): number {\n    return this.readInt(`${ field }:int`)\n  }\n\n  fetchBool(field: string = '') {\n    const i = this.readInt(`${ field }:bool`)\n    switch (i) {\n      case 0x997275b5: return true\n      case 0xbc799737: return false\n      default: {\n        this.typeBuffer.offset -= 4\n        return this.fetchObject('Object', field)\n      }\n    }\n  }\n  fetchIntBytes(bits: number, field: string = ''): Uint8Array {\n    if (bits % 32)\n      throw new Error(`Invalid bits: ${bits}`)\n\n    const len = bits / 8\n\n    const bytes = this.typeBuffer.next(len)\n\n    logr(`int bytes`)(bytesToHex(bytes), `${ field }:int${  bits}`)\n\n    return bytes\n  }\n\n  fetchRawBytes(len: number | false, field: string = ''): Uint8Array {\n    let ln: number\n    if (typeof len === 'number')\n      ln = len\n    else if (typeof len === 'boolean' && len === false) {\n      ln = this.readInt(`${ field }_length`)\n      if (ln > this.typeBuffer.byteView.byteLength)\n        throw new Error(`Invalid raw bytes length: ${ln}, buffer len: ${this.typeBuffer.byteView.byteLength}`)\n    } else\n      throw new TypeError(`[fetchRawBytes] len must be number or false, get ${typeof len}`)\n    const bytes = this.typeBuffer.next(ln)\n    logr(`raw bytes`)(bytesToHex(bytes), field)\n\n    return bytes\n  }\n\n  fetchPacked(type: string, field: string = '') {\n    const compressed = readBytes( this.typeBuffer, `${field}[packed_string]`)\n    const uncompressed = gzipUncompress(compressed)\n    const buffer = bytesToArrayBuffer(uncompressed)\n    const newDeserializer = new Deserialization(\n      buffer, {\n        mtproto : this.mtproto,\n        override: this.override\n      },\n      this.uid)\n\n    return newDeserializer.fetchObject(type, field)\n  }\n\n  fetchVector(type: string, field: string = '') {\n    // const typeProps = getTypeProps(type)\n    if (type.charAt(0) === 'V') {\n      const constructor = this.readInt(`${field}[id]`)\n      const constructorCmp = uintToInt(constructor)\n\n      if (constructorCmp === PACKED)\n        return this.fetchPacked(type, field)\n      if (constructorCmp !== 0x1cb5c415)\n        throw new Error(`Invalid vector constructor ${constructor}`)\n    }\n    const len = this.readInt(`${field}[count]`)\n    const result = []\n    if (len > 0) {\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\n      for (let i = 0; i < len; i++)\n        result.push(this.fetchObject(itemType, `${field}[${i}]`))\n    }\n\n    return result\n  }\n\n  fetchObject(type: string, field: string = '') {\n\n    switch (type) {\n      case '#':\n      case 'int':\n        return this.fetchInt(field)\n      case 'long':\n        return readLong(this.typeBuffer, field)\n      case 'int128':\n        return this.fetchIntBytes(128, field)\n      case 'int256':\n        return this.fetchIntBytes(256, field)\n      case 'int512':\n        return this.fetchIntBytes(512, field)\n      case 'string':\n        return readString(this.typeBuffer, field)\n      case 'bytes':\n        return readBytes(this.typeBuffer, field)\n      case 'double':\n        return readDouble(this.typeBuffer, field)\n      case 'Bool':\n        return this.fetchBool(field)\n      case 'true':\n        return true\n    }\n    let fallback\n    field = field || type || 'Object'\n\n    // const layer = this.mtproto\n    //   ? mtLayer\n    //   : apiLayer\n    const typeProps = getTypeProps(type)\n    // layer.typesById\n\n    if (typeProps.isVector)\n      return this.fetchVector(type, field)\n\n    const { apiSchema, mtSchema } = Config.schema.get(this.uid)\n\n    const schema = this.mtproto\n      ? mtSchema\n      : apiSchema\n    let predicate = false\n    let constructorData = false\n\n    if (typeProps.isBare)\n      constructorData = getNakedType(type, schema)\n    else {\n      const constructor = this.readInt(`${field}[id]`)\n      const constructorCmp = uintToInt(constructor)\n\n      if (constructorCmp === PACKED)\n        return this.fetchPacked(type, field)\n\n      let index = schema.constructorsIndex\n      if (!index) {\n        schema.constructorsIndex = index = {}\n        for (let i = 0; i < schema.constructors.length; i++)\n          index[schema.constructors[i].id] = i\n      }\n      const i = index[constructorCmp]\n      if (i)\n        constructorData = schema.constructors[i]\n\n      fallback = false\n      if (!constructorData && this.mtproto) {\n        const schemaFallback = apiSchema\n        const finded = getTypeConstruct(constructorCmp, schemaFallback)\n        if (finded) {\n          constructorData = finded\n          delete this.mtproto\n          fallback = true\n        }\n      }\n      if (!constructorData) {\n        throw new Error(`Constructor not found: ${constructor} ${this.fetchInt()} ${this.fetchInt()}`)\n      }\n    }\n\n    predicate = constructorData.predicate\n\n    const result = { '_': predicate }\n\n    const isOverrided =\n      predicate === 'rpc_result' ||\n      predicate === 'message'\n\n    if (this.mtproto && isOverrided) {\n      switch (predicate) {\n        case 'rpc_result': {\n          this.rpc_result(result, `${field}[${predicate}]`)\n          break\n        }\n        case 'message': {\n          this.message(result, `${field}[${predicate}]`)\n          break\n        }\n      }\n    } else {\n      for (const param of constructorData.params) {\n        type = param.type\n        // if (type === '#' && isNil(result.pFlags))\n        //   result.pFlags = {}\n        if (type.indexOf('?') !== -1) {\n          const condType = type.split('?')\n          const fieldBit = condType[0].split('.')\n          const fieldName = fieldBit[0]\n          const bit: any = fieldBit[1]\n          if (!(result[fieldName] & 1 << bit))\n            continue\n          type = condType[1]\n        }\n        const paramName = param.name\n        const value = this.fetchObject(type, `${field}[${predicate}][${paramName}]`)\n\n        result[paramName] = value\n      }\n    }\n\n    if (fallback)\n      this.mtproto = true\n    const { layer: { apiLayer } } = getConfig(this.uid)\n    if (apiLayer.seqSet.has(predicate)) {\n      this.emitter.emit('seq', result)\n    }\n\n    return result\n  }\n\n  getOffset() {\n    return this.typeBuffer.offset\n  }\n\n  fetchEnd() {\n    if (!this.typeBuffer.isEnd())\n      throw new Error('Fetch end with non-empty buffer')\n    return true\n  }\n\n  rpc_result(result: { [key: string]: * }, field: string) {\n    result.req_msg_id = readLong(this.typeBuffer, `${ field }[req_msg_id]`)\n    if (this.getter == null) return result\n    const sentMessage: NetMessage = this.getter(result)\n    const type = sentMessage && sentMessage.resultType || 'Object'\n\n    if (result.req_msg_id && !sentMessage) {\n      // console.warn(dTime(), 'Result for unknown message', result)\n      return\n    }\n    result.result = this.fetchObject(type, `${ field }[result]`)\n      // console.log(dTime(), 'override rpc_result', sentMessage, type, result)\n  }\n\n  message(result: { [key: string]: * }, field: string) {\n    result.msg_id = readLong(this.typeBuffer, `${ field }[msg_id]`)\n    result.seqno = readInt(this.typeBuffer, `${ field }[seqno]`)\n    result.bytes = readInt(this.typeBuffer, `${ field }[bytes]`)\n\n    const offset = this.getOffset()\n\n    try {\n      result.body = this.fetchObject('Object', `${ field }[body]`)\n    } catch (e) {\n      console.error(dTime(), 'parse error', e.message, e.stack)\n      result.body = { _: 'parse_error', error: e }\n    }\n    if (this.typeBuffer.offset != offset + result.bytes) {\n      // console.warn(dTime(), 'set offset', this.offset, offset, result.bytes)\n      // console.log(dTime(), result)\n      this.typeBuffer.offset = offset + result.bytes\n    }\n    // console.log(dTime(), 'override message', result)\n  }\n\n}\n\n\n\nexport { TypeWriter } from './type-buffer'\n\n"]}