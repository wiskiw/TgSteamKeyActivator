'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = getConfig;
exports.registerInstance = registerInstance;

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _error = require('./error');

require('./tl/index.h');

require('eventemitter2');

var _layout = require('./layout');

var _layout2 = _interopRequireDefault(_layout);

var _commonProvider = require('./co-worker/common-provider');

var _commonProvider2 = _interopRequireDefault(_commonProvider);

var _coWorker = require('./co-worker');

var _coWorker2 = _interopRequireDefault(_coWorker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import isNode from 'detect-node'

var provider = {};

var common = Object.assign({}, _commonProvider2.default);

var Config = {
  signIn: {
    get: uid => getConfig(uid).signIn,
    set(uid, value) {
      getConfig(uid).signIn = value;
    }
  },
  rootEmitter: uid => getConfig(uid).rootEmitter,
  emit: uid => getConfig(uid).emit,
  layer: {
    apiLayer: uid => getConfig(uid).layer.apiLayer,
    mtLayer: uid => getConfig(uid).layer.mtLayer
  },
  schema: {
    get: uid => getConfig(uid).schema,
    apiSchema: uid => getConfig(uid).schema.apiSchema,
    mtSchema: uid => getConfig(uid).schema.mtSchema
  },
  timerOffset: {
    get: uid => getConfig(uid).timerOffset,
    set(uid, value) {
      getConfig(uid).timerOffset = value;
    }
  },
  lastMessageID: {
    get: uid => getConfig(uid).lastMessageID,
    set(uid, value) {
      getConfig(uid).lastMessageID = value;
    }
  },
  dcMap(uid, id) {
    var dc = getConfig(uid).dcMap.get(id);
    if (typeof dc !== 'string') throw new Error(`Wrong dc id! ${id}`);
    return dc;
  },
  common
};

Config.common.Crypto = (0, _coWorker2.default)(Config.common);

function getConfig(uid) {
  var config = provider[uid];
  if (config == null) throw new _error.ProviderRegistryError(uid);
  return config;
}

function registerInstance(config) {
  var fullConfig = Object.assign({}, config, {
    timerOffset: 0,
    lastMessageID: [0, 0]
  });
  provider[fullConfig.uid] = fullConfig;
}

exports.default = Config;
//# sourceMappingURL=config-provider.js.map