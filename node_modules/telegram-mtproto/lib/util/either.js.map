{"version":3,"sources":["../../src/util/either.js"],"names":["of","Right","Left","fromNullable","withPred","Result","Either","constructor","inner","Object","defineProperty","value","enumerable","chiral","matchWith","map","fn","mapError","merge","chain","chained","res","getOrElse","defaults","orElse","matcher","Ok","Error","cata","obj","pred","val"],"mappings":";;;;;;QAgEgBA,E,GAAAA,E;QAKAC,K,GAAAA,K;QAIAC,I,GAAAA,I;QAKAC,Y,GAAAA,Y;QAIAC,Q,GAAAA,Q;;AAhFhB;;IAAYC,M;;;;AAQL,MAAMC,MAAN,CAA0B;AAI/BC,cAAYC,KAAZ,EAAyC;AACvCC,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACnCC,aAAYH,KADuB;AAEnCI,kBAAY;AAFuB,KAArC;AAIA,SAAKC,MAAL,GAAc,KAAKC,SAAL,CAAe;AAC3Bb,aAAO,MAAM,OADc;AAE3BC,YAAO,MAAM;AAFc,KAAf,CAAd;AAIA,SAAKS,KAAL,GAAaH,MAAMG,KAAnB;AACD;AACDI,MAAYC,EAAZ,EAA8D;AAC5D,WAAO,IAAIV,MAAJ,CAAW,KAAKE,KAAL,CAAWO,GAAX,CAAeC,EAAf,CAAX,CAAP;AACD;AACDC,WAAgBD,EAAhB,EAAgE;AAC9D,WAAO,IAAIV,MAAJ,CAAW,KAAKE,KAAL,CAAWS,QAAX,CAAoBD,EAApB,CAAX,CAAP;AACD;AACDE,UAAsB;AACpB,WAAO,KAAKV,KAAL,CAAWU,KAAX,EAAP;AACD;AACDC,QAAqBH,EAArB,EAA8F;AAC5F;AACA,QAAMI,UAAwC,KAAKN,SAAL,CAAe;AAC3Db,aAAQoB,GAAD,IAA2BL,GAAGK,IAAIV,KAAP,CADyB;AAE3DT,YAAO,MAAM;AAF8C,KAAf,CAA9C;AAIA,WAAOkB,OAAP;AACD;AACDE,YAAUC,QAAV,EAAkC;AAChC,WAAO,KAAKf,KAAL,CAAWc,SAAX,CAAqBC,QAArB,CAAP;AACD;AACDC,SAAsBR,EAAtB,EAA+F;AAC7F;AACA,QAAMI,UAAyC,KAAKN,SAAL,CAAe;AAC5Db,aAAO,MAAM,IAD+C;AAE5DC,YAAQmB,GAAD,IAA0BL,GAAGK,IAAIV,KAAP;AAF2B,KAAf,CAA/C;AAIA,WAAOS,OAAP;AACD;AACDN,YAAgBW,OAAhB,EAAkE;AAChE,WAAO,KAAKjB,KAAL,CAAWM,SAAX,CAAqB;AAC1BY,UAAOD,QAAQxB,KADW;AAE1B0B,aAAOF,QAAQvB;AAFW,KAArB,CAAP;AAID;AACD0B,OAAWH,OAAX,EAA6D;AAC3D,WAAO,KAAKX,SAAL,CAAeW,OAAf,CAAP;AACD;AAnD8B;;QAApBnB,M,GAAAA,M;AAsDN,SAASN,EAAT,CAAiC6B,GAAjC,EAAkE;AACvE,MAAMrB,QAAQH,OAAOL,EAAP,CAAU6B,GAAV,CAAd;AACA,SAAO,IAAIvB,MAAJ,CAAWE,KAAX,CAAP;AACD;;AAEM,SAASP,KAAT,CAAgC4B,GAAhC,EAAyD;AAC9D,SAAO7B,GAAG6B,GAAH,CAAP;AACD;;AAEM,SAAS3B,IAAT,CAAgC2B,GAAhC,EAA0D;AAC/D,MAAMrB,QAAQH,OAAOsB,KAAP,CAAaE,GAAb,CAAd;AACA,SAAO,IAAIvB,MAAJ,CAAWE,KAAX,CAAP;AACD;;AAEM,SAASL,YAAT,CAA6B0B,GAA7B,EAAsE;AAC3E,SAAO,IAAIvB,MAAJ,CAAWD,OAAOF,YAAP,CAAoB0B,GAApB,CAAX,CAAP;AACD;;AAEM,SAASzB,QAAT,CAAqB0B,IAArB,EAAqCC,GAArC,EAA2D;AAChE,MAAID,KAAKC,GAAL,CAAJ,EAAe;AACb,WAAO9B,MAAM8B,GAAN,CAAP;AACD,GAFD,MAEO;AACL,WAAO7B,KAAK6B,GAAL,CAAP;AACD;AACF;;kBAEc/B,E","file":"either.js","sourcesContent":["//@flow\n\nimport * as Result from 'folktale/result'\nimport { type IResult } from 'folktale/result'\n\nexport interface ResultMatcher<Right, Left, -A, -B> {\n  Right(res: { value: Right }): A,\n  Left(res: { value: Left }): B,\n}\n\nexport class Either<Right, Left> {\n  inner: IResult<Right, Left>\n  chiral: 'Left' | 'Right'\n  value: Right | Left\n  constructor(inner: IResult<Right, Left>) {\n    Object.defineProperty(this, 'inner', {\n      value     : inner,\n      enumerable: false\n    })\n    this.chiral = this.matchWith({\n      Right: () => 'Right',\n      Left : () => 'Left',\n    })\n    this.value = inner.value\n  }\n  map<Right1>(fn: (obj: Right) => Right1): Either<Right1, Left> {\n    return new Either(this.inner.map(fn))\n  }\n  mapError<Left1>(fn: (obj: Left) => Left1): Either<Right, Left1> {\n    return new Either(this.inner.mapError(fn))\n  }\n  merge(): Right | Left {\n    return this.inner.merge()\n  }\n  chain<Right1, Left1>(fn: (obj: Right) => Either<Right1, Left1>): Either<Right1, Left | Left1> {\n    //$FlowIssue\n    const chained: Either<Right1, Left | Left1> = this.matchWith({\n      Right: (res: { value: Right }) => fn(res.value),\n      Left : () => this,\n    })\n    return chained\n  }\n  getOrElse(defaults: Right): Right {\n    return this.inner.getOrElse(defaults)\n  }\n  orElse<Right1, Left1>(fn: (obj: Left) => Either<Right1, Left1>): Either<Right | Right1, Left1> {\n    //$FlowIssue\n    const chained: Either<Right | Right1, Left1> = this.matchWith({\n      Right: () => this,\n      Left : (res: { value: Left }) => fn(res.value),\n    })\n    return chained\n  }\n  matchWith<A, B>(matcher: ResultMatcher<Right, Left, A, B>): A | B {\n    return this.inner.matchWith({\n      Ok   : matcher.Right,\n      Error: matcher.Left,\n    })\n  }\n  cata<A, B>(matcher: ResultMatcher<Right, Left, A, B>): A | B {\n    return this.matchWith(matcher)\n  }\n}\n\nexport function of<Right, -Left: mixed>(obj: Right): Either<Right, Left> {\n  const inner = Result.of(obj)\n  return new Either(inner)\n}\n\nexport function Right<R, -Left: mixed>(obj: R): Either<R, Left> {\n  return of(obj)\n}\n\nexport function Left<-Right: mixed, L>(obj: L): Either<Right, L> {\n  const inner = Result.Error(obj)\n  return new Either(inner)\n}\n\nexport function fromNullable<Right>(obj: ?Right): Either<Right, null | void> {\n  return new Either(Result.fromNullable(obj))\n}\n\nexport function withPred<T>(pred: $Pred<1>, val: T): Either<*, *> {\n  if (pred(val)) {\n    return Right(val)\n  } else {\n    return Left(val)\n  }\n}\n\nexport default of\n"]}