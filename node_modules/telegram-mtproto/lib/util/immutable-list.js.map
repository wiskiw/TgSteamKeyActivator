{"version":3,"sources":["../../src/util/immutable-list.js"],"names":["List","constructor","ids","props","length","idType","Object","defineProperty","value","enumerable","defineProperties","Symbol","iterator","id","has","indexOf","get","set","already","current","makeProperty","delete","update","fn","val","updated","result","map","mapped","reduce","base","acc","empty","of","list","mapper","mapping","_","i","key","toValue","toValueArr","toJSON","configurable","writable","values","Array"],"mappings":"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","file":"immutable-list.js","sourcesContent":["//@flow\n\nimport { dissoc, without, equals } from 'ramda'\n\n//$FlowIssue\ninterface ImmuList<T, Id: string | number> {\n  ids: Id[],\n  $SymbolIterator: Iterator<[Id, T]>,\n  [id: Id]: T,\n}\n\nexport default class List<T, Id: string | number> implements ImmuList<T, Id> {\n  ids: Id[]\n  length: number\n  idType: 'string' | 'number'\n  props: { [id: Id]: Property }\n  $SymbolIterator: Iterator<[Id, T]>\n  constructor(ids: Id[], props: { [id: Id]: Property }) {\n    this.length = ids.length\n    this.ids = ids\n    let idType\n    if (ids.length === 0)\n      idType = 'string'\n    else\n      idType = typeof ids[0]\n    //$FlowIssue\n    Object.defineProperty(this, 'idType', {\n      value     : idType,\n      enumerable: false\n    })\n    Object.defineProperty(this, 'props', {\n      value     : props,\n      enumerable: false\n    })\n    Object.defineProperties(this, props)\n  }\n  //$FlowIssue\n  * [Symbol.iterator]() {\n    for (const id of this.ids)\n      yield ([id, this[id]])\n  }\n  has(id: Id): boolean {\n    return this.ids.indexOf(id) !== -1\n  }\n  get(id: Id): T {\n    //$FlowIssue\n    return this[id]\n  }\n  set(id: Id, value: T): List<T, Id> {\n    const already = this.has(id)\n    let ids\n    if (already) {\n      const current = this.get(id)\n      if (value === current || equals(current, value))\n        return this\n      ids = this.ids\n    } else\n      ids = [...this.ids, id]\n    const props: { [id: Id]: Property } = { ...this.props, [id]: makeProperty(value) }\n    return new List(ids, props)\n  }\n  delete(id: Id): List<T, Id> {\n    if (this.has(id) === false)\n      return this\n    const ids: Id[] = without([id], this.ids)\n    const props: { [id: Id]: Property } = dissoc(id, this.props)\n    return new List(ids, props)\n  }\n  update(id: Id, fn: (val: T) => T): List<T, Id> {\n    const val = this.get(id)\n    const updated = fn(val)\n    const result: List<T, Id> = this.set(id, updated)\n    return result\n  }\n  map<S>(fn: (val: T) => S): List<S, Id> {\n    const ids = this.ids\n    const props: { [id: Id]: Property } = {}\n    for (const id of ids) {\n      const val: T = this.get(id)\n      const mapped: S = fn(val)\n      props[id] = makeProperty(mapped)\n    }\n    return new List(ids, props)\n  }\n  reduce<B>(fn: (acc: B, val: T) => B, base: B): B {\n    //$FlowIssue\n    const result = this.ids.reduce((acc: B, val: Id) => (fn(acc, this[val])), base)\n    return result\n  }\n  static empty<S, Key: string | number>(): List<S, Key> {\n    return new List([], {})\n  }\n  static of<S, Key: string | number>(\n    list: S[],\n    mapper?: (val: S, i: number) => Key): List<S, Key> {\n    const mapping = typeof mapper === 'function'\n      ? mapper\n      : (_, i): $FlowIssue => i\n    const ids: Key[] = list.map(mapping)\n    const props: { [id: Key]: Property } = {}\n    let i = 0\n    for (const key of ids) {\n      const val = list[i++]\n      props[key] = makeProperty(val)\n    }\n    return new List(ids, props)\n  }\n  toValue() {\n    switch (this.idType) {\n      case 'number': return toValueArr(this.ids, this)\n      case 'string': return this\n      default: return this\n    }\n  }\n  toJSON() {\n    return this.toValue()\n  }\n}\n\ntype Property = {\n  value: any,\n  enumerable: true,\n  configurable: false,\n  writable: false,\n}\n\nconst makeProperty = (val: any): Property => ({\n  value       : val,\n  enumerable  : true,\n  configurable: false,\n  writable    : false,\n})\n\n//$FlowIssue\nfunction toValueArr<T>(ids: number[], values: *): T[] {\n  const result = new Array(ids.length)\n  for (const id of ids)\n    result[id] = values[id]\n  return result\n}\n\n"]}