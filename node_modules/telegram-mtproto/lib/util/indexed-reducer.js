'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexedReducer = indexedReducer;
exports.indexed = indexed;

var _redux = require('redux');

var _immutableList = require('./immutable-list');

var _immutableList2 = _interopRequireDefault(_immutableList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function indexedReducer(metaIndexGetter, metaChecker) {
  return function (handlers) {
    var singleReducer = typeof handlers === 'function' ? handlers : (0, _redux.combineReducers)(handlers);
    var wrapHandler = action => val => singleReducer(val, action);
    return function reducer(state = _immutableList2.default.empty(), action) {
      var meta = action.meta;
      if (!metaChecker(meta)) return state;
      var index = metaIndexGetter(meta);
      var subState = state.has(index) ? state : state.set(index, {});
      var newState = subState.update(index, wrapHandler(action));
      return newState;
    };
  };
}

function indexed(metaName) {
  function metaChecker(meta) {
    return typeof meta === 'object' && meta != null && meta._ === metaName;
  }
  function metaIndexGetter(meta) {
    return meta.id;
  }
  return indexedReducer(metaIndexGetter, metaChecker);
}
//# sourceMappingURL=indexed-reducer.js.map