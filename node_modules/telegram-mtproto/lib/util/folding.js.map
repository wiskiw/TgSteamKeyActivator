{"version":3,"sources":["../../src/util/folding.js"],"names":["FutureFold","folding","future","fold","fn","futureFold"],"mappings":";;;;;QAYgBA,U,GAAAA,U;;AAVhB;;AACA;;AAGA,SAASC,OAAT,CAAuBC,MAAvB,EAA2E;AACzE;AACA,MAAMC,OAAoCD,OAAOC,IAAP,6BAA1C;AACA,SAAOA,IAAP;AACD;;AAEM,SAASH,UAAT,CACLI,EADK,EAImC;AACxC,MAAMF,SAAmC,qBAAOE,EAAP,CAAzC;AACA,MAAMC,aAAqDJ,QAAQC,MAAR,CAA3D;AACA,SAAOG,UAAP;AACD;;kBAEcJ,O","file":"folding.js","sourcesContent":["//@flow\n\nimport { Right, Left, Either } from './either'\nimport { Future } from 'fluture'\nimport { type Fluture } from 'fluture'\n\nfunction folding<R, L>(future: Fluture<R, L>): Fluture<Either<R, L>, void> {\n  //$ FlowIssue\n  const fold: Fluture<Either<R, L>, void> = future.fold(Left, Right)\n  return fold\n}\n\nexport function FutureFold<Resolve, Reject>(\n  fn: (rj: (err: Reject) => void,\n       rs: (data: Resolve) => void\n    ) => ((() => void) | void)\n): Fluture<Either<Resolve, Reject>, void> {\n  const future: Fluture<Resolve, Reject> = Future(fn)\n  const futureFold: Fluture<Either<Resolve, Reject>, void> = folding(future)\n  return futureFold\n}\n\nexport default folding\n"]}