{"version":3,"sources":["../../../src/state/action/index.js"],"names":["MAIN","TEST","INIT","SWITCH_ON","ACTIVATED","networkerMeta","_","dc","id","apiMeta","NET","SEND","RECEIVE_RESPONSE","NETWORK_ERROR","AUTH","SET_AUTH_KEY","SET_SERVER_SALT","SET_SESSION_ID","NETWORKER_STATE","RESEND","ADD","DEL","SENT","PENDING","API","NEW_REQUEST","DONE_REQUEST","CALL_TASK","CALL_RESULT"],"mappings":";;;;;;;AAEA;;AAEA;;AACA;;AACA;;;;AACA;;;;AAuCO,IAAMA,sBAAa;AACxBC,QAAW,4BAAc,MAAd,CADa;AAExBC,QAAW,4BAAc,MAAd,CAFa;AAGxBC,aAAW,4BAAc,eAAd,CAHa;AAIxBC,aAAW,4BAAc,oBAAd;AAJa,CAAnB;;AAOP,IAAMC,gBAAgB,CAACC,CAAD,EAASC,EAAT,MAAyB,EAAED,GAAG,WAAL,EAAkBE,IAAID,EAAtB,EAAzB,CAAtB;AACA,IAAME,UAAU,CAACH,CAAD,EAASE,EAAT,MAAyB,EAAEF,GAAG,KAAL,EAAYE,EAAZ,EAAzB,CAAhB;AAQO,IAAME,oBAAW;AACtBC,QAAkB,4BAAc,UAAd,EAA0BN,aAA1B,CADI;AAEtBO,oBAAkB,4BAAc,cAAd,CAFI;AAGtBC,iBAAkB,4BAAc,WAAd;AAHI,CAAjB;;AAYA,IAAMC,sBAAa;AACxBC,gBAAiB,4BAAc,mBAAd,EAAmCV,aAAnC,CADO;AAExBW,mBAAiB,4BAAc,sBAAd,EAAsCX,aAAtC,CAFO;AAGxBY,kBAAiB,4BAAc,qBAAd,EAAqCZ,aAArC;AAHO,CAAnB;;AAqBA,IAAMa,4CAAkC;AAC7CC,UAAQ;AACNC,SAAK,4BAAc,sBAAd,EAAsCf,aAAtC,CADC;AAENgB,SAAK,4BAAc,yBAAd,EAAyChB,aAAzC;AAFC,GADqC;AAK7CiB,QAAM;AACJF,SAAK,4BAAc,oBAAd,EAAoCf,aAApC,CADD;AAEJgB,SAAK,4BAAc,uBAAd,EAAuChB,aAAvC;AAFD,GALuC;AAS7CkB,WAAS;AACPH,SAAK,4BAAc,uBAAd,EAAuCf,aAAvC,CADE;AAEPgB,SAAK,4BAAc,0BAAd,EAA0ChB,aAA1C;AAFE;AAToC,CAAxC;;AAuCA,IAAMmB,oBAAW;AACtBC,eAAc,4BAAc,iBAAd,EAAiChB,OAAjC,CADQ;AAEtBiB,gBAAc,4BAAc,kBAAd,EAAkCjB,OAAlC,CAFQ;AAGtBkB,aAAc,4BAAc,mBAAd,CAHQ;AAItBC,eAAc,4BAAc,oBAAd;AAJQ,CAAjB","file":"index.js","sourcesContent":["//@flow\n\nimport { type AxiosXHR } from 'axios'\n\nimport { NetMessage } from '../../service/networker/net-message'\nimport { NetworkerThread } from '../../service/networker'\nimport ApiRequest from '../../service/main/request'\nimport { type ActionPair } from '../helpers'\nimport { doubleCreator } from '../helpers'\n\n\ntype Main = {\n  TEST: ActionPair<'test', string>,\n  INIT: ActionPair<'init', string>,\n  SWITCH_ON: ActionPair<'module loaded', string>,\n  ACTIVATED: ActionPair<'instance activated', void>,\n}\n\nexport type NetIncomingData = {\n  message: NetMessage,\n  result: {\n    response: Object,\n    messageID: string,\n    sessionID: Uint8Array,\n    seqNo: number\n  },\n  thread: NetworkerThread\n}\n\ntype Net = {\n  SEND: ActionPair<'net/send', {\n    message: NetMessage,\n    options: Object,\n    threadID: string,\n    thread: NetworkerThread,\n    noResponseMsgs: string[],\n  }, NetworkerMeta>,\n  RECEIVE_RESPONSE: ActionPair<'net/response', {\n    message: NetMessage,\n    noResponseMsgs: string[],\n    result: AxiosXHR<ArrayBuffer>,\n    thread: NetworkerThread\n  }>,\n  NETWORK_ERROR: ActionPair<'net/error', any>,\n}\n\nexport const MAIN: Main = {\n  TEST     : doubleCreator('test'),\n  INIT     : doubleCreator('init'),\n  SWITCH_ON: doubleCreator('module loaded'),\n  ACTIVATED: doubleCreator('instance activated'),\n}\n\nconst networkerMeta = (_: any, dc: number) => ({ _: 'networker', id: dc })\nconst apiMeta = (_: any, id: string) => ({ _: 'api', id })\ntype ApiMeta = string\nexport type ApiMetaPL = {\n  _: 'api',\n  id: string,\n}\ntype NetworkerMeta = number\n\nexport const NET: Net = {\n  SEND            : doubleCreator('net/send', networkerMeta),\n  RECEIVE_RESPONSE: doubleCreator('net/response'),\n  NETWORK_ERROR   : doubleCreator('net/error'),\n}\n\ntype Auth = {\n  SET_AUTH_KEY: ActionPair<'auth/auth_key set', number[], NetworkerMeta>,\n  SET_SERVER_SALT: ActionPair<'auth/server_salt set', number[], NetworkerMeta>,\n  SET_SESSION_ID: ActionPair<'auth/session_id set', number[], NetworkerMeta>,\n}\n\nexport const AUTH: Auth = {\n  SET_AUTH_KEY   : doubleCreator('auth/auth_key set', networkerMeta),\n  SET_SERVER_SALT: doubleCreator('auth/server_salt set', networkerMeta),\n  SET_SESSION_ID : doubleCreator('auth/session_id set', networkerMeta),\n}\n\ntype NetworkerState = {\n  RESEND: {\n    ADD: ActionPair<'networker/resend add', string[], NetworkerMeta>,\n    DEL: ActionPair<'networker/resend delete', string[], NetworkerMeta>,\n  },\n  SENT: {\n    ADD: ActionPair<'networker/sent add', NetMessage, NetworkerMeta>,\n    DEL: ActionPair<'networker/sent delete', NetMessage[], NetworkerMeta>,\n  },\n  PENDING: {\n    ADD: ActionPair<'networker/pending add', string[], NetworkerMeta>,\n    DEL: ActionPair<'networker/pending delete', string[], NetworkerMeta>,\n  },\n}\n\nexport const NETWORKER_STATE: NetworkerState = {\n  RESEND: {\n    ADD: doubleCreator('networker/resend add', networkerMeta),\n    DEL: doubleCreator('networker/resend delete', networkerMeta),\n  },\n  SENT: {\n    ADD: doubleCreator('networker/sent add', networkerMeta),\n    DEL: doubleCreator('networker/sent delete', networkerMeta),\n  },\n  PENDING: {\n    ADD: doubleCreator('networker/pending add', networkerMeta),\n    DEL: doubleCreator('networker/pending delete', networkerMeta),\n  },\n}\n\nexport type ApiNewRequest = {\n  netReq: ApiRequest,\n  method: string,\n  params: { [key: string]: mixed },\n  timestamp: number,\n}\n\nexport type ApiCallResult = {\n  message: NetMessage,\n  result: {\n    messageID: string,\n    response: Object,\n    seqNo: number,\n    sessionID: Uint8Array,\n  }\n}\n\ntype Api = {\n  NEW_REQUEST: ActionPair<'api/request new', ApiNewRequest, ApiMeta>,\n  DONE_REQUEST: ActionPair<'api/request done', any, ApiMeta>,\n  CALL_TASK: ActionPair<'api/call-task new', any>,\n  CALL_RESULT: ActionPair<'api/call-task done', ApiCallResult>,\n}\n\nexport const API: Api = {\n  NEW_REQUEST : doubleCreator('api/request new', apiMeta),\n  DONE_REQUEST: doubleCreator('api/request done', apiMeta),\n  CALL_TASK   : doubleCreator('api/call-task new'),\n  CALL_RESULT : doubleCreator('api/call-task done'),\n}\n"]}