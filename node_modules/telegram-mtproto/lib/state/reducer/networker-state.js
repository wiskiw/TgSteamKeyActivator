'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _redux = require('redux');

var _reduxAct = require('redux-act');

var _ramda = require('ramda');

var _action = require('../action');

require('../epic/task');

var _immutableList = require('../../util/immutable-list');

var _immutableList2 = _interopRequireDefault(_immutableList);

var _netMessage = require('../../service/networker/net-message');

var _bin = require('../../bin');

var _indexedReducer = require('../../util/indexed-reducer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var requestMap = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.NETWORKER_STATE.SENT.ADD]: (state, payload) => typeof payload.requestID === 'string' ? (0, _ramda.assoc)(payload.msg_id, payload.requestID, state) : state
  //$ FlowIssue
  // [API.DONE_REQUEST]: (state: {[key: string]: string}, { messages }: TaskEndData) =>
  //   messages.reduce((acc: {[key: string]: string}, val) => {
  //     const id = val.merge().ids.req
  //     const field = acc[id]
  //     if (field != null) {
  //       return dissoc(id, acc)
  //     }
  //     return acc
  //   }, state)
}, {});

var resend = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.NETWORKER_STATE.RESEND.ADD]: (state, payload) => (0, _ramda.uniq)([...state, ...payload]),
  //$FlowIssue
  [_action.NETWORKER_STATE.RESEND.DEL]: (state, payload) => (0, _ramda.without)(payload, state)
}, []);

var sent = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.NETWORKER_STATE.SENT.ADD]: (state, payload) => state.set(payload.uid, payload),
  //$FlowIssue
  [_action.NETWORKER_STATE.SENT.DEL]: (state, payload) => payload.reduce((acc, val) => acc.delete(val.uid), state)
}, _immutableList2.default.empty());

var pending = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.NETWORKER_STATE.PENDING.ADD]: (state, payload) => (0, _ramda.uniq)([...state, ...payload]),
  //$FlowIssue
  [_action.NETWORKER_STATE.PENDING.DEL]: (state, payload) => (0, _ramda.without)(payload, state)
}, []);

var authKey = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.AUTH.SET_AUTH_KEY]: (state, payload) => payload
}, []);

var authKeyUint8 = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.AUTH.SET_AUTH_KEY]: (state, payload) => (0, _bin.convertToUint8Array)(payload)
}, new Uint8Array([]));

var authKeyBuffer = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.AUTH.SET_AUTH_KEY]: (state, payload) => (0, _bin.convertToArrayBuffer)(payload)
}, new ArrayBuffer(0));

var authKeyID = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.AUTH.SET_AUTH_KEY]: (state, payload) => (0, _bin.sha1BytesSync)(payload).slice(-8)
}, []);

var authSubKey = (0, _redux.combineReducers)({
  authKeyUint8,
  authKeyBuffer,
  authKeyID
});

var salt = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.AUTH.SET_SERVER_SALT]: (state, payload) => payload
}, []);

var session = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.AUTH.SET_SESSION_ID]: (state, payload) => payload
}, []);

var sessionHistory = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.AUTH.SET_SESSION_ID]: (state, payload) => (0, _ramda.append)(payload, state)
}, []);

var dc = (0, _reduxAct.createReducer)({
  //$FlowIssue
  [_action.NET.SEND]: (state, payload) => payload.thread.threadID
}, '');

var connectionInited = (0, _reduxAct.createReducer)({}, false);

var seq = (0, _reduxAct.createReducer)({}, 1);

var reducer = (0, _indexedReducer.indexed)('networker')({
  seq,
  connectionInited,
  dc,
  resend,
  sent,
  pending,
  authKey,
  authSubKey,
  salt,
  session,
  sessionHistory,
  requestMap
});

exports.default = reducer;
//# sourceMappingURL=networker-state.js.map