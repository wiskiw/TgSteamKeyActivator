'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onNewTask = exports.onNewRequest = undefined;

var _most = require('most');

var _ramda = require('ramda');

var _mtprotoLogger = require('mtproto-logger');

var _mtprotoLogger2 = _interopRequireDefault(_mtprotoLogger);

var _action = require('../action');

var _netMessage = require('../../service/networker/net-message');

var _encryptedMessage = require('../../service/chain/encrypted-message');

var _configProvider = require('../../config-provider');

var _configProvider2 = _interopRequireDefault(_configProvider);

var _index = require('../../service/networker/index');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../tl/index');

var _http = require('../../http');

var _signal = require('../signal');

var _jsonError = require('../../util/json-error');

var _jsonError2 = _interopRequireDefault(_jsonError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var log = _mtprotoLogger2.default`net-request`;

// import ApiRequest from '../../service/main/request'

function makeApiBytes({ message, thread }) {
  return (0, _encryptedMessage.apiMessage)({
    ctx: new _index3.Serialization({ startMaxLength: message.body.length + 64 }, thread.uid).writer,
    serverSalt: thread.serverSalt,
    sessionID: thread.sessionID,
    message
  });
}

function encryptedBytes(opts) {
  return (0, _encryptedMessage.encryptApiBytes)({
    bytes: makeApiBytes(opts),
    authKey: opts.thread.authKeyUint8
  });
}

// process.on('unhandledRejection', val => {
//   console.log(val)
//   console.trace('on')
// })

var onNewRequest = exports.onNewRequest = action => action.thru(_action.API.NEW_REQUEST.stream).thru(_signal.whenActive).combine((data, homeDc) => Object.assign({}, data, { homeDc }), _signal.homeDc).combine((data, uid) => Object.assign({}, data, { uid }), _signal.uid).skipRepeatsWith((old, fresh) => (0, _ramda.equals)(old.payload, fresh.payload)).map(_action.API.CALL_TASK);

var onNewTask = exports.onNewTask = action => action.thru(_action.API.CALL_TASK.stream).thru(_signal.whenActive).map(({ payload }) => payload)
// .delay(50)
.tap(val => val.payload.netReq.invoke()).filter(() => false);

var netRequest = action => action.thru(_action.NET.SEND.stream).thru(_signal.whenActive).map(({ payload }) => payload).map((() => {
  var _ref = _asyncToGenerator(function* (_ref2) {
    var { options } = _ref2,
        data = _objectWithoutProperties(_ref2, ['options']);

    return Object.assign({}, data, {
      options: Object.assign({
        responseType: 'arraybuffer'
      }, options),
      data: yield encryptedBytes(data)
    });
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})()).thru(_most.awaitPromises).map((_ref3) => {
  var { data } = _ref3,
      opts = _objectWithoutProperties(_ref3, ['data']);

  return Object.assign({}, data, opts);
}).map((_ref4) => {
  var { encryptedBytes, thread, msgKey } = _ref4,
      rest = _objectWithoutProperties(_ref4, ['encryptedBytes', 'thread', 'msgKey']);

  var request = new _index3.Serialization({
    startMaxLength: encryptedBytes.byteLength + 256
  }, thread.uid).writer;

  var mtBytes = (0, _encryptedMessage.mtMessage)({
    ctx: request,
    authKeyID: thread.authKeyID,
    msgKey,
    encryptedBytes
  });
  var url = _configProvider2.default.dcMap(thread.uid, thread.dcID);
  return Object.assign({ thread, mtBytes, url }, rest);
}).map((() => {
  var _ref5 = _asyncToGenerator(function* ({ options, mtBytes, message, thread, noResponseMsgs, url }) {
    return {
      message,
      thread,
      noResponseMsgs,
      result: yield _http.httpClient.post(url, mtBytes, options)
    };
  });

  return function (_x2) {
    return _ref5.apply(this, arguments);
  };
})()).thru(_most.awaitPromises).map(_action.NET.RECEIVE_RESPONSE).recoverWith(err => (0, _most.of)(_action.NET.NETWORK_ERROR((0, _jsonError2.default)(err))).delay(15));

exports.default = netRequest;
//# sourceMappingURL=net-request.js.map