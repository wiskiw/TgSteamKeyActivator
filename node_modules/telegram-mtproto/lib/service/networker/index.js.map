{"version":3,"sources":["../../../src/service/networker/index.js"],"names":["log","updatesProcessor","iii","akStopped","storeIntString","writer","value","field","Error","NetworkerThread","constructor","appConfig","storage","dc","authKey","serverSalt","uid","threadID","pendingAcks","state","connectionInited","checkConnectionPeriod","lastServerMessages","checkLongPollCond","longPoll","pendingTime","offline","checkLongPollAfterDcCond","isClean","baseDc","dcID","upload","sleepAfter","checkLongPoll","cleanupSent","get","sendLongPool","performSheduledRequest","resolve","nextReq","length","ackMsgIDs","ack","push","wrapMtpMessage","_","msg_ids","notContentRelated","noShedule","performResend","messages","message","messagesByteLen","lengthOverflow","singlesCount","logGroup","group","pendingIds","pendingIterator","messageID","deletePending","hasSent","getSent","messageByteLength","size","cond1","cond2","singleInRequest","PENDING","DEL","map","msg","emit","isAPI","serializer","mtproto","params","max_delay","wait_after","max_wait","storeMethod","netMessage","generateSeqNo","getBytes","writePollTime","noResponseMsgs","container","startMaxLength","contBox","innerMessages","noResponseMessages","msg_id","seq_no","noResponse","groupEnd","addSent","sheduleRequest","SEND","options","thread","getMsgById","req_msg_id","processMessageAck","sentMessage","acked","body","emitter","rootEmitter","SET_AUTH_KEY","authKeyUint8","authKeyBuffer","authKeyID","slice","wrapApiCall","bind","SET_SERVER_SALT","updateSession","setInterval","seqNo","prevSessionID","sessionID","Array","SET_SESSION_ID","updateSentMessage","sentMessageID","newInner","inner","innerID","innerSentMessage","SENT","deleteSent","newId","ADD","wrapMtpCall","method","pushMessage","deferred","promise","object","storeObject","isAcks","verifyInnerMessages","requestID","serialBox","mapper","afterMessageID","resultType","copyOptions","setPending","Object","pushResend","delay","checkConnection","toggleOffline","enabled","undefined","cancel","nextReqPromise","checkConnectionPromise","parseInt","Math","min","onOnlineCb","Date","now","then","hasResends","resendMsgIDs","getResends","resendOpts","lastResendReq","resend_msg_ids","requestPerformer","response","processMessage","sentDel","msgID","max","sqrt","error","console","noRespPending","noRespSent","reject","parseResponse","responseBuffer","msgKey","encryptedData","reader","authKeyStored","dataWithPadding","hashData","buffer","currentSession","prevSession","deserializerOptions","getter","applyServerSalt","newServerSalt","set","ackMessage","reqResendMessage","addResend","notEmpty","sentIterator","complete","hasPending","isFinite","TypeError","msgidInt","warn","bad_msg_id","bad_msg_seqno","new_server_salt","error_code","badMessage","indexOf","shift","networkerDC","forEach","answer_msg_id","spliceCond","resendDel","badMsgID","deleteResent","RESEND","result","startAll","stopAll","setUpdatesProcessor","callback","Set"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport Bluebird from 'bluebird'\r\nimport uuid from 'uuid/v4'\r\n\r\nimport { is, contains, mapObjIndexed } from 'ramda'\r\n\r\nimport { tsNow, generateID, applyServerTime } from '../time-manager'\r\nimport random from '../secure-random'\r\nimport { NetMessage, NetContainer } from './net-message'\r\nimport State from './state'\r\nimport { smartTimeout, immediate } from 'mtproto-shared'\r\n\r\nimport { Serialization, Deserialization } from '../../tl'\r\nimport { readResponse, getDataWithPad, readHash, parsedResponse } from '../chain/parse-response'\r\nimport { writeInnerMessage } from '../chain/perform-request'\r\nimport Config from '../../config-provider'\r\n\r\nimport Logger from 'mtproto-logger'\r\n\r\nconst log = Logger`networker`\r\n\r\nimport {\r\n  convertToUint8Array,\r\n  convertToArrayBuffer,\r\n  sha1BytesSync,\r\n  bytesToHex,\r\n  longToBytes,\r\n  rshift32\r\n} from '../../bin'\r\n\r\nimport type { AsyncStorage } from '../../plugins/index.h'\r\nimport { TypeWriter } from '../../tl'\r\nimport { writeInt, writeBytes, writeLong } from '../../tl/writer'\r\nimport type { Emit } from 'eventemitter2'\r\n\r\nimport LongPoll from '../../plugins/long-poll'\r\nimport { NET, NETWORKER_STATE, AUTH } from '../../state/action'\r\n\r\nimport { dispatch } from '../../state/core'\r\n\r\nlet updatesProcessor: *\r\nlet iii = 0\r\nlet akStopped = false\r\n\r\n//eslint-disable-next-line\r\n// const xhrSendBuffer = !isNode && !('ArrayBufferView' in window)\r\n\r\ntype NetOptions = {\r\n  fileUpload?: boolean,\r\n  fileDownload?: boolean,\r\n  notContentRelated?: boolean,\r\n  afterMessageID?: string,\r\n  resultType?: string,\r\n  messageID?: string\r\n}\r\ntype Bytes = number[]\r\n\r\ntype ContextConfig = {\r\n  storage: AsyncStorage,\r\n  appConfig: { [key: string]: mixed }\r\n}\r\n\r\nconst storeIntString = (writer: TypeWriter) => (value: number | string, field: string) => {\r\n  switch (typeof value) {\r\n    case 'string': return writeBytes(writer, value)\r\n    case 'number': return writeInt(writer, value, field)\r\n    default: throw new Error(`tl storeIntString field ${field} value type ${typeof value}`)\r\n  }\r\n}\r\n\r\nexport class NetworkerThread {\r\n  threadID: string = uuid()\r\n  uid: string\r\n  dcID: number\r\n  authKey: Bytes\r\n  authKeyUint8: Uint8Array\r\n  authKeyBuffer: ArrayBuffer\r\n  serverSalt: number[]\r\n  iii: number\r\n  authKeyID: Bytes\r\n  upload: boolean\r\n  pendingAcks: string[] = []\r\n  seqNo: number\r\n  sessionID: Bytes\r\n  prevSessionID: Bytes\r\n  state = new State\r\n  connectionInited = false\r\n  checkConnectionPeriod = 0\r\n  checkConnectionPromise: Promise<mixed>\r\n  emit: Emit\r\n  lastServerMessages: string[] = []\r\n  offline: boolean\r\n  storage: AsyncStorage\r\n  longPoll: LongPoll\r\n  onOnlineCb: Function\r\n  nextReq: number\r\n  appConfig: { [key: string]: mixed }\r\n  nextReqPromise: Promise<mixed>\r\n  lastResendReq: Promise<mixed>\r\n  constructor({\r\n    appConfig,\r\n    storage\r\n    }: ContextConfig,\r\n              dc: number,\r\n              authKey: Bytes,\r\n              serverSalt: number[],\r\n              uid: string) {\r\n    this.uid = uid\r\n    this.appConfig = appConfig\r\n    this.storage = storage\r\n    const emitter = Config.rootEmitter(this.uid)\r\n    this.emit = emitter.emit\r\n    this.dcID = dc\r\n    this.iii = iii++\r\n\r\n    this.longPoll = new LongPoll(this)\r\n    dispatch(AUTH.SET_AUTH_KEY(authKey, this.dcID))\r\n    this.authKey = authKey\r\n    this.authKeyUint8 = convertToUint8Array(authKey)\r\n    this.authKeyBuffer = convertToArrayBuffer(authKey)\r\n    this.authKeyID = sha1BytesSync(authKey).slice(-8)\r\n\r\n    //$FlowIssue\r\n    this.wrapApiCall = this.wrapApiCall.bind(this)\r\n\r\n    // this.checkLongPollCond = this.checkLongPollCond.bind(this)\r\n    this.serverSalt = serverSalt\r\n    dispatch(AUTH.SET_SERVER_SALT(serverSalt, this.dcID))\r\n\r\n    this.upload = false //options.fileUpload || options.fileDownload || false\r\n\r\n    emitter.emit('new-networker', this)\r\n\r\n    this.updateSession()\r\n\r\n    setInterval(this.checkLongPoll, 10000) //NOTE make configurable interval\r\n    this.checkLongPoll()\r\n  }\r\n  updateSession() {\r\n    this.seqNo = 0\r\n    this.prevSessionID = this.sessionID\r\n    this.sessionID = new Array(8)\r\n    random(this.sessionID)\r\n    dispatch(AUTH.SET_SESSION_ID(this.sessionID, this.dcID))\r\n  }\r\n\r\n  updateSentMessage(sentMessageID: string) {\r\n    if (!this.state.hasSent(sentMessageID)) return false\r\n    const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n    if (sentMessage instanceof NetContainer) {\r\n      const newInner = []\r\n      for (const innerID of sentMessage.inner) {\r\n        const innerSentMessage = this.updateSentMessage(innerID)\r\n        if (innerSentMessage)\r\n          newInner.push(innerSentMessage.msg_id)\r\n      }\r\n      sentMessage.inner = newInner\r\n    }\r\n    dispatch(NETWORKER_STATE.SENT.DEL([sentMessage], this.dcID))\r\n    this.state.deleteSent(sentMessage)\r\n    const newId = generateID(this.uid)\r\n    sentMessage.msg_id = newId\r\n    sentMessage.seq_no = this.generateSeqNo(\r\n      sentMessage.notContentRelated ||\r\n      sentMessage.container\r\n    )\r\n    this.state.addSent(sentMessage)\r\n    dispatch(NETWORKER_STATE.SENT.ADD(sentMessage, this.dcID))\r\n    return sentMessage\r\n  }\r\n\r\n  generateSeqNo(notContentRelated?: boolean) {\r\n    let seqNo = this.seqNo * 2\r\n\r\n    if (!notContentRelated) {\r\n      seqNo++\r\n      this.seqNo++\r\n    }\r\n\r\n    return seqNo\r\n  }\r\n\r\n  wrapMtpCall(method: string, params: Object, options: NetOptions) {\r\n    const serializer = new Serialization({ mtproto: true }, this.uid)\r\n\r\n    serializer.storeMethod(method, params)\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    const logGroup = log.group('Wrap mtp call')\r\n    logGroup`Call method, msg_id, seqNo`(method, message.msg_id, seqNo)\r\n    logGroup`Call method, params`(params)\r\n    logGroup.groupEnd()\r\n    this.pushMessage(message, options)\r\n    // this.emit('net-message', {\r\n    //   type  : 'mtp-call',\r\n    //   msg_id: message.msg_id,\r\n    //   message,\r\n    //   method,\r\n    //   params,\r\n    //   options\r\n    // })\r\n    return message.deferred.promise\r\n  }\r\n\r\n  wrapMtpMessage(object: Object, options: NetOptions = {}) {\r\n\r\n    const serializer = new Serialization({ mtproto: true }, this.uid)\r\n    serializer.storeObject(object, 'Object', 'wrap_message')\r\n\r\n    const seqNo = this.generateSeqNo(options.notContentRelated)\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n\r\n    const logGroup = log.group('Wrap mtp message')\r\n    const isAcks = object._ === 'msgs_ack'\r\n    logGroup`MT message, msg_id, seqNo`(message.msg_id, seqNo)\r\n    logGroup`MT message, result`(object)\r\n    logGroup`is acks`(isAcks)\r\n    logGroup.groupEnd()\r\n    verifyInnerMessages(object.msg_ids)\r\n    this.pushMessage(message, options)\r\n    // this.emit('net-message', {\r\n    //   type  : 'mtp-message',\r\n    //   msg_id: message.msg_id,\r\n    //   message,\r\n    //   object,\r\n    //   options\r\n    // })\r\n    return message\r\n  }\r\n\r\n  wrapApiCall(\r\n    method: string,\r\n    params: { [key: string]: mixed } = {},\r\n    options: Object,\r\n    requestID: ?string = null\r\n  ): Bluebird<any> {\r\n    const serializer = new Serialization(options, this.uid)\r\n    const serialBox = serializer.writer\r\n    if (!this.connectionInited) {\r\n      // serializer.storeInt(0xda9b0d0d, 'invokeWithLayer')\r\n      // serializer.storeInt(Config.Schema.API.layer, 'layer')\r\n      // serializer.storeInt(0x69796de9, 'initConnection')\r\n      // serializer.storeInt(Config.App.id, 'api_id')\r\n      // serializer.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\r\n      // serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version')\r\n      // serializer.storeString(Config.App.version, 'app_version')\r\n      // serializer.storeString(navigator.language || 'en', 'lang_code')\r\n      const mapper = storeIntString(serialBox)\r\n      mapObjIndexed(mapper, this.appConfig)\r\n    }\r\n\r\n    if (options.afterMessageID) {\r\n      writeInt(serialBox, 0xcb9f372d, 'invokeAfterMsg')\r\n      writeLong(serialBox, options.afterMessageID, 'msg_id')\r\n    }\r\n\r\n    options.resultType = serializer.storeMethod(method, params)\r\n\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    message.isAPI = true\r\n    message.requestID = requestID\r\n    log(`Api call`)(method)\r\n    log(`|      |`, `msg_id`, `seqNo`)(message.msg_id, seqNo)\r\n    log(`|      |`, `params`)(params)\r\n    log(`|      |`, `options`)(options)\r\n    this.pushMessage(message, options)\r\n    // this.emit('net-message', {\r\n    //   type  : 'api-call',\r\n    //   msg_id: message.msg_id,\r\n    //   message,\r\n    //   method,\r\n    //   params,\r\n    //   options\r\n    // })\r\n    return message.deferred.promise\r\n  }\r\n\r\n  checkLongPollCond = () =>\r\n    this.longPoll.pendingTime > tsNow() ||\r\n    !!this.offline ||\r\n    akStopped\r\n\r\n  checkLongPollAfterDcCond = (isClean: boolean, baseDc: number) => isClean && (\r\n    this.dcID !== baseDc ||\r\n    this.upload ||\r\n    this.sleepAfter &&\r\n    this.sleepAfter < tsNow()\r\n  )\r\n\r\n  checkLongPoll = async() => {\r\n    const isClean = this.cleanupSent()\r\n    if (this.checkLongPollCond())\r\n      return false\r\n\r\n    const baseDc: number = await this.storage.get('dc')\r\n    if (this.checkLongPollAfterDcCond(isClean, baseDc))\r\n    // console.warn(dTime(), 'Send long-poll for DC is delayed', this.dcID, this.sleepAfter)\r\n      return\r\n    return this.longPoll.sendLongPool()\r\n  }\r\n\r\n  pushMessage(message: NetMessage, options: NetOptions = {}) {\r\n    message.copyOptions(options)\r\n    dispatch(NETWORKER_STATE.SENT.ADD(message, this.dcID))\r\n    dispatch(NETWORKER_STATE.PENDING.ADD([message.msg_id], this.dcID))\r\n    this.emit('push-message', {\r\n      threadID: this.threadID,\r\n      message,\r\n      options\r\n    })\r\n    this.state.addSent(message)\r\n    this.state.setPending(message.msg_id)\r\n\r\n    if (!options.noShedule)\r\n      this.sheduleRequest()\r\n    if (is(Object, options))\r\n      options.messageID = message.msg_id\r\n  }\r\n\r\n  pushResend(messageID: string, delay: number = 0) {\r\n    const value = tsNow() + delay\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage instanceof NetContainer) {\r\n      for (const msg of sentMessage.inner) {\r\n        this.state.setPending(msg, value)\r\n      }\r\n      dispatch(NETWORKER_STATE.PENDING.ADD(sentMessage.inner, this.dcID))\r\n    } else {\r\n      dispatch(NETWORKER_STATE.PENDING.ADD([messageID], this.dcID))\r\n      this.state.setPending(messageID, value)\r\n    }\r\n    this.sheduleRequest(delay)\r\n  }\r\n\r\n\r\n\r\n  async checkConnection() { }\r\n\r\n  toggleOffline(enabled: boolean) {\r\n    // console.log('toggle ', enabled, this.dcID, this.iii)\r\n    if (!this.offline !== undefined && this.offline == enabled)\r\n      return false\r\n\r\n    this.offline = enabled\r\n\r\n    if (this.offline) {\r\n      smartTimeout.cancel(this.nextReqPromise)\r\n      delete this.nextReq\r\n\r\n      if (this.checkConnectionPeriod < 1.5)\r\n        this.checkConnectionPeriod = 0\r\n\r\n\r\n      this.checkConnectionPromise = smartTimeout(\r\n        this.checkConnection, parseInt(this.checkConnectionPeriod * 1000))\r\n      this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\r\n\r\n      this.onOnlineCb = this.checkConnection\r\n      this.emit('net.offline', this.onOnlineCb)\r\n    } else {\r\n      this.longPoll.pendingTime = Date.now()\r\n      //NOTE check long state was here\r\n      this.checkLongPoll().then(() => {})\r\n      this.sheduleRequest()\r\n\r\n      if (this.onOnlineCb)\r\n        this.emit('net.online', this.onOnlineCb)\r\n\r\n      smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    }\r\n  }\r\n  performResend() {\r\n    if (this.state.hasResends()) {\r\n      const resendMsgIDs = [...this.state.getResends()]\r\n      const resendOpts = { noShedule: true, notContentRelated: true }\r\n        // console.log('resendReq messages', resendMsgIDs)\r\n      const msg = this.wrapMtpMessage({\r\n        _      : 'msg_resend_req',\r\n        msg_ids: resendMsgIDs\r\n      }, resendOpts)\r\n      this.lastResendReq = { req_msg_id: msg.msg_id, resend_msg_ids: resendMsgIDs }\r\n    }\r\n  }\r\n  performSheduledRequest = () => { //TODO extract huge method\r\n    // console.log(dTime(), 'sheduled', this.dcID, this.iii)\r\n    if (this.offline || akStopped) {\r\n      log(`Cancel sheduled`)(``)\r\n      return Bluebird.resolve(false)\r\n    }\r\n    delete this.nextReq\r\n    if (this.pendingAcks.length) {\r\n      const ackMsgIDs = []\r\n      for (const ack of this.pendingAcks)\r\n        ackMsgIDs.push(ack)\r\n      log('acking messages')(ackMsgIDs)\r\n      this.wrapMtpMessage({\r\n          _      : 'msgs_ack',\r\n          msg_ids: ackMsgIDs\r\n      }, {\r\n          notContentRelated: true,\r\n          noShedule        : true\r\n      }) //TODO WTF Why we make wrapped message and doesnt use it?\r\n        // const res = await msg.deferred.promise\r\n        // log(`AWAITED`, `ack`)(res)\r\n    }\r\n\r\n    this.performResend()\r\n\r\n    const messages = []\r\n    let message: NetMessage\r\n    let messagesByteLen = 0\r\n      // const currentTime = tsNow()\r\n    let lengthOverflow = false\r\n    let singlesCount = 0\r\n    const logGroup = log.group('perform sheduled request')\r\n    const pendingIds = []\r\n    for (const [messageID, value] of this.state.pendingIterator()) {\r\n      if (value && value < tsNow()) continue\r\n      this.state.deletePending(messageID)\r\n      pendingIds.push(messageID)\r\n      if (!this.state.hasSent(messageID)) continue\r\n      message = this.state.getSent(messageID)\r\n      logGroup('message')(message)\r\n      logGroup('messageID, value' )(messageID, value)\r\n      const messageByteLength = message.size() + 32\r\n      const cond1 = !message.notContentRelated && lengthOverflow\r\n      const cond2 = !message.notContentRelated &&\r\n        messagesByteLen + messageByteLength > 655360 // 640 Kb\r\n      if (cond1) continue\r\n      if (cond2) {\r\n        lengthOverflow = true\r\n        continue\r\n      }\r\n      if (message.singleInRequest) {\r\n        singlesCount++\r\n        if (singlesCount > 1) continue\r\n      }\r\n      messages.push(message)\r\n      messagesByteLen += messageByteLength\r\n    }\r\n    dispatch(NETWORKER_STATE.PENDING.DEL(pendingIds, this.dcID))\r\n    logGroup('message, final')(message)\r\n    logGroup('messages')(messages)\r\n    messages.map(msg => this.emit('message-in', msg))\r\n\r\n    if (!message) return Bluebird.resolve(false)\r\n\r\n    if (message.isAPI && !message.longPoll) {\r\n      const serializer = new Serialization({ mtproto: true }, this.uid)\r\n      const params = {\r\n        max_delay : 1000,\r\n        wait_after: 550,\r\n        max_wait  : 3000\r\n      }\r\n      serializer.storeMethod('http_wait', params)\r\n      const netMessage = new NetMessage(\r\n        this.uid,\r\n        this.generateSeqNo(),\r\n        serializer.getBytes()\r\n      )\r\n      this.longPoll.writePollTime()\r\n      // this.emit('net-message', {\r\n      //   type   : 'mtp-call',\r\n      //   msg_id : netMessage.msg_id,\r\n      //   message: netMessage,\r\n      //   method : 'http_wait',\r\n      //   params,\r\n      //   options: {}\r\n      // })\r\n      messages.push(netMessage)\r\n    }\r\n\r\n    if (!messages.length) {\r\n      // console.log('no sheduled messages')\r\n      return Bluebird.resolve()\r\n    }\r\n\r\n    let noResponseMsgs = []\r\n\r\n    if (messages.length > 1) {\r\n      const container = new Serialization({ mtproto: true, startMaxLength: messagesByteLen + 64 }, this.uid)\r\n      const contBox = container.writer\r\n      writeInt(contBox, 0x73f1f8dc, 'CONTAINER[id]')\r\n      writeInt(contBox, messages.length, 'CONTAINER[count]')\r\n\r\n      const {\r\n        innerMessages,\r\n        noResponseMessages\r\n      } = writeInnerMessage({\r\n        writer: contBox,\r\n        messages\r\n      })\r\n      noResponseMsgs = noResponseMessages\r\n\r\n      message = new NetContainer(\r\n        this.uid,\r\n        this.generateSeqNo(true),\r\n        container.getBytes(true),\r\n        innerMessages)\r\n\r\n      logGroup(`Container`)(innerMessages,\r\n                            noResponseMessages,\r\n                            message.msg_id,\r\n                            message.seq_no)\r\n\r\n    } else {\r\n      if (message.noResponse)\r\n        noResponseMsgs.push(message.msg_id)\r\n    }\r\n    logGroup.groupEnd()\r\n    this.state.addSent(message)\r\n\r\n    this.pendingAcks = [] //TODO WTF,he just clear and forget them at all?!?\r\n    if (lengthOverflow || singlesCount > 1) this.sheduleRequest()\r\n    dispatch(NET.SEND({\r\n      message,\r\n      options : {},\r\n      threadID: this.threadID,\r\n      thread  : this,\r\n      noResponseMsgs,\r\n    }, this.dcID))\r\n    return\r\n  }\r\n\r\n\r\n  async requestPerformer(message: NetMessage, noResponseMsgs: string[], response: *) {\r\n    try {\r\n      this.toggleOffline(false)\r\n      // const response = await this.parseResponse(result.data)\r\n      log(`Server response`, `dc${this.dcID}`)(response)\r\n      log(`message`)(message)\r\n\r\n      await this.processMessage(\r\n        response.response,\r\n        response.messageID,\r\n        response.sessionID)\r\n      const sentDel = []\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          sentDel.push(msg)\r\n          this.state.deleteSent(msg)\r\n          msg.deferred.resolve()\r\n        }\r\n      dispatch(NETWORKER_STATE.SENT.DEL(sentDel, this.dcID))\r\n      this.checkConnectionPeriod = Math.max(1.1, Math.sqrt(this.checkConnectionPeriod))\r\n\r\n      //return\r\n      this.checkLongPoll() //TODO Bluebird warning here\r\n    } catch (error) {\r\n      console.log('Encrypted request failed', error)\r\n      const noRespPending: string[] = []\r\n      const noRespSent: NetMessage[] = []\r\n      if (message instanceof NetContainer) {\r\n        for (const msgID of message.inner) {\r\n          this.state.setPending(msgID)\r\n        }\r\n        noRespSent.push(message)\r\n        dispatch(NETWORKER_STATE.PENDING.ADD(message.inner, this.dcID))\r\n        this.state.deleteSent(message)\r\n      } else {\r\n        dispatch(NETWORKER_STATE.PENDING.ADD([message.msg_id], this.dcID))\r\n        this.state.setPending(message.msg_id)\r\n      }\r\n\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          noRespPending.push(msgID)\r\n          noRespSent.push(msg)\r\n          this.state.deleteSent(msg)\r\n          this.state.deletePending(msgID)\r\n          msg.deferred.reject()\r\n        }\r\n      dispatch(NETWORKER_STATE.SENT.DEL(noRespSent, this.dcID))\r\n      dispatch(NETWORKER_STATE.PENDING.DEL(noRespPending, this.dcID))\r\n      this.toggleOffline(true)\r\n      return Bluebird.reject(error)\r\n    }\r\n  }\r\n\r\n  async parseResponse(responseBuffer: ArrayBuffer): Promise<{\r\n    response: Object,\r\n    messageID: string,\r\n    sessionID: Uint8Array,\r\n    seqNo: number\r\n  }> {\r\n\r\n    const { msgKey, encryptedData } = readResponse({\r\n      reader       : new Deserialization(responseBuffer, {}, this.uid),\r\n      response     : responseBuffer,\r\n      authKeyStored: this.authKeyID\r\n    })\r\n\r\n    const dataWithPadding = await getDataWithPad({\r\n      authKey: this.authKeyUint8,\r\n      msgKey,\r\n      encryptedData\r\n    })\r\n\r\n    const {\r\n      hashData,\r\n      seqNo,\r\n      messageID,\r\n      buffer,\r\n      sessionID\r\n    } = readHash({\r\n      reader        : new Deserialization(dataWithPadding, { mtproto: true }, this.uid),\r\n      currentSession: this.sessionID,\r\n      prevSession   : this.prevSessionID,\r\n      dataWithPadding\r\n    })\r\n\r\n    const deserializerOptions = {\r\n      mtproto: true,\r\n      getter : this.getMsgById\r\n    }\r\n    //$FlowIssue\r\n    const response: Object = await parsedResponse({\r\n      hashData,\r\n      msgKey,\r\n      reader: new Deserialization(buffer, deserializerOptions, this.uid)\r\n    })\r\n\r\n    return {\r\n      response,\r\n      messageID,\r\n      sessionID,\r\n      seqNo\r\n    }\r\n  }\r\n\r\n  getMsgById = ({ req_msg_id }: { req_msg_id: string }) => this.state.getSent(req_msg_id)\r\n\r\n  async applyServerSalt(newServerSalt: string) {\r\n    const serverSalt = longToBytes(newServerSalt)\r\n    await this.storage.set(`dc${ this.dcID }_server_salt`, bytesToHex(serverSalt))\r\n\r\n    dispatch(AUTH.SET_SERVER_SALT(serverSalt, this.dcID))\r\n    this.serverSalt = serverSalt\r\n    return true\r\n  }\r\n\r\n  sheduleRequest(delay: number = 0) {\r\n    if (this.offline) this.checkConnection()\r\n    const nextReq = tsNow() + delay\r\n\r\n    if (delay && this.nextReq && this.nextReq <= nextReq)\r\n      return false\r\n\r\n    // console.log(dTime(), 'shedule req', delay)\r\n    // console.trace()\r\n    smartTimeout.cancel(this.nextReqPromise)\r\n    if (delay > 0)\r\n      this.nextReqPromise = smartTimeout(\r\n        this.performSheduledRequest, delay)\r\n    else\r\n      immediate(this.performSheduledRequest)\r\n\r\n    this.nextReq = nextReq\r\n  }\r\n\r\n  ackMessage(msgID: string) {\r\n    /*console.trace(msgID)\r\n    if (this.pendingAcks.includes(msgID)) {\r\n      debugger\r\n    }*/\r\n    // console.log('ack message', msgID)\r\n    if (contains(msgID, this.pendingAcks)) return\r\n    this.pendingAcks.push(msgID)\r\n    this.sheduleRequest(30000)\r\n  }\r\n\r\n  reqResendMessage(msgID: string) {\r\n    log(`Req resend`)(msgID)\r\n    this.state.addResend(msgID)\r\n    this.sheduleRequest(100)\r\n  }\r\n\r\n  cleanupSent() {\r\n    let notEmpty = false\r\n      // console.log('clean start', this.dcID/*, this.state.sent*/)\r\n    const sentDel = []\r\n    for (const [msgID, message] of this.state.sentIterator()) {\r\n      let complete = true\r\n      if (message.notContentRelated && !this.state.hasPending(msgID)) {\r\n        sentDel.push(message)\r\n        // console.log('clean notContentRelated', msgID)\r\n        this.state.deleteSent(message)\r\n      }\r\n      else if (message instanceof NetContainer) {\r\n        for (const inner of message.inner) {\r\n          if (this.state.hasSent(inner)) {\r\n            // console.log('clean failed, found', msgID, message.inner[i],\r\n            // this.state.getSent(message.inner[i]).seq_no)\r\n            notEmpty = true\r\n            complete = false\r\n            break\r\n          }\r\n        }\r\n        // console.log('clean container', msgID)\r\n        if (complete) {\r\n          sentDel.push(message)\r\n          this.state.deleteSent(message)\r\n        }\r\n      } else\r\n        notEmpty = true\r\n    }\r\n    dispatch(NETWORKER_STATE.SENT.DEL(sentDel, this.dcID))\r\n    return !notEmpty\r\n  }\r\n\r\n  processMessageAck = (messageID: string) => {\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage && !sentMessage.acked) {\r\n      delete sentMessage.body\r\n      sentMessage.acked = true\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  async processMessage(message: *, messageID: string, sessionID: Uint8Array) {\r\n    if (!isFinite(messageID)) {\r\n      throw new TypeError(`Message ID should be finite ${messageID} ${typeof messageID}`)\r\n    }\r\n    const msgidInt = parseInt(messageID, 10)\r\n    if (msgidInt % 2) {\r\n      console.warn('[MT] Server even message id: ', messageID, message)\r\n      return\r\n    }\r\n    this.emit('incoming-message', {\r\n      threadID: this.threadID,\r\n      message,\r\n      messageID,\r\n      sessionID\r\n    })\r\n    switch (message._) {\r\n      case 'msg_container': {\r\n        for (const inner of message.messages)\r\n          await this.processMessage(inner, inner.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'bad_server_salt': {\r\n        log(`Bad server salt`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad server salt for invalid message')\r\n        }\r\n\r\n        await this.applyServerSalt(message.new_server_salt)\r\n        this.pushResend(message.bad_msg_id)\r\n        this.ackMessage(messageID)\r\n        break\r\n      }\r\n      case 'bad_msg_notification': {\r\n        log(`Bad msg notification`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad msg notification for invalid message')\r\n        }\r\n\r\n        if (message.error_code == 16 || message.error_code == 17) {\r\n          if (applyServerTime(\r\n              this.uid,\r\n              rshift32(messageID)\r\n            )) {\r\n            log(`Update session`)()\r\n            this.updateSession()\r\n          }\r\n          const badMessage = this.updateSentMessage(message.bad_msg_id)\r\n          if (badMessage instanceof NetMessage)\r\n            this.pushResend(badMessage.msg_id)\r\n          this.ackMessage(messageID)\r\n        }\r\n        break\r\n      }\r\n      case 'message': {\r\n        if (this.lastServerMessages.indexOf(messageID) != -1) {\r\n          // console.warn('[MT] Server same messageID: ', messageID)\r\n          this.ackMessage(messageID)\r\n          return\r\n        }\r\n        this.lastServerMessages.push(messageID)\r\n        if (this.lastServerMessages.length > 100) {\r\n          this.lastServerMessages.shift()\r\n        }\r\n        await this.processMessage(message.body, message.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'new_session_created': {\r\n        // this.ackMessage(messageID)\r\n\r\n        // this.processMessageAck(message.first_msg_id)\r\n        // await this.applyServerSalt(message.server_salt)\r\n\r\n        this.emit('new-session', {\r\n          threadID   : this.threadID,\r\n          networkerDC: this.dcID,\r\n          messageID,\r\n          message\r\n        })\r\n\r\n        // const baseDcID = await this.storage.get('dc')\r\n        // const updateCond =\r\n        //   baseDcID === this.dcID &&\r\n        //   !this.upload &&\r\n        //   updatesProcessor\r\n        // if (updateCond)\r\n        //   updatesProcessor(message, true)\r\n\r\n        break\r\n      }\r\n      case 'msgs_ack': {\r\n        message.msg_ids.forEach(this.processMessageAck)\r\n        break\r\n      }\r\n      case 'msg_detailed_info': {\r\n        if (!this.state.hasSent(message.msg_id)) {\r\n          this.ackMessage(message.answer_msg_id)\r\n          break\r\n        }\r\n        break\r\n      }\r\n      case 'msg_new_detailed_info': {\r\n        this.ackMessage(message.answer_msg_id)\r\n        this.reqResendMessage(message.answer_msg_id)\r\n        break\r\n      }\r\n      case 'msgs_state_info': {\r\n        this.ackMessage(message.answer_msg_id)\r\n        const spliceCond =\r\n          this.lastResendReq &&\r\n          //eslint-disable-next-line\r\n          this.lastResendReq.req_msg_id == message.req_msg_id;\r\n        if (spliceCond) {\r\n          const resendDel = []\r\n          for (const badMsgID of this.lastResendReq.resend_msg_ids) {\r\n            resendDel.push(badMsgID)\r\n            this.state.deleteResent(badMsgID)\r\n          }\r\n          dispatch(NETWORKER_STATE.RESEND.DEL(resendDel, this.dcID))\r\n        }\r\n        break\r\n      }\r\n      case 'rpc_result': {\r\n        this.ackMessage(messageID)\r\n\r\n        const sentMessageID = message.req_msg_id\r\n        const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n        this.processMessageAck(sentMessageID)\r\n        if (!sentMessage) break\r\n\r\n        if (message.result._ == 'rpc_error') {\r\n          this.emit('rpc-error', {\r\n            threadID   : this.threadID,\r\n            networkerDC: this.dcID,\r\n            error      : message.result,\r\n            sentMessage,\r\n            message\r\n          })\r\n\r\n        } else {\r\n          this.emit('rpc-result', {\r\n            threadID   : this.threadID,\r\n            networkerDC: this.dcID,\r\n            message,\r\n            sentMessage,\r\n            result     : message.result\r\n          })\r\n          if (sentMessage.isAPI)\r\n            this.connectionInited = true\r\n        }\r\n        dispatch(NETWORKER_STATE.SENT.DEL([sentMessage], this.dcID))\r\n        this.state.deleteSent(sentMessage)\r\n        break\r\n      }\r\n      default: {\r\n        this.ackMessage(messageID)\r\n        this.emit('untyped-message', {\r\n          threadID   : this.threadID,\r\n          networkerDC: this.dcID,\r\n          message,\r\n          messageID,\r\n          sessionID,\r\n          result     : message.result\r\n        })\r\n        if (updatesProcessor) updatesProcessor(message, true)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const startAll = () => {\r\n  if (akStopped) {\r\n    akStopped = false\r\n    updatesProcessor({ _: 'new_session_created' }, true)\r\n  }\r\n}\r\n\r\nexport const stopAll = () => akStopped = true\r\n\r\nexport const setUpdatesProcessor = (callback: *) =>\r\n  updatesProcessor = callback\r\n\r\n\r\nconst verifyInnerMessages = (messages) => {\r\n  if (messages.length !== new Set(messages).size) {\r\n    console.log(`!!!!!!WARN!!!!!!`, 'container check failed', messages)\r\n      // throw new Error('Container bug')\r\n  }\r\n}\r\n\r\nexport default NetworkerThread\r\n\r\nexport type { NetworkerThread as NetworkerType }\r\n"]}