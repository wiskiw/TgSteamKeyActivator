'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

require('axios');

var _ramda = require('ramda');

var _http = require('../../http');

var _http2 = _interopRequireDefault(_http);

var _error2 = require('../../error');

var _timeManager = require('../time-manager');

var _reader = require('../../tl/reader');

var _writer = require('../../tl/writer');

var _configProvider = require('../../config-provider');

var _configProvider2 = _interopRequireDefault(_configProvider);

var _tl = require('../../tl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var is404 = (0, _ramda.pathEq)(['response', 'status'], 404);
var notError = (0, _ramda.allPass)([(0, _ramda.has)('message'), (0, _ramda.has)('type')]);

var reqOpts = {
  responseType: 'arraybuffer'
};

var SendPlain = uid => {
  function onlySendPlainReq(requestBuffer) {
    var requestLength = requestBuffer.byteLength,
        requestArray = new Int32Array(requestBuffer);

    var header = new _tl.Serialization({}, uid);
    var headBox = header.writer;

    (0, _writer.writeLongP)(headBox, 0, 0, 'auth_key_id'); // Auth key
    (0, _writer.writeLong)(headBox, (0, _timeManager.generateID)(uid), 'msg_id'); // Msg_id
    (0, _writer.writeInt)(headBox, requestLength, 'request_length');

    var headerBuffer = headBox.getBuffer(),
        headerArray = new Int32Array(headerBuffer);
    var headerLength = headerBuffer.byteLength;

    var resultBuffer = new ArrayBuffer(headerLength + requestLength),
        resultArray = new Int32Array(resultBuffer);

    resultArray.set(headerArray);
    resultArray.set(requestArray, headerArray.length);

    return resultArray;
  }

  var onlySendPlainErr = err => {
    var error = void 0;
    switch (true) {
      case is404(err):
        error = new _error2.ErrorNotFound(err);
        break;
      case notError(err):
        error = new _error2.ErrorBadResponse('', err);
        break;
      default:
        error = err;
    }
    _configProvider2.default.emit(uid)('response-raw', error);
    return _bluebird2.default.reject(error);
  };

  var onlySendPlainRes = url => req => {
    if (!req.data || !req.data.byteLength) {
      var error = new _error2.ErrorBadResponse(url);
      _configProvider2.default.emit(uid)('response-raw', error);
      return _bluebird2.default.reject(error);
    }

    var deserializer = void 0;
    try {
      deserializer = new _tl.Deserialization(req.data, { mtproto: true }, uid);
      var ctx = deserializer.typeBuffer;
      (0, _reader.readLong)(ctx, 'auth_key_id');
      (0, _reader.readLong)(ctx, 'msg_id');
      (0, _reader.readInt)(ctx, 'msg_len');
    } catch (e) {
      var _error = new _error2.ErrorBadResponse(url, e);
      _configProvider2.default.emit(uid)('response-raw', _error);
      return _bluebird2.default.reject(_error);
    }
    _configProvider2.default.emit(uid)('response-raw', {
      data: req.data,
      status: req.status,
      statusText: req.statusText
    });
    return deserializer;
  };

  var sendPlainReq = (url, requestBuffer) => _bluebird2.default.resolve().then(() => onlySendPlainReq(requestBuffer)).then(bytes => _http2.default.post(url, bytes, reqOpts)).then(onlySendPlainRes(url), onlySendPlainErr);

  return sendPlainReq;
};

exports.default = SendPlain;
//# sourceMappingURL=send-plain-req.js.map