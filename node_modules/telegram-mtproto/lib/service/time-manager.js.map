{"version":3,"sources":["../../src/service/time-manager.js"],"names":["log","tsNow","t","Date","now","window","tsOffset","generateMessageID","uid","timeTicks","timeSec","Math","floor","timerOffset","get","timeMSec","random","messageID","lastMessageID","set","applyServerTime","serverTime","localTime","newTimeOffset","changed","abs","generateID"],"mappings":";;;;;;;AAEA;;;;AAEA;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,MAAM,uBAAO,cAAnB;;AAEO,IAAMC,wBAAQ,MAAc;AACjC,MAAIC,IAAIC,KAAKC,GAAL,EAAR;AACA;AACA,MAAI,qBAAJ,EAAaF,KAAKG,OAAOC,QAAP,IAAmB,CAAxB;AACb,SAAOJ,CAAP;AACD,CALM;;AAQP,IAAMK,oBAAqBC,GAAD,IAAiB;AACzC,MAAMC,YAAYR,OAAlB;AAAA,MACMS,UAAUC,KAAKC,KAAL,CAAWH,YAAY,IAAvB,IAA+B,yBAAOI,WAAP,CAAmBC,GAAnB,CAAuBN,GAAvB,CAD/C;AAAA,MAEMO,WAAWN,YAAY,IAF7B;AAAA,MAGMO,SAAS,wBAAc,MAAd,CAHf;;AAKA,MAAIC,YAAY,CAACP,OAAD,EAAUK,YAAY,EAAZ,GAAiBC,UAAU,CAA3B,GAA+B,CAAzC,CAAhB;AACA,MAAME,gBAAgB,yBAAOA,aAAP,CAAqBJ,GAArB,CAAyBN,GAAzB,CAAtB;AACA,MAAIU,cAAc,CAAd,IAAmBD,UAAU,CAAV,CAAnB,IACFC,cAAc,CAAd,KAAoBD,UAAU,CAAV,CAApB,IAAoCC,cAAc,CAAd,KAAoBD,UAAU,CAAV,CAD1D,EACwE;AACtEA,gBAAY,CAACC,cAAc,CAAd,CAAD,EAAmBA,cAAc,CAAd,IAAmB,CAAtC,CAAZ;AACD;AACD,2BAAOA,aAAP,CAAqBC,GAArB,CAAyBX,GAAzB,EAA8BS,SAA9B;;AAEA;;AAEA,SAAO,mBAASA,UAAU,CAAV,CAAT,EAAuBA,UAAU,CAAV,CAAvB,CAAP;AACD,CAjBD;;AAmBO,IAAMG,4CAAkB,CAC7BZ,GAD6B,EAE7Ba,UAF6B,EAG7BC,SAH6B,KAGN;;AAEvB,MAAMC,gBAAgBF,aAAaV,KAAKC,KAAL,CAAW,CAACU,aAAarB,OAAd,IAAyB,IAApC,CAAnC;AACA,MAAMuB,UAAUb,KAAKc,GAAL,CAAS,yBAAOZ,WAAP,CAAmBC,GAAnB,CAAuBN,GAAvB,IAA8Be,aAAvC,IAAwD,EAAxE;;AAEA,2BAAOL,aAAP,CAAqBC,GAArB,CAAyBX,GAAzB,EAA8B,CAAC,CAAD,EAAI,CAAJ,CAA9B;AACA,2BAAOK,WAAP,CAAmBM,GAAnB,CAAuBX,GAAvB,EAA4Be,aAA5B;AACAvB,KAAI,mBAAJ,CAAuBqB,UAAvB,EAAmCC,SAAnC,EAA8CC,aAA9C,EAA6DC,OAA7D;;AAEA,SAAOA,OAAP;AACD,CAbM;;QAeuBE,U,GAArBnB,iB","file":"time-manager.js","sourcesContent":["//@flow\n\nimport isNode from 'detect-node'\n\nimport { nextRandomInt, lshift32 } from '../bin'\nimport Config from '../config-provider'\n\nimport Logger from 'mtproto-logger'\n\nconst log = Logger`time-manager`\n\nexport const tsNow = (): number => {\n  let t = Date.now()\n  //eslint-disable-next-line\n  if (!isNode) t += window.tsOffset || 0\n  return t\n}\n\n\nconst generateMessageID = (uid: string) => {\n  const timeTicks = tsNow(),\n        timeSec = Math.floor(timeTicks / 1000) + Config.timerOffset.get(uid),\n        timeMSec = timeTicks % 1000,\n        random = nextRandomInt(0xFFFF)\n\n  let messageID = [timeSec, timeMSec << 21 | random << 3 | 4]\n  const lastMessageID = Config.lastMessageID.get(uid)\n  if (lastMessageID[0] > messageID[0] ||\n    lastMessageID[0] == messageID[0] && lastMessageID[1] >= messageID[1]) {\n    messageID = [lastMessageID[0], lastMessageID[1] + 4]\n  }\n  Config.lastMessageID.set(uid, messageID)\n\n  // console.log('generated msg id', messageID, timerOffset)\n\n  return lshift32(messageID[0], messageID[1])\n}\n\nexport const applyServerTime = (\n  uid: string,\n  serverTime: number,\n  localTime?: number) => {\n\n  const newTimeOffset = serverTime - Math.floor((localTime || tsNow()) / 1000)\n  const changed = Math.abs(Config.timerOffset.get(uid) - newTimeOffset) > 10\n\n  Config.lastMessageID.set(uid, [0, 0])\n  Config.timerOffset.set(uid, newTimeOffset)\n  log`Apply server time`(serverTime, localTime, newTimeOffset, changed)\n\n  return changed\n}\n\nexport { generateMessageID as generateID }\n"]}