{"version":3,"sources":["../../../src/service/main/index.js"],"names":["log","generateLayers","api","mt","apiLayer","mtLayer","MTProto","constructor","config","emitter","wildcard","on","bind","emit","state","defaultDC","uid","INIT","fullConfig","dcMap","server","schema","mtSchema","signIn","rootEmitter","apiSchema","layer","storage","app","data","rest","length","bus","setTimeout","SWITCH_ON"],"mappings":";;;;;;AAEA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;AAGA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AAVA,IAAMA,MAAM,uBAAO,MAAnB;;AAaA,IAAMC,iBAAiB,CAACC,GAAD,EAAgBC,EAAhB,MAAkC;AACvDC,YAAU,qBAAWF,GAAX,CAD6C;AAEvDG,WAAU,qBAAWF,EAAX;AAF6C,CAAlC,CAAvB;;AAKA,MAAMG,OAAN,CAAc;AAaZC,cAAYC,MAAZ,EAAgC;AAAA,SAVhCC,OAUgC,GAVR,2BAAiB;AACvCC,gBAAU;AAD6B,KAAjB,CAUQ;AAAA,SANhCC,EAMgC,GANvB,KAAKF,OAAL,CAAaE,EAAb,CAAgBC,IAAhB,CAAqB,KAAKH,OAA1B,CAMuB;AAAA,SALhCI,IAKgC,GALnB,KAAKJ,OAAL,CAAaI,IAAb,CAAkBD,IAAlB,CAAuB,KAAKH,OAA5B,CAKmB;AAAA,SAHhCK,KAGgC,GAHxB,qBAGwB;AAAA,SAFhCC,SAEgC,GAFZ,CAEY;;AAC9B,QAAMC,MAAM,kBAAZ;AACA,wBAAS,aAAKC,IAAL,CAAUD,GAAV,CAAT;AACA,QAAME,aAAa,mCAAoBV,MAApB,CAAnB;AACA,QAAMW,QAAQ,kBAAkBX,OAAOY,MAAzB,CAAd;AACA,SAAKZ,MAAL,GAAcU,UAAd;AACA,QAAM,EAAEd,QAAF,EAAYC,OAAZ,KAAwBJ,eAAe,KAAKO,MAAL,CAAYa,MAA3B,EAAmC,KAAKb,MAAL,CAAYc,QAA/C,CAA9B;AACA,SAAKN,GAAL,GAAWA,GAAX;AACA,0CAAiB;AACfA,SADe;AAEfO,cAAa,KAFE;AAGfV,YAAa,KAAKA,IAHH;AAIfW,mBAAa,yBAAkBR,GAAlB,EAAuB,KAAKP,OAA5B,CAJE;AAKfY,cAAa;AACXI,mBAAWP,WAAWG,MADX;AAEXC,kBAAWJ,WAAWI;AAFX,OALE;AASfI,aAAO;AACLtB,gBADK;AAELC;AAFK,OATQ;AAafc;AAbe,KAAjB;AAeA,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKW,OAAL,GAAeT,WAAWU,GAAX,CAAeD,OAA9B;AACA,SAAKzB,GAAL,GAAW,2BAAegB,UAAf,EAA2BF,GAA3B,CAAX;AACA,SAAKP,OAAL,CAAaE,EAAb,CAAgB,GAAhB,EAAqB,CAACkB,IAAD,EAAO,GAAGC,IAAV,KAAmB;AACtC9B,UAAI,OAAJ,EAAa6B,IAAb;AACA,UAAIC,KAAKC,MAAL,GAAc,CAAlB,EACE/B,IAAI,OAAJ,EAAa,MAAb,EAAqB8B,IAArB;AACH,KAJD;AAKA,SAAKE,GAAL,GAAW,yBAAU,IAAV,CAAX;AACAC,eAAW,MAAM,oBAAS,aAAKC,SAAL,CAAelB,GAAf,CAAT,CAAjB,EAAgD,GAAhD;AAED;AA/CW;;kBAkDCV,O","file":"index.js","sourcesContent":["//@flow\n\nimport uuid from 'uuid/v4'\nimport EventEmitter from 'eventemitter2'\n\nimport { ApiManager } from '../api-manager'\nimport Layout from '../../layout'\n\nimport configNormalization from './config-normalization'\nimport { registerInstance } from '../../config-provider'\nimport State from './state'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`main`\n\nimport parseServerConfig from '../../config-check/dc'\nimport streamBus from '../../event/stream-bus'\nimport { ScopedEmitter } from '../../event'\nimport { type AsyncStorage } from '../../plugins/index.h'\nimport { type TLSchema } from '../../tl/index.h'\nimport { type ConfigType, type StrictConfig } from './index.h'\nimport { type Emit, type On } from 'eventemitter2'\nimport { dispatch } from '../../state/core'\nimport { MAIN } from '../../state/action'\n\n\nconst generateLayers = (api: TLSchema, mt: TLSchema) => ({\n  apiLayer: new Layout(api),\n  mtLayer : new Layout(mt),\n})\n\nclass MTProto {\n  config: StrictConfig\n  uid: string\n  emitter: EventEmitter = new EventEmitter({\n    wildcard: true\n  })\n  api: ApiManager\n  on: On = this.emitter.on.bind(this.emitter)\n  emit: Emit = this.emitter.emit.bind(this.emitter)\n  storage: AsyncStorage\n  state = new State\n  defaultDC: number = 2\n  bus: *\n  constructor(config: ConfigType) {\n    const uid = uuid()\n    dispatch(MAIN.INIT(uid))\n    const fullConfig = configNormalization(config)\n    const dcMap = parseServerConfig(config.server)\n    this.config = fullConfig\n    const { apiLayer, mtLayer } = generateLayers(this.config.schema, this.config.mtSchema)\n    this.uid = uid\n    registerInstance({\n      uid,\n      signIn     : false,\n      emit       : this.emit,\n      rootEmitter: new ScopedEmitter(uid, this.emitter),\n      schema     : {\n        apiSchema: fullConfig.schema,\n        mtSchema : fullConfig.mtSchema\n      },\n      layer: {\n        apiLayer,\n        mtLayer\n      },\n      dcMap\n    })\n    this.uid = uid\n    this.storage = fullConfig.app.storage\n    this.api = new ApiManager(fullConfig, uid)\n    this.emitter.on('*', (data, ...rest) => {\n      log('event')(data)\n      if (rest.length > 0)\n        log('event', 'rest')(rest)\n    })\n    this.bus = streamBus(this)\n    setTimeout(() => dispatch(MAIN.SWITCH_ON(uid)), 3e1)\n\n  }\n}\n\nexport default MTProto\n\nexport type { MTProto }\n"]}