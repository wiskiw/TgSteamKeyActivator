'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _eventemitter = require('eventemitter2');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

var _apiManager = require('../api-manager');

var _layout = require('../../layout');

var _layout2 = _interopRequireDefault(_layout);

var _configNormalization = require('./config-normalization');

var _configNormalization2 = _interopRequireDefault(_configNormalization);

var _configProvider = require('../../config-provider');

var _state = require('./state');

var _state2 = _interopRequireDefault(_state);

var _mtprotoLogger = require('mtproto-logger');

var _mtprotoLogger2 = _interopRequireDefault(_mtprotoLogger);

var _dc = require('../../config-check/dc');

var _dc2 = _interopRequireDefault(_dc);

var _streamBus = require('../../event/stream-bus');

var _streamBus2 = _interopRequireDefault(_streamBus);

var _event = require('../../event');

require('../../plugins/index.h');

require('../../tl/index.h');

require('./index.h');

var _core = require('../../state/core');

var _action = require('../../state/action');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = _mtprotoLogger2.default`main`;

var generateLayers = (api, mt) => ({
  apiLayer: new _layout2.default(api),
  mtLayer: new _layout2.default(mt)
});

class MTProto {
  constructor(config) {
    this.emitter = new _eventemitter2.default({
      wildcard: true
    });
    this.on = this.emitter.on.bind(this.emitter);
    this.emit = this.emitter.emit.bind(this.emitter);
    this.state = new _state2.default();
    this.defaultDC = 2;

    var uid = (0, _v2.default)();
    (0, _core.dispatch)(_action.MAIN.INIT(uid));
    var fullConfig = (0, _configNormalization2.default)(config);
    var dcMap = (0, _dc2.default)(config.server);
    this.config = fullConfig;
    var { apiLayer, mtLayer } = generateLayers(this.config.schema, this.config.mtSchema);
    this.uid = uid;
    (0, _configProvider.registerInstance)({
      uid,
      signIn: false,
      emit: this.emit,
      rootEmitter: new _event.ScopedEmitter(uid, this.emitter),
      schema: {
        apiSchema: fullConfig.schema,
        mtSchema: fullConfig.mtSchema
      },
      layer: {
        apiLayer,
        mtLayer
      },
      dcMap
    });
    this.uid = uid;
    this.storage = fullConfig.app.storage;
    this.api = new _apiManager.ApiManager(fullConfig, uid);
    this.emitter.on('*', (data, ...rest) => {
      log('event')(data);
      if (rest.length > 0) log('event', 'rest')(rest);
    });
    this.bus = (0, _streamBus2.default)(this);
    setTimeout(() => (0, _core.dispatch)(_action.MAIN.SWITCH_ON(uid)), 3e1);
  }
}

exports.default = MTProto;
//# sourceMappingURL=index.js.map