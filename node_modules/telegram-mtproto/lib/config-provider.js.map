{"version":3,"sources":["../src/config-provider.js"],"names":["getConfig","registerInstance","provider","common","Config","signIn","get","uid","set","value","rootEmitter","emit","layer","apiLayer","mtLayer","schema","apiSchema","mtSchema","timerOffset","lastMessageID","dcMap","id","dc","Error","Crypto","config","fullConfig"],"mappings":";;;;;QAyFgBA,S,GAAAA,S;QAMAC,gB,GAAAA,gB;;AA7FhB;;;;AAGA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAPA;;AAqCA,IAAMC,WAAqB,EAA3B;;AAEA,IAAMC,oDAAN;;AAIA,IAAMC,SAAS;AACbC,UAAQ;AACNC,SAAMC,GAAD,IAAiBP,UAAUO,GAAV,EAAeF,MAD/B;AAENG,QAAID,GAAJ,EAAiBE,KAAjB,EAAiC;AAC/BT,gBAAUO,GAAV,EAAeF,MAAf,GAAwBI,KAAxB;AACD;AAJK,GADK;AAObC,eAAcH,GAAD,IAAiBP,UAAUO,GAAV,EAAeG,WAPhC;AAQbC,QAAcJ,GAAD,IAAiBP,UAAUO,GAAV,EAAeI,IARhC;AASbC,SAAa;AACXC,cAAWN,GAAD,IAAiBP,UAAUO,GAAV,EAAeK,KAAf,CAAqBC,QADrC;AAEXC,aAAWP,GAAD,IAAiBP,UAAUO,GAAV,EAAeK,KAAf,CAAqBE;AAFrC,GATA;AAabC,UAAQ;AACNT,SAAYC,GAAD,IAAiBP,UAAUO,GAAV,EAAeQ,MADrC;AAENC,eAAYT,GAAD,IAAiBP,UAAUO,GAAV,EAAeQ,MAAf,CAAsBC,SAF5C;AAGNC,cAAYV,GAAD,IAAiBP,UAAUO,GAAV,EAAeQ,MAAf,CAAsBE;AAH5C,GAbK;AAkBbC,eAAa;AACXZ,SAAMC,GAAD,IAAiBP,UAAUO,GAAV,EAAeW,WAD1B;AAEXV,QAAID,GAAJ,EAAiBE,KAAjB,EAAgC;AAC9BT,gBAAUO,GAAV,EAAeW,WAAf,GAA6BT,KAA7B;AACD;AAJU,GAlBA;AAwBbU,iBAAe;AACbb,SAAMC,GAAD,IAAiBP,UAAUO,GAAV,EAAeY,aADxB;AAEbX,QAAID,GAAJ,EAAiBE,KAAjB,EAA0C;AACxCT,gBAAUO,GAAV,EAAeY,aAAf,GAA+BV,KAA/B;AACD;AAJY,GAxBF;AA8BbW,QAAMb,GAAN,EAAmBc,EAAnB,EAA+B;AAC7B,QAAMC,KAAKtB,UAAUO,GAAV,EAAea,KAAf,CAAqBd,GAArB,CAAyBe,EAAzB,CAAX;AACA,QAAI,OAAOC,EAAP,KAAc,QAAlB,EACE,MAAM,IAAIC,KAAJ,CAAW,gBAAeF,EAAG,EAA7B,CAAN;AACF,WAAOC,EAAP;AACD,GAnCY;AAoCbnB;AApCa,CAAf;;AAyCAC,OAAOD,MAAP,CAAcqB,MAAd,GAAuB,wBAAUpB,OAAOD,MAAjB,CAAvB;;AAEO,SAASH,SAAT,CAAmBO,GAAnB,EAAgC;AACrC,MAAMkB,SAASvB,SAASK,GAAT,CAAf;AACA,MAAIkB,UAAU,IAAd,EAAoB,MAAM,iCAA0BlB,GAA1B,CAAN;AACpB,SAAOkB,MAAP;AACD;;AAEM,SAASxB,gBAAT,CAA0BwB,MAA1B,EAAuE;AAC5E,MAAMC,+BAEDD,MAFC;AAGJP,iBAAe,CAHX;AAIJC,mBAAe,CAAC,CAAD,EAAI,CAAJ;AAJX,IAAN;AAMAjB,WAASwB,WAAWnB,GAApB,IAA2BmB,UAA3B;AACD;;kBAEctB,M","file":"config-provider.js","sourcesContent":["//@flow\n\nimport uuid from 'uuid/v4'\n// import isNode from 'detect-node'\n\nimport { ProviderRegistryError } from './error'\nimport { type TLSchema } from './tl/index.h'\nimport { type Emit, type EventEmitterType } from 'eventemitter2'\nimport Layout from './layout'\nimport cryptoCommon from './co-worker/common-provider'\nimport getCrypto from './co-worker'\n\ntype InstanceConfig = {|\n  +uid: string,\n  emit: Emit,\n  +rootEmitter: EventEmitterType,\n  signIn: boolean,\n  +schema: {|\n    apiSchema: TLSchema,\n    mtSchema: TLSchema\n  |},\n  +layer: {|\n    apiLayer: Layout,\n    mtLayer: Layout,\n  |},\n  timerOffset: number,\n  lastMessageID: [number, number],\n  dcMap: Map<number, string>\n|}\n\ntype Provider = {\n  [uid: string]: InstanceConfig\n}\n\ntype InstanceDiff = {\n  timerOffset: number,\n  lastMessageID: [number, number]\n}\n\n\nconst provider: Provider = { }\n\nconst common = {\n  ...cryptoCommon\n}\n\nconst Config = {\n  signIn: {\n    get: (uid: string) => getConfig(uid).signIn,\n    set(uid: string, value: boolean) {\n      getConfig(uid).signIn = value\n    }\n  },\n  rootEmitter: (uid: string) => getConfig(uid).rootEmitter,\n  emit       : (uid: string) => getConfig(uid).emit,\n  layer      : {\n    apiLayer: (uid: string) => getConfig(uid).layer.apiLayer,\n    mtLayer : (uid: string) => getConfig(uid).layer.mtLayer,\n  },\n  schema: {\n    get      : (uid: string) => getConfig(uid).schema,\n    apiSchema: (uid: string) => getConfig(uid).schema.apiSchema,\n    mtSchema : (uid: string) => getConfig(uid).schema.mtSchema,\n  },\n  timerOffset: {\n    get: (uid: string) => getConfig(uid).timerOffset,\n    set(uid: string, value: number) {\n      getConfig(uid).timerOffset = value\n    }\n  },\n  lastMessageID: {\n    get: (uid: string) => getConfig(uid).lastMessageID,\n    set(uid: string, value: [number, number]) {\n      getConfig(uid).lastMessageID = value\n    }\n  },\n  dcMap(uid: string, id: number) {\n    const dc = getConfig(uid).dcMap.get(id)\n    if (typeof dc !== 'string')\n      throw new Error(`Wrong dc id! ${id}`)\n    return dc\n  },\n  common\n}\n\nexport type Common = typeof Config.common;\n\nConfig.common.Crypto = getCrypto(Config.common)\n\nexport function getConfig(uid: string) {\n  const config = provider[uid]\n  if (config == null) throw new ProviderRegistryError(uid)\n  return config\n}\n\nexport function registerInstance(config: $Diff<InstanceConfig, InstanceDiff>) {\n  const fullConfig: InstanceConfig = {\n    //$FlowIssue\n    ...config,\n    timerOffset  : 0,\n    lastMessageID: [0, 0]\n  }\n  provider[fullConfig.uid] = fullConfig\n}\n\nexport default Config\n"]}