{"version":3,"sources":["../../src/co-worker/web-worker.js"],"names":["log","Webworker","of","constructor","taskCount","awaiting","initWorker","worker","postMessage","getNextID","run","taskType","data","task","taskID","addTaskAwait","promise","getWorker","onmessage","isCryptoTask","resolveTask","result","onerror","err","defer","resolve","obj","WorkerInstance","require"],"mappings":";;;;;;AAEA;;;;AACA;;;;;;AACA,IAAMA,MAAM,uBAAO,YAAnB;;AAMA,MAAMC,SAAN,CAAgB;AACd,SAAOC,EAAP,GAAY;AACV,WAAO,IAAID,SAAJ,EAAP;AACD;;AAYDE,gBAAc;AAAA,SAVdC,SAUc,GAVM,CAUN;AAAA,SARdC,QAQc,GAFV,EAEU;;AACZ,SAAKC,UAAL;AACA,SAAKC,MAAL,CAAYC,WAAZ,CAAwB,GAAxB;AACD;;AAEDC,cAAY;AACV,WAAO,KAAKL,SAAL,EAAP;AACD;;AAEDM,MAAIC,QAAJ,EAAyBC,IAAzB,EAAkC;AAChC,QAAMC,OAAa;AACjBA,YAAQF,QADS;AAEjBG,cAAQ,KAAKL,SAAL,EAFS;AAGjBG;AAHiB,KAAnB;AAKA,WAAO,KAAKG,YAAL,CAAkBF,IAAlB,CAAP;AACD;;AAEDE,eAAaF,IAAb,EAAyB;AACvB,SAAKR,QAAL,CAAcQ,KAAKC,MAAnB,IAA6B,sBAA7B;AACA,SAAKP,MAAL,CAAYC,WAAZ,CAAwBK,IAAxB;AACA,WAAO,KAAKR,QAAL,CAAcQ,KAAKC,MAAnB,EAA2BE,OAAlC;AACD;;AAEDV,eAAa;AACX,SAAKC,MAAL,GAAcU,WAAd;;AAEA,QAAMC,YAAY,CAAC,EAAEN,IAAF,EAAD,KAA0B;AAC1C,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,iBAAS,OAAT,GACIZ,IAAI,UAAJ,CADJ,GAEIA,IAAI,wBAAJ,EAA8BY,IAA9B,CAFJ;AAGD,OAJD,MAIO,IAAI,CAACO,aAAaP,IAAb,CAAL,EAAyB;AAC9BZ,YAAI,iBAAJ,EAAuBY,IAAvB;AACD,OAFM,MAEA;AACL,aAAKQ,WAAL,CAAiBR,KAAKE,MAAtB,EAA8BF,KAAKS,MAAnC;AACD;AACF,KAVD;;AAYA,QAAMC,UAAWC,GAAD,IAAgB;AAC9BvB,UAAI,OAAJ,EAAauB,GAAb;AACD,KAFD;;AAIA,SAAKhB,MAAL,CAAYW,SAAZ,GAAwBA,SAAxB;AACA,SAAKX,MAAL,CAAYe,OAAZ,GAAsBA,OAAtB;AACD;;AAEDF,cAAYN,MAAZ,EAA4BO,MAA5B,EAAuC;AACrC,QAAMG,QAAQ,KAAKnB,QAAL,CAAcS,MAAd,CAAd;AACA,QAAI,CAACU,KAAL,EAAY;AACVxB,UAAI,cAAJ,EAAoB,OAApB,EAA8B,kBAAiBc,MAAO,QAAtD;AACA;AACD;AACD,WAAO,KAAKT,QAAL,CAAcS,MAAd,CAAP;AACAU,UAAMC,OAAN,CAAcJ,MAAd;AACD;AAtEa;;AAyEhB,SAASF,YAAT,CAAsBO,GAAtB,EAA8D;AAC5D,SACE,OAAOA,GAAP,KAAe,QAAf,IACA,OAAOA,IAAIZ,MAAX,KAAsB,QAFxB;AAID;;AAED,SAASG,SAAT,GAAiC;AAC/B,MAAIU,uBAAJ;AACA,MAAI;AACF;AACAA,qBAAiBC,QAAQ,kCAAR,CAAjB;AACD,GAHD,CAGE,OAAOL,GAAP,EAAY;AACZI,qBAAiBC,QAAQ,aAAR,CAAjB;AACD;;AAED;AACA,MAAMrB,SAAS,IAAIoB,cAAJ,EAAf;AACA,SAAOpB,MAAP;AACD;;kBAEcN,S","file":"web-worker.js","sourcesContent":["//@flow\n\nimport blueDefer from '../util/defer'\nimport Logger from 'mtproto-logger'\nconst log = Logger`web-worker`\n\nimport type { TasksType, WorkerType, Task, TaskResult } from './index.h'\n\n\n\nclass Webworker {\n  static of() {\n    return new Webworker\n  }\n\n  taskCount: number = 0\n  worker: WorkerType\n  awaiting: {\n    [task: number]: {\n      resolve<-T>(data: T): void,\n      resolve<-E: Error>(data: E): void,\n      promise: Bluebird$Promise<*>\n    }\n  } = {}\n\n  constructor() {\n    this.initWorker()\n    this.worker.postMessage('b')\n  }\n\n  getNextID() {\n    return this.taskCount++\n  }\n\n  run(taskType: TasksType, data: *) {\n    const task: Task = {\n      task  : taskType,\n      taskID: this.getNextID(),\n      data,\n    }\n    return this.addTaskAwait(task)\n  }\n\n  addTaskAwait(task: Task) {\n    this.awaiting[task.taskID] = blueDefer()\n    this.worker.postMessage(task)\n    return this.awaiting[task.taskID].promise\n  }\n\n  initWorker() {\n    this.worker = getWorker()\n\n    const onmessage = ({ data }: TaskResult) => {\n      if (typeof data === 'string') {\n        data === 'ready'\n          ? log('CW ready')\n          : log('Unknown worker message', data)\n      } else if (!isCryptoTask(data)) {\n        log('Not crypto task', data)\n      } else {\n        this.resolveTask(data.taskID, data.result)\n      }\n    }\n\n    const onerror = (err: Error) => {\n      log('error')(err)\n    }\n\n    this.worker.onmessage = onmessage\n    this.worker.onerror = onerror\n  }\n\n  resolveTask(taskID: number, result: *) {\n    const defer = this.awaiting[taskID]\n    if (!defer) {\n      log('resolve task', 'error')(`No stored task ${taskID} found`)\n      return\n    }\n    delete this.awaiting[taskID]\n    defer.resolve(result)\n  }\n}\n\nfunction isCryptoTask(obj: $PropertyType<TaskResult, 'data'>) {\n  return (\n    typeof obj === 'object' &&\n    typeof obj.taskID === 'number'\n  )\n}\n\nfunction getWorker(): WorkerType {\n  let WorkerInstance\n  try {\n    //$FlowIssue\n    WorkerInstance = require('worker-loader?inline!./worker.js')\n  } catch (err) {\n    WorkerInstance = require('./worker.js')\n  }\n\n  //$FlowIssue\n  const worker = new WorkerInstance()\n  return worker\n}\n\nexport default Webworker\n"]}