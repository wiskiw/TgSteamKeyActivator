{"version":3,"sources":["../src/match.js"],"names":["match","matchBy","value","keys","Object","key","pred","singleTest","i","ln","length","remap","mapper","choose","mapped"],"mappings":"AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,SAASA,KAAT,wDACLC,OADK,UAELC,KAFK,6BAGK;AACV;AACA,MAAMC,sBAAiBC,OAAOD,IAAP,CAAYF,OAAZ,CAAvB;AACA,MAAII,YAAJ;AAAA,MACIC,8BADJ;AAAA,MAEIC,iCAFJ;AAGA,OAAK,IAAIC,IAAI,CAAR,EAAWC,KAAKN,KAAKO,MAA1B,EAAkCF,IAAIC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CH,UAAMF,KAAKK,CAAL,CAAN;AACAF,WAAOL,QAAQI,GAAR,CAAP;AACAE,iBAAaD,KAAKJ,KAAL,CAAb;AACA,QAAIK,eAAe,IAAnB,EACE,OAAOF,GAAP;AACH;AACD,SAAO,GAAP;AACD;;AAED,OAAO,SAASM,KAAT;;;;;yBAAA,CAKLV,OALK,UAKOW,MALP,UAKkBV,KALlB,+BAK4C;AACjD,SAAOU,OAAOZ,MAAMC,OAAN,EAAeC,KAAf,CAAP,CAAP;AACD;;AAED,OAAO,SAASW,MAAT;;;;0BAAA,CAILZ,OAJK,UAIOW,MAJP,UAIkBV,KAJlB,YAI8B;AACnC,MAAMY,0BAAqBF,OAAOZ,MAAMC,OAAN,EAAeC,KAAf,CAAP,CAA3B;AACA,SAAOY,OAAOZ,KAAP,CAAP;AACD;;AAED,eAAeF,KAAf","file":"match.js","sourcesContent":["//@flow\n\ntype Pred = (val: mixed) => boolean\n\n// interface Match {\n//   <V, M: { [key: *]: V }, K: $Keys<M> | '_'>(\n//     matchBy: $ObjMap<M, (val: V) => Pred>,\n//     value: mixed\n//   ): $Keys<M>,\n//   <V, M: { [key: *]: V }, K: $Keys<M> | '_'>(\n//     matchBy: $ObjMap<M, (val: V) => Pred>):\n//     (value: mixed) => $Keys<M>\n// }\n\n// interface Remap {\n//   < T: { [key: string]: Pred },\n//     V,\n//     M: { [key: $Keys<T>]: V }\n//   >(matchBy: T, mapper: M, value: mixed): V,\n//   < T: { [key: string]: Pred },\n//     V,\n//     M: { [key: $Keys<T>]: V }\n//   >(matchBy: T, mapper: M): (value: mixed) => V,\n//   < T: { [key: string]: Pred },\n//     V,\n//     M: { [key: $Keys<T>]: V }\n//   >(matchBy: T): (mapper: M, value: mixed) => V,\n//   < T: { [key: string]: Pred },\n//     V,\n//     M: { [key: $Keys<T>]: V }\n//   >(matchBy: T): (mapper: M) => (value: mixed) => V,\n// }\n\nexport function match<M: { [key: string]: Pred }, K: $Keys<M> | '_'>(\n  matchBy: M,\n  value: mixed\n): $Keys<M> {\n  //$FlowIssue\n  const keys: Array<K> = Object.keys(matchBy)\n  let key,\n      pred: $Values<M>,\n      singleTest: boolean\n  for (let i = 0, ln = keys.length; i < ln; ++i) {\n    key = keys[i]\n    pred = matchBy[key]\n    singleTest = pred(value)\n    if (singleTest === true)\n      return key\n  }\n  return '_'\n}\n\nexport function remap<\n  T: { [key: string]: Pred },\n  V,\n  //eslint-disable-next-line space-before-function-paren\n  M: $ObjMap<T, (pred: Pred) => V>\n>(matchBy: T, mapper: M, value: mixed): $Values<M> {\n  return mapper[match(matchBy, value)]\n}\n\nexport function choose<\n  T: { [key: string]: Pred },\n  //eslint-disable-next-line space-before-function-paren\n  M: $ObjMap<T, (pred: Pred) => (<I, O>(val: I) => O)>\n>(matchBy: T, mapper: M, value: any) {\n  const mapped: $Values<M> = mapper[match(matchBy, value)]\n  return mapped(value)\n}\n\nexport default match\n"]}