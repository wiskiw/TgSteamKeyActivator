//@flow

// interface Match {
//   <V, M: { [key: *]: V }, K: $Keys<M> | '_'>(
//     matchBy: $ObjMap<M, (val: V) => Pred>,
//     value: mixed
//   ): $Keys<M>,
//   <V, M: { [key: *]: V }, K: $Keys<M> | '_'>(
//     matchBy: $ObjMap<M, (val: V) => Pred>):
//     (value: mixed) => $Keys<M>
// }

// interface Remap {
//   < T: { [key: string]: Pred },
//     V,
//     M: { [key: $Keys<T>]: V }
//   >(matchBy: T, mapper: M, value: mixed): V,
//   < T: { [key: string]: Pred },
//     V,
//     M: { [key: $Keys<T>]: V }
//   >(matchBy: T, mapper: M): (value: mixed) => V,
//   < T: { [key: string]: Pred },
//     V,
//     M: { [key: $Keys<T>]: V }
//   >(matchBy: T): (mapper: M, value: mixed) => V,
//   < T: { [key: string]: Pred },
//     V,
//     M: { [key: $Keys<T>]: V }
//   >(matchBy: T): (mapper: M) => (value: mixed) => V,
// }

/*:: type Pred = (val: mixed) => boolean*/
export function match /*:: <M: { [key: string]: Pred }, K: $Keys<M> | '_'>*/(matchBy /*: M*/, value /*: mixed*/) /*: $Keys<M>*/ {
  //$FlowIssue
  var keys /*: Array<K>*/ = Object.keys(matchBy);
  var key = void 0,
      pred /*: $Values<M>*/ = void 0,
      singleTest /*: boolean*/ = void 0;
  for (var i = 0, ln = keys.length; i < ln; ++i) {
    key = keys[i];
    pred = matchBy[key];
    singleTest = pred(value);
    if (singleTest === true) return key;
  }
  return '_';
}

export function remap /*:: <
                        T: { [key: string]: Pred },
                        V,
                        //eslint-disable-next-line space-before-function-paren
                        M: $ObjMap<T, (pred: Pred) => V>
                      >*/(matchBy /*: T*/, mapper /*: M*/, value /*: mixed*/) /*: $Values<M>*/ {
  return mapper[match(matchBy, value)];
}

export function choose /*:: <
                         T: { [key: string]: Pred },
                         //eslint-disable-next-line space-before-function-paren
                         M: $ObjMap<T, (pred: Pred) => (<I, O>(val: I) => O)>
                       >*/(matchBy /*: T*/, mapper /*: M*/, value /*: any*/) {
  var mapped /*: $Values<M>*/ = mapper[match(matchBy, value)];
  return mapped(value);
}

export default match;
//# sourceMappingURL=match.js.map